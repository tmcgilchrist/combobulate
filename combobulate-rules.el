;; -*- lexical-binding: t -*-
;; This file is generated by build-relationships.py
;; Do not edit this file directly.

;; START Production rules for yaml
(defconst combobulate-rules-yaml 
 '(("alias" (:*unnamed* ("alias_name"))) 
 ("alias_name" (:*unnamed* nil)) 
 ("anchor" (:*unnamed* ("anchor_name"))) 
 ("anchor_name" (:*unnamed* nil)) 
 ("block_mapping" (:*unnamed* ("block_mapping_pair"))) 
 ("block_mapping_pair" (:*unnamed* nil :key ("flow_node" "block_node") :value ("flow_node" "block_node"))) 
 ("block_node" (:*unnamed* ("anchor" "block_scalar" "tag" "block_mapping" "block_sequence"))) 
 ("block_scalar" (:*unnamed* nil)) 
 ("block_sequence" (:*unnamed* ("block_sequence_item"))) 
 ("block_sequence_item" (:*unnamed* ("flow_node" "block_node"))) 
 ("boolean_scalar" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("directive_name" (:*unnamed* nil)) 
 ("directive_parameter" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("tag_directive" "flow_node" "reserved_directive" "block_node" "yaml_directive"))) 
 ("double_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float_scalar" (:*unnamed* nil)) 
 ("flow_mapping" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("flow_node" (:*unnamed* ("plain_scalar" "alias" "flow_sequence" "flow_mapping" "single_quote_scalar" "double_quote_scalar" "anchor" "tag"))) 
 ("flow_pair" (:*unnamed* nil :key ("flow_node") :value ("flow_node"))) 
 ("flow_sequence" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("integer_scalar" (:*unnamed* nil)) 
 ("null_scalar" (:*unnamed* nil)) 
 ("plain_scalar" (:*unnamed* ("null_scalar" "float_scalar" "integer_scalar" "string_scalar" "boolean_scalar"))) 
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter"))) 
 ("single_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("stream" (:*unnamed* ("document"))) 
 ("string_scalar" (:*unnamed* nil)) 
 ("tag" (:*unnamed* nil)) 
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix"))) 
 ("tag_handle" (:*unnamed* nil)) 
 ("tag_prefix" (:*unnamed* nil)) 
 ("yaml_directive" (:*unnamed* ("yaml_version"))) 
 ("yaml_version" (:*unnamed* nil)) 
))
;; END Production rules for yaml
;; START Inverse production rules for yaml
(defconst combobulate-rules-yaml-inverse 
 '(("alias" ("flow_node"))
   ("alias_name" ("alias"))
   ("anchor" ("flow_node" "block_node"))
   ("anchor_name" ("anchor"))
   ("block_mapping" ("block_node"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("block_mapping_pair" "document" "block_sequence_item"))
   ("block_scalar" ("block_node"))
   ("block_sequence" ("block_node"))
   ("block_sequence_item" ("block_sequence"))
   ("boolean_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("double_quote_scalar" ("flow_node"))
   ("escape_sequence" ("single_quote_scalar" "double_quote_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("flow_mapping" ("flow_node"))
   ("flow_node" ("flow_sequence" "flow_mapping" "flow_pair" "block_sequence_item" "block_mapping_pair" "document"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("flow_sequence" ("flow_node"))
   ("integer_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("plain_scalar" ("flow_node"))
   ("reserved_directive" ("document"))
   ("single_quote_scalar" ("flow_node"))
   ("string_scalar" ("plain_scalar"))
   ("tag" ("flow_node" "block_node"))
   ("tag_directive" ("document"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_directive" ("document"))
   ("yaml_version" ("yaml_directive"))
  ) 
)
;; END Inverse production rules for yaml
;; START All node types in yaml
(defconst combobulate-rules-yaml-types 
 '("alias" "alias_name" "anchor" "anchor_name" "block_mapping" "block_mapping_pair" "block_node" "block_scalar" "block_sequence" "block_sequence_item" "boolean_scalar" "comment" "directive_name" "directive_parameter" "document" "double_quote_scalar" "escape_sequence" "float_scalar" "flow_mapping" "flow_node" "flow_pair" "flow_sequence" "integer_scalar" "null_scalar" "plain_scalar" "reserved_directive" "single_quote_scalar" "stream" "string_scalar" "tag" "tag_directive" "tag_handle" "tag_prefix" "yaml_directive" "yaml_version") 
)
;; END All node types in yaml
;; START All supertypes in yaml
(defconst combobulate-rules-yaml-supertypes 
 nil 
)
;; END All supertypes in yaml

;; START Production rules for tsx
(defconst combobulate-rules-tsx 
 '(("_primary_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "property_identifier" "statement_block" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "declaration" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("array_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "expression" "existential_type" "tuple_type"))) 
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("array_pattern" "subscript_expression" "member_expression" "parenthesized_expression" "non_null_expression" "undefined" "object_pattern" "identifier") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("non_null_expression" "subscript_expression" "identifier" "member_expression" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("arguments" "template_string") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "identifier" "array_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("method_definition" "decorator" "method_signature" "abstract_method_signature" "class_static_block" "index_signature" "public_field_definition"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("implements_clause" "extends_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :consequence ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :left ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :right ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("constraint" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("import_alias" "abstract_class_declaration" "variable_declaration" "class_declaration" "enum_declaration" "function_signature" "generator_function_declaration" "interface_declaration" "ambient_declaration" "internal_module" "lexical_declaration" "type_alias_declaration" "function_declaration" "module"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("expression" "identifier" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("as_expression" "binary_expression" "assignment_expression" "glimmer_template" "jsx_self_closing_element" "unary_expression" "yield_expression" "new_expression" "satisfies_expression" "update_expression" "ternary_expression" "instantiation_expression" "primary_expression" "augmented_assignment_expression" "await_expression" "internal_module" "jsx_element"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("generic_type" "type_identifier" "nested_type_identifier"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("array_pattern" "subscript_expression" "member_expression" "parenthesized_expression" "non_null_expression" "undefined" "object_pattern" "identifier") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "expression_statement" "variable_declaration" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("required_parameter" "optional_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("array_type" "asserts" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "type_predicate" "existential_type" "tuple_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("named_imports" "identifier" "namespace_import"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :name ("identifier") :sign nil :type ("opting_type_annotation" "type_annotation" "omitting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("infer_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("subscript_expression" "identifier" "member_expression" "import") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("intersection_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("jsx_attribute" (:*unnamed* ("property_identifier" "jsx_expression" "jsx_namespace_name" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_text" "jsx_self_closing_element" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "sequence_expression" "spread_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("true" "number" "false" "unary_expression" "string" "null" "undefined"))) 
 ("lookup_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :name ("type_identifier") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("member_expression" (:*unnamed* ("property_identifier" "identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("property_identifier" "identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "pair" "spread_element" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "rest_pattern"))) 
 ("object_type" (:*unnamed* ("method_signature" "property_signature" "export_statement" "call_signature" "construct_signature" "index_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("opting_type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("pattern" (:*unnamed* ("array_pattern" "subscript_expression" "member_expression" "non_null_expression" "undefined" "object_pattern" "rest_pattern" "identifier"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("array" "string" "super" "parenthesized_expression" "number" "non_null_expression" "generator_function" "template_string" "false" "null" "function" "regex" "true" "import" "subscript_expression" "this" "arrow_function" "call_expression" "class" "meta_property" "member_expression" "object" "identifier" "undefined"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier" "rest_pattern") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("non_null_expression" "array_pattern" "subscript_expression" "undefined" "object_pattern" "member_expression" "identifier"))) 
 ("rest_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "expression" "existential_type" "tuple_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("if_statement" "return_statement" "do_statement" "for_in_statement" "throw_statement" "empty_statement" "import_statement" "while_statement" "switch_statement" "debugger_statement" "labeled_statement" "statement_block" "declaration" "try_statement" "expression_statement" "with_statement" "export_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("number" "expression" "predefined_type" "sequence_expression" "string") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "rest_type" "optional_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "required_parameter" "optional_parameter" "existential_type" "tuple_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_arguments" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("identifier" "this") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("instantiation_expression" "subscript_expression" "call_expression" "identifier" "member_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "identifier" "array_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for tsx
;; START Inverse production rules for tsx
(defconst combobulate-rules-tsx-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("method_signature" "abstract_method_signature" "method_definition" "property_signature" "required_parameter" "public_field_definition" "optional_parameter"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("array_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "type_query" "primary_expression"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "abstract_class_declaration" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "abstract_class_declaration" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_signature" "abstract_method_signature" "pair" "public_field_definition" "method_definition" "enum_body" "property_signature" "enum_assignment" "pair_pattern"))
   ("conditional_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement" "ambient_declaration"))
   ("decorator" ("abstract_class_declaration" "class_body" "class_declaration" "class" "export_statement" "required_parameter" "optional_parameter"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("string" "template_string"))
   ("existential_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("array" "binary_expression" "assignment_expression" "return_statement" "unary_expression" "assignment_pattern" "parenthesized_expression" "throw_statement" "yield_expression" "sequence_expression" "switch_case" "subscript_expression" "call_expression" "satisfies_expression" "template_substitution" "ternary_expression" "extends_clause" "instantiation_expression" "member_expression" "jsx_expression" "expression_statement" "export_statement" "required_parameter" "optional_parameter" "for_statement" "as_expression" "variable_declarator" "pair" "for_in_statement" "non_null_expression" "enum_assignment" "computed_property_name" "arguments" "arrow_function" "update_expression" "spread_element" "augmented_assignment_expression" "await_expression" "object_assignment_pattern" "public_field_definition"))
   ("expression_statement" ("statement" "for_statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "constructor_type" "generator_function" "generator_function_declaration" "function_type" "construct_signature" "function" "function_declaration"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("import_require_clause" "import_specifier" "export_specifier" "assignment_expression" "pattern" "function_signature" "generator_function" "type_query" "jsx_closing_element" "import_clause" "enum_declaration" "namespace_import" "nested_identifier" "instantiation_expression" "member_expression" "primary_expression" "export_statement" "required_parameter" "optional_parameter" "import_alias" "module" "jsx_opening_element" "decorator" "asserts" "catch_clause" "variable_declarator" "jsx_self_closing_element" "for_in_statement" "index_signature" "function" "function_declaration" "namespace_export" "rest_pattern" "arrow_function" "nested_type_identifier" "jsx_namespace_name" "generator_function_declaration" "augmented_assignment_expression" "internal_module" "type_predicate"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("primary_expression" "instantiation_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("infer_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("expression" "declaration"))
   ("intersection_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("literal_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("lookup_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("jsx_opening_element" "decorator" "assignment_expression" "jsx_self_closing_element" "pattern" "for_in_statement" "instantiation_expression" "member_expression" "nested_identifier" "primary_expression" "augmented_assignment_expression" "type_query" "rest_pattern" "jsx_closing_element"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("internal_module" "nested_type_identifier" "import_alias" "module"))
   ("nested_type_identifier" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "generic_type" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "augmented_assignment_expression" "rest_pattern"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("method_signature" "abstract_method_signature" "subscript_expression" "unary_expression" "pair" "public_field_definition" "method_definition" "primary_expression" "enum_body" "property_signature" "enum_assignment" "pair_pattern" "literal_type"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("object_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "interface_declaration" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("method_signature" "method_definition" "property_signature" "required_parameter" "public_field_definition" "optional_parameter"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("if_statement" "assignment_expression" "for_in_statement" "do_statement" "primary_expression" "while_statement" "with_statement" "augmented_assignment_expression" "switch_statement"))
   ("parenthesized_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("pattern" ("array_pattern" "assignment_pattern" "required_parameter" "pair_pattern" "optional_parameter"))
   ("predefined_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "subscript_expression" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("method_signature" "abstract_method_signature" "pair" "public_field_definition" "member_expression" "method_definition" "enum_body" "property_signature" "enum_assignment" "pair_pattern"))
   ("property_identifier" ("method_signature" "abstract_method_signature" "pair" "nested_identifier" "public_field_definition" "member_expression" "method_definition" "enum_body" "jsx_attribute" "property_signature" "ambient_declaration" "enum_assignment" "pair_pattern"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("rest_pattern" ("required_parameter" "object_pattern" "pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("subscript_expression" "return_statement" "template_substitution" "for_in_statement" "parenthesized_expression" "throw_statement" "jsx_expression" "expression_statement" "sequence_expression" "switch_case" "for_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("arguments" "object" "array" "jsx_expression"))
   ("statement" ("if_statement" "labeled_statement" "statement_block" "for_in_statement" "do_statement" "switch_default" "program" "while_statement" "with_statement" "else_clause" "switch_case" "for_statement"))
   ("statement_block" ("finally_clause" "catch_clause" "statement" "arrow_function" "try_statement" "method_definition" "class_static_block" "generator_function" "generator_function_declaration" "ambient_declaration" "internal_module" "function" "function_declaration" "module"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("import_require_clause" "import_specifier" "abstract_method_signature" "export_specifier" "public_field_definition" "enum_body" "literal_type" "subscript_expression" "method_definition" "primary_expression" "export_statement" "module" "method_signature" "pair" "import_statement" "jsx_attribute" "enum_assignment" "namespace_export" "property_signature" "internal_module" "pair_pattern"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("assignment_expression" "pattern" "for_in_statement" "instantiation_expression" "primary_expression" "augmented_assignment_expression" "type_query" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("asserts" "type_predicate" "primary_expression" "required_parameter" "optional_parameter"))
   ("this_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("abstract_method_signature" "function_signature" "parenthesized_expression" "generator_function" "construct_signature" "call_signature" "method_definition" "required_parameter" "optional_parameter" "method_signature" "catch_clause" "variable_declarator" "index_signature" "function" "function_declaration" "arrow_function" "generator_function_declaration" "property_signature" "public_field_definition"))
   ("type_arguments" ("jsx_opening_element" "call_expression" "jsx_self_closing_element" "instantiation_expression" "extends_clause" "generic_type" "new_expression"))
   ("type_identifier" ("array_type" "class_declaration" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "generic_type" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "type_parameter" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "abstract_class_declaration" "template_type" "rest_type" "conditional_type" "class" "nested_type_identifier" "readonly_type" "interface_declaration" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("abstract_class_declaration" "method_signature" "abstract_method_signature" "class_declaration" "call_signature" "arrow_function" "class" "function_signature" "method_definition" "type_alias_declaration" "constructor_type" "generator_function" "generator_function_declaration" "interface_declaration" "function_type" "construct_signature" "function" "function_declaration"))
   ("type_predicate" ("asserts" "type_predicate_annotation" "function_type"))
   ("type_predicate_annotation" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("type_query" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "rest_pattern" "literal_type"))
   ("union_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for tsx
;; START All node types in tsx
(defconst combobulate-rules-tsx-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in tsx
;; START All supertypes in tsx
(defconst combobulate-rules-tsx-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in tsx

;; START Production rules for css
(defconst combobulate-rules-css 
 '(("adjacent_sibling_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("arguments" (:*unnamed* ("string_value" "pseudo_class_selector" "class_selector" "child_selector" "binary_expression" "descendant_selector" "grid_value" "parenthesized_value" "namespace_selector" "adjacent_sibling_selector" "color_value" "float_value" "pseudo_element_selector" "universal_selector" "tag_name" "attribute_selector" "nesting_selector" "call_expression" "plain_value" "important" "id_selector" "integer_value" "sibling_selector"))) 
 ("at_keyword" (:*unnamed* nil)) 
 ("at_rule" (:*unnamed* ("selector_query" "feature_query" "unary_query" "at_keyword" "block" "binary_query" "keyword_query" "parenthesized_query"))) 
 ("attribute_name" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("attribute_selector" (:*unnamed* ("string_value" "pseudo_class_selector" "attribute_name" "child_selector" "class_selector" "binary_expression" "descendant_selector" "grid_value" "parenthesized_value" "namespace_selector" "adjacent_sibling_selector" "color_value" "float_value" "pseudo_element_selector" "universal_selector" "tag_name" "attribute_selector" "nesting_selector" "call_expression" "plain_value" "important" "id_selector" "integer_value" "sibling_selector"))) 
 ("binary_expression" (:*unnamed* ("string_value" "grid_value" "binary_expression" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value"))) 
 ("binary_query" (:*unnamed* ("selector_query" "unary_query" "keyword_query" "binary_query" "feature_query" "parenthesized_query"))) 
 ("block" (:*unnamed* ("media_statement" "keyframes_statement" "postcss_statement" "supports_statement" "declaration" "import_statement" "namespace_statement" "rule_set" "charset_statement" "at_rule"))) 
 ("call_expression" (:*unnamed* ("arguments" "function_name"))) 
 ("charset_statement" (:*unnamed* ("string_value" "grid_value" "binary_expression" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value"))) 
 ("child_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("class_name" (:*unnamed* nil)) 
 ("class_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "attribute_selector" "descendant_selector" "nesting_selector" "class_name" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("color_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("string_value" "grid_value" "binary_expression" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value" "property_name"))) 
 ("descendant_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("feature_name" (:*unnamed* nil)) 
 ("feature_query" (:*unnamed* ("string_value" "binary_expression" "grid_value" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value" "feature_name"))) 
 ("float_value" (:*unnamed* ("unit"))) 
 ("from" (:*unnamed* nil)) 
 ("function_name" (:*unnamed* nil)) 
 ("grid_value" (:*unnamed* ("string_value" "grid_value" "binary_expression" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value"))) 
 ("id_name" (:*unnamed* nil)) 
 ("id_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_name" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("import_statement" (:*unnamed* ("string_value" "binary_expression" "grid_value" "parenthesized_value" "color_value" "float_value" "selector_query" "important" "plain_value" "call_expression" "feature_query" "unary_query" "integer_value" "binary_query" "keyword_query" "parenthesized_query"))) 
 ("important" (:*unnamed* nil)) 
 ("integer_value" (:*unnamed* ("unit"))) 
 ("js_comment" (:*unnamed* nil)) 
 ("keyframe_block" (:*unnamed* ("from" "to" "integer_value" "block"))) 
 ("keyframe_block_list" (:*unnamed* ("keyframe_block"))) 
 ("keyframes_name" (:*unnamed* nil)) 
 ("keyframes_statement" (:*unnamed* ("keyframe_block_list" "at_keyword" "keyframes_name"))) 
 ("keyword_query" (:*unnamed* nil)) 
 ("media_statement" (:*unnamed* ("selector_query" "unary_query" "block" "keyword_query" "binary_query" "feature_query" "parenthesized_query"))) 
 ("namespace_name" (:*unnamed* nil)) 
 ("namespace_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("namespace_statement" (:*unnamed* ("string_value" "call_expression" "namespace_name"))) 
 ("nesting_selector" (:*unnamed* nil)) 
 ("parenthesized_query" (:*unnamed* ("selector_query" "unary_query" "keyword_query" "binary_query" "feature_query" "parenthesized_query"))) 
 ("parenthesized_value" (:*unnamed* ("string_value" "grid_value" "binary_expression" "call_expression" "important" "parenthesized_value" "plain_value" "integer_value" "color_value" "float_value"))) 
 ("plain_value" (:*unnamed* nil)) 
 ("postcss_statement" (:*unnamed* ("string_value" "binary_expression" "grid_value" "call_expression" "important" "parenthesized_value" "plain_value" "at_keyword" "integer_value" "color_value" "float_value"))) 
 ("property_name" (:*unnamed* nil)) 
 ("pseudo_class_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "class_name" "namespace_selector" "adjacent_sibling_selector" "pseudo_element_selector" "universal_selector" "tag_name" "arguments" "attribute_selector" "nesting_selector" "id_selector" "sibling_selector"))) 
 ("pseudo_element_selector" (:*unnamed* ("class_selector" "arguments" "child_selector" "pseudo_class_selector" "string_value" "attribute_selector" "descendant_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("rule_set" (:*unnamed* ("selectors" "block"))) 
 ("selector_query" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("selectors" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("sibling_selector" (:*unnamed* ("class_selector" "child_selector" "pseudo_class_selector" "string_value" "descendant_selector" "attribute_selector" "nesting_selector" "id_selector" "namespace_selector" "adjacent_sibling_selector" "sibling_selector" "universal_selector" "tag_name" "pseudo_element_selector"))) 
 ("string_value" (:*unnamed* nil)) 
 ("stylesheet" (:*unnamed* ("media_statement" "keyframes_statement" "supports_statement" "declaration" "import_statement" "namespace_statement" "rule_set" "charset_statement" "at_rule"))) 
 ("supports_statement" (:*unnamed* ("selector_query" "unary_query" "block" "keyword_query" "binary_query" "feature_query" "parenthesized_query"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("to" (:*unnamed* nil)) 
 ("unary_query" (:*unnamed* ("selector_query" "unary_query" "keyword_query" "binary_query" "feature_query" "parenthesized_query"))) 
 ("unit" (:*unnamed* nil)) 
 ("universal_selector" (:*unnamed* nil)) 
))
;; END Production rules for css
;; START Inverse production rules for css
(defconst combobulate-rules-css-inverse 
 '(("adjacent_sibling_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("arguments" ("pseudo_element_selector" "call_expression" "pseudo_class_selector"))
   ("at_keyword" ("keyframes_statement" "postcss_statement" "at_rule"))
   ("at_rule" ("stylesheet" "block"))
   ("attribute_name" ("attribute_selector"))
   ("attribute_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("binary_expression" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("binary_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("block" ("media_statement" "supports_statement" "keyframe_block" "rule_set" "at_rule"))
   ("call_expression" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "namespace_statement" "charset_statement"))
   ("charset_statement" ("stylesheet" "block"))
   ("child_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("class_name" ("class_selector" "pseudo_class_selector"))
   ("class_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("color_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("declaration" ("stylesheet" "block"))
   ("descendant_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("feature_name" ("feature_query"))
   ("feature_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("float_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("from" ("keyframe_block"))
   ("function_name" ("call_expression"))
   ("grid_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("id_name" ("id_selector"))
   ("id_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("import_statement" ("stylesheet" "block"))
   ("important" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("integer_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "keyframe_block" "charset_statement"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("keyword_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("media_statement" ("stylesheet" "block"))
   ("namespace_name" ("namespace_statement"))
   ("namespace_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("namespace_statement" ("stylesheet" "block"))
   ("nesting_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("parenthesized_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("parenthesized_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("plain_value" ("arguments" "postcss_statement" "binary_expression" "attribute_selector" "grid_value" "parenthesized_value" "feature_query" "declaration" "import_statement" "charset_statement"))
   ("postcss_statement" ("block"))
   ("property_name" ("declaration"))
   ("pseudo_class_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("pseudo_element_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("rule_set" ("stylesheet" "block"))
   ("selector_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("selectors" ("rule_set"))
   ("sibling_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("string_value" ("pseudo_class_selector" "postcss_statement" "binary_expression" "namespace_selector" "adjacent_sibling_selector" "selectors" "feature_query" "id_selector" "charset_statement" "sibling_selector" "attribute_name" "child_selector" "class_selector" "descendant_selector" "grid_value" "parenthesized_value" "import_statement" "pseudo_element_selector" "selector_query" "arguments" "attribute_selector" "declaration" "namespace_statement"))
   ("supports_statement" ("stylesheet" "block"))
   ("tag_name" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
   ("to" ("keyframe_block"))
   ("unary_query" ("media_statement" "supports_statement" "import_statement" "unary_query" "binary_query" "at_rule" "parenthesized_query"))
   ("unit" ("float_value" "integer_value"))
   ("universal_selector" ("attribute_name" "arguments" "child_selector" "class_selector" "pseudo_class_selector" "selector_query" "attribute_selector" "descendant_selector" "id_selector" "sibling_selector" "namespace_selector" "adjacent_sibling_selector" "selectors" "pseudo_element_selector"))
  ) 
)
;; END Inverse production rules for css
;; START All node types in css
(defconst combobulate-rules-css-types 
 '("adjacent_sibling_selector" "arguments" "at_keyword" "at_rule" "attribute_name" "attribute_selector" "binary_expression" "binary_query" "block" "call_expression" "charset_statement" "child_selector" "class_name" "class_selector" "color_value" "comment" "declaration" "descendant_selector" "feature_name" "feature_query" "float_value" "from" "function_name" "grid_value" "id_name" "id_selector" "import_statement" "important" "integer_value" "js_comment" "keyframe_block" "keyframe_block_list" "keyframes_name" "keyframes_statement" "keyword_query" "media_statement" "namespace_name" "namespace_selector" "namespace_statement" "nesting_selector" "parenthesized_query" "parenthesized_value" "plain_value" "postcss_statement" "property_name" "pseudo_class_selector" "pseudo_element_selector" "rule_set" "selector_query" "selectors" "sibling_selector" "string_value" "stylesheet" "supports_statement" "tag_name" "to" "unary_query" "unit" "universal_selector") 
)
;; END All node types in css
;; START All supertypes in css
(defconst combobulate-rules-css-supertypes 
 nil 
)
;; END All supertypes in css

;; START Production rules for typescript
(defconst combobulate-rules-typescript 
 '(("_primary_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "property_identifier" "statement_block" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "declaration" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("array_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "expression" "existential_type" "tuple_type"))) 
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("array_pattern" "subscript_expression" "member_expression" "parenthesized_expression" "non_null_expression" "undefined" "object_pattern" "identifier") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("non_null_expression" "subscript_expression" "identifier" "member_expression" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("arguments" "template_string") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "identifier" "array_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("method_definition" "decorator" "method_signature" "abstract_method_signature" "class_static_block" "index_signature" "public_field_definition"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("implements_clause" "extends_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :consequence ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :left ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :right ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("constraint" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("import_alias" "abstract_class_declaration" "variable_declaration" "class_declaration" "enum_declaration" "function_signature" "generator_function_declaration" "interface_declaration" "ambient_declaration" "internal_module" "lexical_declaration" "type_alias_declaration" "function_declaration" "module"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("expression" "identifier" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("as_expression" "binary_expression" "assignment_expression" "glimmer_template" "unary_expression" "yield_expression" "type_assertion" "new_expression" "satisfies_expression" "update_expression" "ternary_expression" "instantiation_expression" "primary_expression" "augmented_assignment_expression" "await_expression" "internal_module"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("generic_type" "type_identifier" "nested_type_identifier"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("array_pattern" "subscript_expression" "member_expression" "parenthesized_expression" "non_null_expression" "undefined" "object_pattern" "identifier") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "expression_statement" "variable_declaration" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("required_parameter" "optional_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("array_type" "asserts" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "type_predicate" "existential_type" "tuple_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("named_imports" "identifier" "namespace_import"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :name ("identifier") :sign nil :type ("opting_type_annotation" "type_annotation" "omitting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("infer_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("subscript_expression" "identifier" "member_expression" "import") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("intersection_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("jsx_attribute" (:*unnamed* ("property_identifier" "jsx_expression" "jsx_namespace_name" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_text" "jsx_self_closing_element" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "sequence_expression" "spread_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("true" "number" "false" "unary_expression" "string" "null" "undefined"))) 
 ("lookup_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type") :name ("type_identifier") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("member_expression" (:*unnamed* ("property_identifier" "identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_predicate_annotation" "type_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("string" "identifier" "nested_identifier"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("property_identifier" "identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "pair" "spread_element" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "rest_pattern"))) 
 ("object_type" (:*unnamed* ("method_signature" "property_signature" "export_statement" "call_signature" "construct_signature" "index_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("opting_type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("pattern" (:*unnamed* ("array_pattern" "subscript_expression" "member_expression" "non_null_expression" "undefined" "object_pattern" "rest_pattern" "identifier"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("array" "string" "super" "parenthesized_expression" "number" "non_null_expression" "generator_function" "template_string" "false" "null" "function" "regex" "true" "import" "subscript_expression" "this" "arrow_function" "call_expression" "class" "meta_property" "member_expression" "object" "identifier" "undefined"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier" "rest_pattern") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("non_null_expression" "array_pattern" "subscript_expression" "undefined" "object_pattern" "member_expression" "identifier"))) 
 ("rest_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "expression" "existential_type" "tuple_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("if_statement" "return_statement" "do_statement" "for_in_statement" "throw_statement" "empty_statement" "import_statement" "while_statement" "switch_statement" "debugger_statement" "labeled_statement" "statement_block" "declaration" "try_statement" "expression_statement" "with_statement" "export_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("number" "expression" "predefined_type" "sequence_expression" "string") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "existential_type" "tuple_type"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "rest_type" "optional_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "required_parameter" "optional_parameter" "existential_type" "tuple_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_annotation" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_arguments" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_assertion" (:*unnamed* ("expression" "type_arguments"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("identifier" "this") :type ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("instantiation_expression" "subscript_expression" "call_expression" "identifier" "member_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("array_type" "predefined_type" "type_identifier" "template_literal_type" "generic_type" "intersection_type" "this_type" "lookup_type" "object_type" "parenthesized_type" "type_query" "union_type" "flow_maybe_type" "literal_type" "conditional_type" "infer_type" "index_type_query" "nested_type_identifier" "readonly_type" "constructor_type" "function_type" "existential_type" "tuple_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "identifier" "array_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for typescript
;; START Inverse production rules for typescript
(defconst combobulate-rules-typescript-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("method_signature" "abstract_method_signature" "method_definition" "property_signature" "required_parameter" "public_field_definition" "optional_parameter"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("array_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "type_query" "primary_expression"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "abstract_class_declaration" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "abstract_class_declaration" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_signature" "abstract_method_signature" "pair" "public_field_definition" "method_definition" "enum_body" "property_signature" "enum_assignment" "pair_pattern"))
   ("conditional_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement" "ambient_declaration"))
   ("decorator" ("abstract_class_declaration" "class_body" "class_declaration" "class" "export_statement" "required_parameter" "optional_parameter"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("string" "template_string"))
   ("existential_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("array" "binary_expression" "assignment_expression" "return_statement" "unary_expression" "assignment_pattern" "parenthesized_expression" "throw_statement" "yield_expression" "sequence_expression" "switch_case" "subscript_expression" "call_expression" "satisfies_expression" "template_substitution" "ternary_expression" "extends_clause" "instantiation_expression" "member_expression" "jsx_expression" "expression_statement" "export_statement" "required_parameter" "optional_parameter" "for_statement" "as_expression" "variable_declarator" "pair" "for_in_statement" "non_null_expression" "type_assertion" "enum_assignment" "computed_property_name" "arguments" "arrow_function" "update_expression" "spread_element" "augmented_assignment_expression" "await_expression" "object_assignment_pattern" "public_field_definition"))
   ("expression_statement" ("statement" "for_statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "constructor_type" "generator_function" "generator_function_declaration" "function_type" "construct_signature" "function" "function_declaration"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("import_require_clause" "import_specifier" "export_specifier" "assignment_expression" "pattern" "function_signature" "generator_function" "type_query" "jsx_closing_element" "import_clause" "enum_declaration" "namespace_import" "nested_identifier" "instantiation_expression" "member_expression" "primary_expression" "export_statement" "required_parameter" "optional_parameter" "import_alias" "module" "jsx_opening_element" "decorator" "asserts" "catch_clause" "variable_declarator" "jsx_self_closing_element" "for_in_statement" "index_signature" "function" "function_declaration" "namespace_export" "rest_pattern" "arrow_function" "nested_type_identifier" "jsx_namespace_name" "generator_function_declaration" "augmented_assignment_expression" "internal_module" "type_predicate"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("primary_expression" "instantiation_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("infer_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("expression" "declaration"))
   ("intersection_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("literal_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("lookup_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("jsx_opening_element" "decorator" "assignment_expression" "jsx_self_closing_element" "pattern" "for_in_statement" "instantiation_expression" "member_expression" "nested_identifier" "primary_expression" "augmented_assignment_expression" "type_query" "rest_pattern" "jsx_closing_element"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("internal_module" "nested_type_identifier" "import_alias" "module"))
   ("nested_type_identifier" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "generic_type" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "augmented_assignment_expression" "rest_pattern"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("method_signature" "abstract_method_signature" "subscript_expression" "unary_expression" "pair" "public_field_definition" "method_definition" "primary_expression" "enum_body" "property_signature" "enum_assignment" "pair_pattern" "literal_type"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("object_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "interface_declaration" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("method_signature" "method_definition" "property_signature" "required_parameter" "public_field_definition" "optional_parameter"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("if_statement" "assignment_expression" "for_in_statement" "do_statement" "primary_expression" "while_statement" "with_statement" "augmented_assignment_expression" "switch_statement"))
   ("parenthesized_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("pattern" ("array_pattern" "assignment_pattern" "required_parameter" "pair_pattern" "optional_parameter"))
   ("predefined_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "subscript_expression" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("method_signature" "abstract_method_signature" "pair" "public_field_definition" "member_expression" "method_definition" "enum_body" "property_signature" "enum_assignment" "pair_pattern"))
   ("property_identifier" ("method_signature" "abstract_method_signature" "pair" "nested_identifier" "public_field_definition" "member_expression" "method_definition" "enum_body" "jsx_attribute" "property_signature" "ambient_declaration" "enum_assignment" "pair_pattern"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("rest_pattern" ("required_parameter" "object_pattern" "pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("subscript_expression" "return_statement" "template_substitution" "for_in_statement" "parenthesized_expression" "throw_statement" "jsx_expression" "expression_statement" "sequence_expression" "switch_case" "for_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("arguments" "object" "array" "jsx_expression"))
   ("statement" ("if_statement" "labeled_statement" "statement_block" "for_in_statement" "do_statement" "switch_default" "program" "while_statement" "with_statement" "else_clause" "switch_case" "for_statement"))
   ("statement_block" ("finally_clause" "catch_clause" "statement" "arrow_function" "try_statement" "method_definition" "class_static_block" "generator_function" "generator_function_declaration" "ambient_declaration" "internal_module" "function" "function_declaration" "module"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("import_require_clause" "import_specifier" "abstract_method_signature" "export_specifier" "public_field_definition" "enum_body" "literal_type" "subscript_expression" "method_definition" "primary_expression" "export_statement" "module" "method_signature" "pair" "import_statement" "jsx_attribute" "enum_assignment" "namespace_export" "property_signature" "internal_module" "pair_pattern"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("assignment_expression" "pattern" "for_in_statement" "instantiation_expression" "primary_expression" "augmented_assignment_expression" "type_query" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("asserts" "type_predicate" "primary_expression" "required_parameter" "optional_parameter"))
   ("this_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("abstract_method_signature" "function_signature" "parenthesized_expression" "generator_function" "construct_signature" "call_signature" "method_definition" "required_parameter" "optional_parameter" "method_signature" "catch_clause" "variable_declarator" "index_signature" "function" "function_declaration" "arrow_function" "generator_function_declaration" "property_signature" "public_field_definition"))
   ("type_arguments" ("jsx_opening_element" "call_expression" "jsx_self_closing_element" "instantiation_expression" "extends_clause" "generic_type" "type_assertion" "new_expression"))
   ("type_assertion" ("expression"))
   ("type_identifier" ("array_type" "class_declaration" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "generic_type" "intersection_type" "extends_type_clause" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "type_parameter" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "abstract_class_declaration" "template_type" "rest_type" "conditional_type" "class" "nested_type_identifier" "readonly_type" "interface_declaration" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("abstract_class_declaration" "method_signature" "abstract_method_signature" "class_declaration" "call_signature" "arrow_function" "class" "function_signature" "method_definition" "type_alias_declaration" "constructor_type" "generator_function" "generator_function_declaration" "interface_declaration" "function_type" "construct_signature" "function" "function_declaration"))
   ("type_predicate" ("asserts" "type_predicate_annotation" "function_type"))
   ("type_predicate_annotation" ("method_signature" "abstract_method_signature" "call_signature" "arrow_function" "function_signature" "method_definition" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("type_query" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "rest_pattern" "literal_type"))
   ("union_type" ("array_type" "default_type" "mapped_type_clause" "type_annotation" "omitting_type_annotation" "intersection_type" "parenthesized_type" "constraint" "optional_type" "satisfies_expression" "index_type_query" "constructor_type" "ambient_declaration" "function_type" "type_alias_declaration" "as_expression" "_primary_type" "type_predicate" "implements_clause" "lookup_type" "index_signature" "union_type" "flow_maybe_type" "template_type" "rest_type" "conditional_type" "readonly_type" "type_arguments" "opting_type_annotation" "infer_type" "tuple_type"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for typescript
;; START All node types in typescript
(defconst combobulate-rules-typescript-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_assertion" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in typescript
;; START All supertypes in typescript
(defconst combobulate-rules-typescript-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in typescript

;; START Production rules for javascript
(defconst combobulate-rules-javascript 
 '(("arguments" (:*unnamed* ("expression" "spread_element"))) 
 ("array" (:*unnamed* ("expression" "spread_element"))) 
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("arrow_function" (:*unnamed* nil :body ("expression" "statement_block") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:*unnamed* nil :left ("array_pattern" "subscript_expression" "identifier" "undefined" "object_pattern" "member_expression" "parenthesized_expression") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("subscript_expression" "identifier" "member_expression" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression" "private_property_identifier") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("arguments" "template_string") :function ("expression") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "identifier" "array_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:*unnamed* nil :member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("variable_declaration" "generator_function_declaration" "class_declaration" "lexical_declaration" "function_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("string" "identifier") :name ("string" "identifier"))) 
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("new_expression" "binary_expression" "assignment_expression" "glimmer_template" "jsx_self_closing_element" "unary_expression" "ternary_expression" "update_expression" "yield_expression" "primary_expression" "augmented_assignment_expression" "await_expression" "jsx_element"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_definition" (:*unnamed* nil :decorator ("decorator") :property ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("array_pattern" "subscript_expression" "identifier" "undefined" "object_pattern" "member_expression" "parenthesized_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "expression_statement" "variable_declaration" "lexical_declaration"))) 
 ("formal_parameters" (:*unnamed* ("pattern" "assignment_pattern"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import" (:*unnamed* nil)) 
 ("import_clause" (:*unnamed* ("named_imports" "identifier" "namespace_import"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("string" "identifier"))) 
 ("import_statement" (:*unnamed* ("import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("property_identifier" "jsx_expression" "jsx_namespace_name" "jsx_self_closing_element" "string" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_text" "jsx_self_closing_element" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("expression" "sequence_expression" "spread_element"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:*unnamed* ("property_identifier" "identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* nil :body ("statement_block") :decorator ("decorator") :name ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("string" "identifier"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression" "new_expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "pair" "spread_element" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("shorthand_property_identifier_pattern" "object_pattern" "array_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "shorthand_property_identifier_pattern" "pair_pattern" "rest_pattern"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "number" "private_property_identifier" "string" "computed_property_name") :value ("pattern" "assignment_pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression"))) 
 ("pattern" (:*unnamed* ("array_pattern" "subscript_expression" "undefined" "rest_pattern" "object_pattern" "member_expression" "identifier"))) 
 ("primary_expression" (:*unnamed* ("array" "string" "super" "parenthesized_expression" "number" "generator_function" "template_string" "false" "null" "function" "regex" "true" "import" "subscript_expression" "this" "arrow_function" "call_expression" "class" "meta_property" "member_expression" "object" "identifier" "undefined"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("statement" "hash_bang_line"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("rest_pattern" (:*unnamed* ("array_pattern" "subscript_expression" "undefined" "object_pattern" "member_expression" "identifier"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("if_statement" "return_statement" "do_statement" "for_in_statement" "throw_statement" "empty_statement" "import_statement" "while_statement" "switch_statement" "debugger_statement" "labeled_statement" "statement_block" "declaration" "try_statement" "expression_statement" "with_statement" "export_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("escape_sequence" "string_fragment"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("escape_sequence" "template_substitution"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "identifier" "array_pattern") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for javascript
;; START Inverse production rules for javascript
(defconst combobulate-rules-javascript-inverse 
 '(("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("arrow_function" ("primary_expression"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("formal_parameters" "pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("decorator" "primary_expression"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("method_definition" "field_definition" "pair" "pair_pattern"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("decorator" ("class_declaration" "class" "field_definition" "method_definition" "export_statement"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("statement" "for_statement"))
   ("escape_sequence" ("string" "template_string"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement"))
   ("expression" ("array" "binary_expression" "assignment_expression" "return_statement" "unary_expression" "assignment_pattern" "parenthesized_expression" "throw_statement" "yield_expression" "sequence_expression" "switch_case" "subscript_expression" "call_expression" "template_substitution" "ternary_expression" "member_expression" "class_heritage" "jsx_expression" "expression_statement" "export_statement" "for_statement" "variable_declarator" "field_definition" "pair" "for_in_statement" "computed_property_name" "arguments" "arrow_function" "update_expression" "spread_element" "augmented_assignment_expression" "await_expression" "object_assignment_pattern"))
   ("expression_statement" ("statement" "for_statement"))
   ("false" ("primary_expression"))
   ("field_definition" ("class_body"))
   ("finally_clause" ("try_statement"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("arrow_function" "method_definition" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression" "class_body"))
   ("hash_bang_line" ("program"))
   ("identifier" ("import_specifier" "class_declaration" "export_specifier" "assignment_expression" "pattern" "generator_function" "jsx_closing_element" "import_clause" "namespace_import" "member_expression" "primary_expression" "jsx_opening_element" "decorator" "catch_clause" "variable_declarator" "jsx_self_closing_element" "for_in_statement" "function" "function_declaration" "namespace_export" "rest_pattern" "arrow_function" "class" "jsx_namespace_name" "generator_function_declaration" "augmented_assignment_expression"))
   ("if_statement" ("statement"))
   ("import" ("primary_expression"))
   ("import_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_self_closing_element" "jsx_attribute" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("member_expression" ("jsx_opening_element" "decorator" "assignment_expression" "jsx_self_closing_element" "pattern" "for_in_statement" "member_expression" "primary_expression" "augmented_assignment_expression" "rest_pattern" "jsx_closing_element"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("new_expression" ("expression" "new_expression"))
   ("null" ("primary_expression"))
   ("number" ("field_definition" "pair" "method_definition" "primary_expression" "pair_pattern"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("catch_clause" "assignment_expression" "variable_declarator" "pattern" "for_in_statement" "object_assignment_pattern" "rest_pattern"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("if_statement" "assignment_expression" "for_in_statement" "do_statement" "primary_expression" "while_statement" "with_statement" "augmented_assignment_expression" "switch_statement"))
   ("pattern" ("formal_parameters" "pair_pattern" "array_pattern" "assignment_pattern"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("binary_expression" "field_definition" "pair" "member_expression" "method_definition" "pair_pattern"))
   ("property_identifier" ("field_definition" "pair" "member_expression" "method_definition" "jsx_attribute" "pair_pattern"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("rest_pattern" ("object_pattern" "pattern"))
   ("return_statement" ("statement"))
   ("sequence_expression" ("subscript_expression" "return_statement" "template_substitution" "for_in_statement" "parenthesized_expression" "throw_statement" "jsx_expression" "expression_statement" "sequence_expression" "switch_case" "for_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("arguments" "object" "array" "jsx_expression"))
   ("statement" ("if_statement" "labeled_statement" "statement_block" "for_in_statement" "do_statement" "switch_default" "program" "while_statement" "with_statement" "else_clause" "switch_case" "for_statement"))
   ("statement_block" ("finally_clause" "catch_clause" "statement" "arrow_function" "try_statement" "method_definition" "class_static_block" "generator_function" "generator_function_declaration" "function" "function_declaration"))
   ("statement_identifier" ("labeled_statement" "continue_statement" "break_statement"))
   ("string" ("import_specifier" "export_specifier" "field_definition" "pair" "method_definition" "import_statement" "primary_expression" "jsx_attribute" "export_statement" "pair_pattern" "namespace_export"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "augmented_assignment_expression" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression"))
   ("try_statement" ("statement"))
   ("unary_expression" ("expression"))
   ("undefined" ("assignment_expression" "pattern" "for_in_statement" "primary_expression" "rest_pattern"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for javascript
;; START All node types in javascript
(defconst combobulate-rules-javascript-types 
 '("arguments" "array" "array_pattern" "arrow_function" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "continue_statement" "debugger_statement" "declaration" "decorator" "do_statement" "else_clause" "empty_statement" "escape_sequence" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "false" "field_definition" "finally_clause" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "generator_function" "generator_function_declaration" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "import" "import_clause" "import_specifier" "import_statement" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "member_expression" "meta_property" "method_definition" "named_imports" "namespace_export" "namespace_import" "new_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "optional_chain" "pair" "pair_pattern" "parenthesized_expression" "pattern" "primary_expression" "private_property_identifier" "program" "property_identifier" "regex" "regex_flags" "regex_pattern" "rest_pattern" "return_statement" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_string" "template_substitution" "ternary_expression" "this" "throw_statement" "true" "try_statement" "unary_expression" "undefined" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in javascript
;; START All supertypes in javascript
(defconst combobulate-rules-javascript-supertypes 
 '("declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in javascript

;; START Production rules for go
(defconst combobulate-rules-go 
 '(("_expression" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("_simple_statement" (:*unnamed* ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement"))) 
 ("_simple_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type"))) 
 ("_statement" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("argument_list" (:*unnamed* ("array_type" "binary_expression" "type_conversion_expression" "unary_expression" "type_identifier" "pointer_type" "parenthesized_expression" "channel_type" "float_literal" "generic_type" "parenthesized_type" "slice_expression" "true" "index_expression" "slice_type" "call_expression" "rune_literal" "function_type" "func_literal" "type_assertion_expression" "iota" "interface_type" "selector_expression" "interpreted_string_literal" "false" "union_type" "map_type" "int_literal" "struct_type" "negated_type" "nil" "imaginary_literal" "raw_string_literal" "qualified_type" "variadic_argument" "composite_literal" "identifier"))) 
 ("array_type" (:*unnamed* nil :element ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type") :length ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("assignment_statement" (:*unnamed* nil :left ("expression_list") :operator nil :right ("expression_list"))) 
 ("binary_expression" (:*unnamed* nil :left ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :operator nil :right ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("blank_identifier" (:*unnamed* nil)) 
 ("block" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("break_statement" (:*unnamed* ("label_name"))) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :type_arguments ("type_arguments"))) 
 ("channel_type" (:*unnamed* nil :value ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("comment" (:*unnamed* nil)) 
 ("communication_case" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement") :communication ("receive_statement" "send_statement"))) 
 ("composite_literal" (:*unnamed* nil :body ("literal_value") :type ("array_type" "map_type" "slice_type" "struct_type" "type_identifier" "generic_type" "qualified_type" "implicit_length_array_type"))) 
 ("const_declaration" (:*unnamed* ("const_spec"))) 
 ("const_spec" (:*unnamed* nil :name ("identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type") :value ("expression_list"))) 
 ("continue_statement" (:*unnamed* ("label_name"))) 
 ("dec_statement" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("default_case" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("defer_statement" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("dot" (:*unnamed* nil)) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression_case" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement") :value ("expression_list"))) 
 ("expression_list" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("expression_statement" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("expression_switch_statement" (:*unnamed* ("expression_case" "default_case") :initializer ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement") :value ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("fallthrough_statement" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* nil :name ("field_identifier") :tag ("interpreted_string_literal" "raw_string_literal") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration"))) 
 ("field_identifier" (:*unnamed* nil)) 
 ("float_literal" (:*unnamed* nil)) 
 ("for_clause" (:*unnamed* nil :condition ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :initializer ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement") :update ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement"))) 
 ("for_statement" (:*unnamed* ("for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "range_clause" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :body ("block"))) 
 ("func_literal" (:*unnamed* nil :body ("block") :parameters ("parameter_list") :result ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "parameter_list" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type"))) 
 ("function_declaration" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameter_list") :result ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "parameter_list" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type") :type_parameters ("type_parameter_list"))) 
 ("function_type" (:*unnamed* nil :parameters ("parameter_list") :result ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "parameter_list" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type"))) 
 ("generic_type" (:*unnamed* nil :type ("type_identifier" "qualified_type" "union_type" "negated_type") :type_arguments ("type_arguments"))) 
 ("go_statement" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("goto_statement" (:*unnamed* ("label_name"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("if_statement" "block") :condition ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :consequence ("block") :initializer ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement"))) 
 ("imaginary_literal" (:*unnamed* nil)) 
 ("implicit_length_array_type" (:*unnamed* nil :element ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("import_declaration" (:*unnamed* ("import_spec_list" "import_spec"))) 
 ("import_spec" (:*unnamed* nil :name ("blank_identifier" "package_identifier" "dot") :path ("interpreted_string_literal" "raw_string_literal"))) 
 ("import_spec_list" (:*unnamed* ("import_spec"))) 
 ("inc_statement" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("index_expression" (:*unnamed* nil :index ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("int_literal" (:*unnamed* nil)) 
 ("interface_type" (:*unnamed* ("struct_elem" "method_spec" "constraint_elem"))) 
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence"))) 
 ("iota" (:*unnamed* nil)) 
 ("keyed_element" (:*unnamed* ("literal_element"))) 
 ("label_name" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement") :label ("label_name"))) 
 ("literal_element" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "literal_value" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("literal_value" (:*unnamed* ("literal_element" "keyed_element"))) 
 ("map_type" (:*unnamed* nil :key ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type") :value ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("method_declaration" (:*unnamed* nil :body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "parameter_list" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type"))) 
 ("method_spec" (:*unnamed* nil :name ("field_identifier") :parameters ("parameter_list") :result ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "parameter_list" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "union_type"))) 
 ("negated_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("nil" (:*unnamed* nil)) 
 ("package_clause" (:*unnamed* ("package_identifier"))) 
 ("package_identifier" (:*unnamed* nil)) 
 ("parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("parameter_list" (:*unnamed* ("parameter_declaration" "variadic_parameter_declaration"))) 
 ("parenthesized_expression" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("parenthesized_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("pointer_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("qualified_type" (:*unnamed* nil :name ("type_identifier") :package ("package_identifier"))) 
 ("range_clause" (:*unnamed* nil :left ("expression_list") :right ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("raw_string_literal" (:*unnamed* nil)) 
 ("receive_statement" (:*unnamed* nil :left ("expression_list") :right ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("return_statement" (:*unnamed* ("expression_list"))) 
 ("rune_literal" (:*unnamed* nil)) 
 ("select_statement" (:*unnamed* ("communication_case" "default_case"))) 
 ("selector_expression" (:*unnamed* nil :field ("field_identifier") :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("send_statement" (:*unnamed* nil :channel ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :value ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("short_var_declaration" (:*unnamed* nil :left ("expression_list") :right ("expression_list"))) 
 ("slice_expression" (:*unnamed* nil :capacity ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :end ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :start ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("slice_type" (:*unnamed* nil :element ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("source_file" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "package_clause" "import_declaration" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "function_declaration" "labeled_statement" "goto_statement" "var_declaration" "method_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("struct_elem" (:*unnamed* ("struct_term"))) 
 ("struct_term" (:*unnamed* ("struct_type"))) 
 ("struct_type" (:*unnamed* ("field_declaration_list"))) 
 ("true" (:*unnamed* nil)) 
 ("type_alias" (:*unnamed* nil :name ("type_identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("type_arguments" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("type_assertion_expression" (:*unnamed* nil :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("type_case" (:*unnamed* ("send_statement" "const_declaration" "if_statement" "select_statement" "return_statement" "short_var_declaration" "fallthrough_statement" "defer_statement" "empty_statement" "dec_statement" "expression_switch_statement" "type_switch_statement" "go_statement" "type_declaration" "inc_statement" "labeled_statement" "goto_statement" "var_declaration" "expression_statement" "block" "assignment_statement" "continue_statement" "for_statement" "break_statement") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("type_conversion_expression" (:*unnamed* nil :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("type_declaration" (:*unnamed* ("type_alias" "type_spec"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter_list" (:*unnamed* ("parameter_declaration"))) 
 ("type_spec" (:*unnamed* nil :name ("type_identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type") :type_parameters ("type_parameter_list"))) 
 ("type_switch_statement" (:*unnamed* ("type_case" "default_case") :alias ("expression_list") :initializer ("send_statement" "expression_statement" "dec_statement" "assignment_statement" "short_var_declaration" "inc_statement") :value ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("unary_expression" (:*unnamed* nil :operand ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier") :operator nil)) 
 ("union_type" (:*unnamed* ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
 ("var_declaration" (:*unnamed* ("var_spec"))) 
 ("var_spec" (:*unnamed* nil :name ("identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type") :value ("expression_list"))) 
 ("variadic_argument" (:*unnamed* ("binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "float_literal" "selector_expression" "interpreted_string_literal" "false" "slice_expression" "true" "index_expression" "type_assertion_expression" "int_literal" "call_expression" "nil" "imaginary_literal" "rune_literal" "raw_string_literal" "composite_literal" "func_literal" "iota" "identifier"))) 
 ("variadic_parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("array_type" "map_type" "slice_type" "struct_type" "negated_type" "type_identifier" "pointer_type" "channel_type" "generic_type" "qualified_type" "interface_type" "function_type" "parenthesized_type" "union_type"))) 
))
;; END Production rules for go
;; START Inverse production rules for go
(defconst combobulate-rules-go-inverse 
 '(("argument_list" ("call_expression"))
   ("array_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("assignment_statement" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("binary_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("blank_identifier" ("import_spec"))
   ("block" ("communication_case" "if_statement" "labeled_statement" "function_declaration" "expression_case" "type_case" "method_declaration" "source_file" "block" "func_literal" "_statement" "for_statement" "default_case"))
   ("break_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("call_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("channel_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("communication_case" ("select_statement"))
   ("composite_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("const_declaration" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("const_spec" ("const_declaration"))
   ("constraint_elem" ("interface_type"))
   ("continue_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("dec_statement" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("default_case" ("expression_switch_statement" "type_switch_statement" "select_statement"))
   ("defer_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("dot" ("import_spec"))
   ("empty_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("expression_case" ("expression_switch_statement"))
   ("expression_list" ("receive_statement" "return_statement" "expression_case" "short_var_declaration" "var_spec" "assignment_statement" "range_clause" "type_switch_statement" "const_spec"))
   ("expression_statement" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("expression_switch_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("fallthrough_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("false" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("field_declaration" ("field_declaration_list"))
   ("field_declaration_list" ("struct_type"))
   ("field_identifier" ("field_declaration" "method_declaration" "selector_expression" "method_spec"))
   ("float_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("for_clause" ("for_statement"))
   ("for_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("func_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("function_declaration" ("source_file"))
   ("function_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("generic_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("go_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("goto_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("identifier" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "variadic_parameter_declaration" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "const_spec" "literal_element" "send_statement" "type_assertion_expression" "if_statement" "type_switch_statement" "receive_statement" "argument_list" "defer_statement" "var_spec" "parameter_declaration" "selector_expression" "go_statement" "function_declaration" "variadic_argument"))
   ("if_statement" ("communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("imaginary_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("implicit_length_array_type" ("composite_literal"))
   ("import_declaration" ("source_file"))
   ("import_spec" ("import_declaration" "import_spec_list"))
   ("import_spec_list" ("import_declaration"))
   ("inc_statement" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("index_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("int_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("interface_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("interpreted_string_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "field_declaration" "selector_expression" "go_statement" "variadic_argument" "import_spec"))
   ("iota" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("keyed_element" ("literal_value"))
   ("label_name" ("goto_statement" "labeled_statement" "continue_statement" "break_statement"))
   ("labeled_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("literal_element" ("literal_value" "keyed_element"))
   ("literal_value" ("literal_element" "composite_literal"))
   ("map_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("method_declaration" ("source_file"))
   ("method_spec" ("interface_type"))
   ("negated_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "generic_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("nil" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("package_clause" ("source_file"))
   ("package_identifier" ("package_clause" "qualified_type" "import_spec"))
   ("parameter_declaration" ("type_parameter_list" "parameter_list"))
   ("parameter_list" ("method_spec" "method_declaration" "function_type" "func_literal" "function_declaration"))
   ("parenthesized_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("parenthesized_type" ("array_type" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "type_case" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "map_type" "type_spec" "negated_type" "type_arguments" "implicit_length_array_type"))
   ("pointer_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("qualified_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "generic_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("range_clause" ("for_statement"))
   ("raw_string_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "field_declaration" "selector_expression" "go_statement" "variadic_argument" "import_spec"))
   ("receive_statement" ("communication_case"))
   ("return_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("rune_literal" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("select_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("selector_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("send_statement" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("short_var_declaration" ("for_clause" "communication_case" "if_statement" "labeled_statement" "expression_case" "type_case" "source_file" "_simple_statement" "block" "expression_switch_statement" "_statement" "type_switch_statement" "default_case"))
   ("slice_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("slice_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("struct_elem" ("interface_type"))
   ("struct_term" ("struct_elem"))
   ("struct_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "struct_term" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("true" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("type_alias" ("type_declaration"))
   ("type_arguments" ("generic_type" "call_expression"))
   ("type_assertion_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("type_case" ("type_switch_statement"))
   ("type_conversion_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("type_declaration" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("type_identifier" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "generic_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "qualified_type" "_simple_type" "composite_literal" "implicit_length_array_type"))
   ("type_parameter_list" ("type_spec" "function_declaration"))
   ("type_spec" ("type_declaration"))
   ("type_switch_statement" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("unary_expression" ("array_type" "for_clause" "binary_expression" "type_conversion_expression" "unary_expression" "parenthesized_expression" "expression_list" "dec_statement" "range_clause" "inc_statement" "slice_expression" "index_expression" "call_expression" "expression_statement" "expression_switch_statement" "_expression" "for_statement" "type_assertion_expression" "literal_element" "send_statement" "type_switch_statement" "if_statement" "receive_statement" "argument_list" "defer_statement" "selector_expression" "go_statement" "variadic_argument"))
   ("union_type" ("array_type" "type_arguments" "type_conversion_expression" "pointer_type" "channel_type" "generic_type" "type_alias" "parenthesized_type" "variadic_parameter_declaration" "slice_type" "method_spec" "type_case" "method_declaration" "function_type" "func_literal" "type_assertion_expression" "const_spec" "_type" "argument_list" "var_spec" "parameter_declaration" "field_declaration" "union_type" "function_declaration" "map_type" "type_spec" "negated_type" "_simple_type" "implicit_length_array_type"))
   ("var_declaration" ("communication_case" "labeled_statement" "expression_case" "type_case" "source_file" "block" "_statement" "default_case"))
   ("var_spec" ("var_declaration"))
   ("variadic_argument" ("argument_list"))
   ("variadic_parameter_declaration" ("parameter_list"))
  ) 
)
;; END Inverse production rules for go
;; START All node types in go
(defconst combobulate-rules-go-types 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type" "argument_list" "array_type" "assignment_statement" "binary_expression" "blank_identifier" "block" "break_statement" "call_expression" "channel_type" "comment" "communication_case" "composite_literal" "const_declaration" "const_spec" "constraint_elem" "continue_statement" "dec_statement" "default_case" "defer_statement" "dot" "empty_statement" "escape_sequence" "expression_case" "expression_list" "expression_statement" "expression_switch_statement" "fallthrough_statement" "false" "field_declaration" "field_declaration_list" "field_identifier" "float_literal" "for_clause" "for_statement" "func_literal" "function_declaration" "function_type" "generic_type" "go_statement" "goto_statement" "identifier" "if_statement" "imaginary_literal" "implicit_length_array_type" "import_declaration" "import_spec" "import_spec_list" "inc_statement" "index_expression" "int_literal" "interface_type" "interpreted_string_literal" "iota" "keyed_element" "label_name" "labeled_statement" "literal_element" "literal_value" "map_type" "method_declaration" "method_spec" "negated_type" "nil" "package_clause" "package_identifier" "parameter_declaration" "parameter_list" "parenthesized_expression" "parenthesized_type" "pointer_type" "qualified_type" "range_clause" "raw_string_literal" "receive_statement" "return_statement" "rune_literal" "select_statement" "selector_expression" "send_statement" "short_var_declaration" "slice_expression" "slice_type" "source_file" "struct_elem" "struct_term" "struct_type" "true" "type_alias" "type_arguments" "type_assertion_expression" "type_case" "type_conversion_expression" "type_declaration" "type_identifier" "type_parameter_list" "type_spec" "type_switch_statement" "unary_expression" "union_type" "var_declaration" "var_spec" "variadic_argument" "variadic_parameter_declaration") 
)
;; END All node types in go
;; START All supertypes in go
(defconst combobulate-rules-go-supertypes 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type") 
)
;; END All supertypes in go

;; START Production rules for python
(defconst combobulate-rules-python 
 '(("_compound_statement" (:*unnamed* ("if_statement" "match_statement" "decorated_definition" "try_statement" "while_statement" "with_statement" "class_definition" "function_definition" "for_statement"))) 
 ("_simple_statement" (:*unnamed* ("print_statement" "raise_statement" "return_statement" "exec_statement" "nonlocal_statement" "import_statement" "import_from_statement" "type_alias_statement" "assert_statement" "delete_statement" "future_import_statement" "pass_statement" "global_statement" "expression_statement" "continue_statement" "break_statement"))) 
 ("aliased_import" (:*unnamed* nil :alias ("identifier") :name ("dotted_name"))) 
 ("argument_list" (:*unnamed* ("dictionary_splat" "expression" "keyword_argument" "list_splat" "parenthesized_expression"))) 
 ("as_pattern" (:*unnamed* ("expression" "case_pattern" "identifier") :alias ("as_pattern_target"))) 
 ("assert_statement" (:*unnamed* ("expression"))) 
 ("assignment" (:*unnamed* nil :left ("pattern_list" "pattern") :right ("yield" "augmented_assignment" "expression_list" "assignment" "expression" "pattern_list") :type ("type"))) 
 ("attribute" (:*unnamed* nil :attribute ("identifier") :object ("primary_expression"))) 
 ("augmented_assignment" (:*unnamed* nil :left ("pattern_list" "pattern") :operator nil :right ("yield" "augmented_assignment" "expression_list" "assignment" "expression" "pattern_list"))) 
 ("await" (:*unnamed* ("primary_expression"))) 
 ("binary_operator" (:*unnamed* nil :left ("primary_expression") :operator nil :right ("primary_expression"))) 
 ("block" (:*unnamed* ("print_statement" "if_statement" "match_statement" "raise_statement" "decorated_definition" "return_statement" "exec_statement" "nonlocal_statement" "import_statement" "import_from_statement" "while_statement" "class_definition" "type_alias_statement" "function_definition" "assert_statement" "delete_statement" "future_import_statement" "try_statement" "pass_statement" "global_statement" "expression_statement" "with_statement" "continue_statement" "for_statement" "break_statement") :alternative ("case_clause"))) 
 ("boolean_operator" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call" (:*unnamed* nil :arguments ("argument_list" "generator_expression") :function ("primary_expression"))) 
 ("case_clause" (:*unnamed* ("case_pattern") :consequence ("block") :guard ("if_clause"))) 
 ("case_pattern" (:*unnamed* ("integer" "float" "none" "string" "class_pattern" "tuple_pattern" "as_pattern" "false" "complex_pattern" "true" "concatenated_string" "list_pattern" "dotted_name" "splat_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))) 
 ("chevron" (:*unnamed* ("expression"))) 
 ("class_definition" (:*unnamed* nil :body ("block") :name ("identifier") :superclasses ("argument_list") :type_parameters ("type_parameter"))) 
 ("class_pattern" (:*unnamed* ("case_pattern" "dotted_name"))) 
 ("comment" (:*unnamed* nil)) 
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil)) 
 ("complex_pattern" (:*unnamed* ("float" "integer"))) 
 ("concatenated_string" (:*unnamed* ("string"))) 
 ("conditional_expression" (:*unnamed* ("expression"))) 
 ("constrained_type" (:*unnamed* ("type"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("function_definition" "class_definition"))) 
 ("decorator" (:*unnamed* ("expression"))) 
 ("default_parameter" (:*unnamed* nil :name ("identifier" "tuple_pattern") :value ("expression"))) 
 ("delete_statement" (:*unnamed* ("expression" "expression_list"))) 
 ("dict_pattern" (:*unnamed* ("splat_pattern") :key ("true" "concatenated_string" "integer" "list_pattern" "float" "none" "string" "class_pattern" "dotted_name" "tuple_pattern" "splat_pattern" "union_pattern" "dict_pattern" "false" "complex_pattern") :value ("case_pattern"))) 
 ("dictionary" (:*unnamed* ("dictionary_splat" "pair"))) 
 ("dictionary_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("pair"))) 
 ("dictionary_splat" (:*unnamed* ("expression"))) 
 ("dictionary_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("dotted_name" (:*unnamed* ("identifier"))) 
 ("elif_clause" (:*unnamed* nil :condition ("expression") :consequence ("block"))) 
 ("ellipsis" (:*unnamed* nil)) 
 ("else_clause" (:*unnamed* nil :body ("block"))) 
 ("escape_interpolation" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("except_clause" (:*unnamed* ("expression" "block"))) 
 ("except_group_clause" (:*unnamed* ("expression" "block"))) 
 ("exec_statement" (:*unnamed* ("expression") :code ("string" "identifier"))) 
 ("expression" (:*unnamed* ("comparison_operator" "not_operator" "conditional_expression" "as_pattern" "primary_expression" "lambda" "boolean_operator" "named_expression"))) 
 ("expression_list" (:*unnamed* ("expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "augmented_assignment" "yield" "assignment"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* ("block"))) 
 ("float" (:*unnamed* nil)) 
 ("for_in_clause" (:*unnamed* nil :left ("pattern_list" "pattern") :right ("expression"))) 
 ("for_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :left ("pattern_list" "pattern") :right ("expression" "expression_list"))) 
 ("format_expression" (:*unnamed* nil :expression ("expression" "expression_list" "pattern_list" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("format_specifier" (:*unnamed* ("format_expression"))) 
 ("function_definition" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type") :type_parameters ("type_parameter"))) 
 ("future_import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("generator_expression" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("generic_type" (:*unnamed* ("type_parameter" "identifier"))) 
 ("global_statement" (:*unnamed* ("identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_clause" (:*unnamed* ("expression"))) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause" "elif_clause") :condition ("expression") :consequence ("block"))) 
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("relative_import" "dotted_name") :name ("aliased_import" "dotted_name"))) 
 ("import_prefix" (:*unnamed* nil)) 
 ("import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("integer" (:*unnamed* nil)) 
 ("interpolation" (:*unnamed* nil :expression ("expression" "expression_list" "pattern_list" "yield") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("keyword_argument" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("keyword_pattern" (:*unnamed* ("integer" "float" "none" "string" "class_pattern" "tuple_pattern" "false" "complex_pattern" "true" "concatenated_string" "list_pattern" "dotted_name" "splat_pattern" "union_pattern" "dict_pattern" "identifier"))) 
 ("keyword_separator" (:*unnamed* nil)) 
 ("lambda" (:*unnamed* nil :body ("expression") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("parameter"))) 
 ("line_continuation" (:*unnamed* nil)) 
 ("list" (:*unnamed* ("expression" "parenthesized_list_splat" "list_splat" "yield"))) 
 ("list_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("list_pattern" (:*unnamed* ("case_pattern" "pattern"))) 
 ("list_splat" (:*unnamed* ("expression" "identifier" "subscript" "attribute"))) 
 ("list_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("match_statement" (:*unnamed* nil :body ("block") :subject ("expression"))) 
 ("member_type" (:*unnamed* ("type" "identifier"))) 
 ("module" (:*unnamed* ("print_statement" "if_statement" "match_statement" "raise_statement" "decorated_definition" "return_statement" "exec_statement" "nonlocal_statement" "import_statement" "import_from_statement" "while_statement" "class_definition" "type_alias_statement" "function_definition" "assert_statement" "delete_statement" "future_import_statement" "try_statement" "pass_statement" "global_statement" "expression_statement" "with_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("named_expression" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("none" (:*unnamed* nil)) 
 ("nonlocal_statement" (:*unnamed* ("identifier"))) 
 ("not_operator" (:*unnamed* nil :argument ("expression"))) 
 ("pair" (:*unnamed* nil :key ("expression") :value ("expression"))) 
 ("parameter" (:*unnamed* ("dictionary_splat_pattern" "list_splat_pattern" "keyword_separator" "tuple_pattern" "positional_separator" "typed_default_parameter" "identifier" "typed_parameter" "default_parameter"))) 
 ("parameters" (:*unnamed* ("parameter"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "list_splat" "yield" "parenthesized_expression"))) 
 ("parenthesized_list_splat" (:*unnamed* ("list_splat" "parenthesized_expression"))) 
 ("pass_statement" (:*unnamed* nil)) 
 ("pattern" (:*unnamed* ("list_splat_pattern" "list_pattern" "attribute" "identifier" "subscript" "tuple_pattern"))) 
 ("pattern_list" (:*unnamed* ("pattern"))) 
 ("positional_separator" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("integer" "unary_operator" "dictionary_comprehension" "float" "none" "string" "list_splat" "parenthesized_expression" "ellipsis" "binary_operator" "await" "false" "set_comprehension" "list_comprehension" "set" "true" "concatenated_string" "call" "dictionary" "attribute" "subscript" "generator_expression" "tuple" "identifier" "list"))) 
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression"))) 
 ("raise_statement" (:*unnamed* ("expression" "expression_list") :cause ("expression"))) 
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name"))) 
 ("return_statement" (:*unnamed* ("expression" "expression_list"))) 
 ("set" (:*unnamed* ("expression" "parenthesized_list_splat" "list_splat" "yield"))) 
 ("set_comprehension" (:*unnamed* ("for_in_clause" "if_clause") :body ("expression"))) 
 ("slice" (:*unnamed* ("expression"))) 
 ("splat_pattern" (:*unnamed* ("identifier"))) 
 ("splat_type" (:*unnamed* ("identifier"))) 
 ("string" (:*unnamed* ("interpolation" "string_end" "string_start" "string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence" "escape_interpolation"))) 
 ("string_end" (:*unnamed* nil)) 
 ("string_start" (:*unnamed* nil)) 
 ("subscript" (:*unnamed* nil :subscript ("expression" "slice") :value ("primary_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* ("else_clause" "except_clause" "except_group_clause" "finally_clause") :body ("block"))) 
 ("tuple" (:*unnamed* ("expression" "parenthesized_list_splat" "list_splat" "yield"))) 
 ("tuple_pattern" (:*unnamed* ("case_pattern" "pattern"))) 
 ("type" (:*unnamed* ("generic_type" "splat_type" "constrained_type" "expression" "member_type" "union_type"))) 
 ("type_alias_statement" (:*unnamed* ("type"))) 
 ("type_conversion" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* ("type"))) 
 ("typed_default_parameter" (:*unnamed* nil :name ("identifier") :type ("type") :value ("expression"))) 
 ("typed_parameter" (:*unnamed* ("identifier" "dictionary_splat_pattern" "list_splat_pattern") :type ("type"))) 
 ("unary_operator" (:*unnamed* nil :argument ("primary_expression") :operator nil)) 
 ("union_pattern" (:*unnamed* ("true" "concatenated_string" "integer" "list_pattern" "float" "none" "string" "class_pattern" "dotted_name" "tuple_pattern" "splat_pattern" "union_pattern" "dict_pattern" "false" "complex_pattern"))) 
 ("union_type" (:*unnamed* ("type"))) 
 ("while_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :condition ("expression"))) 
 ("wildcard_import" (:*unnamed* nil)) 
 ("with_clause" (:*unnamed* ("with_item"))) 
 ("with_item" (:*unnamed* nil :value ("expression"))) 
 ("with_statement" (:*unnamed* ("with_clause") :body ("block"))) 
 ("yield" (:*unnamed* ("expression" "expression_list"))) 
))
;; END Production rules for python
;; START Inverse production rules for python
(defconst combobulate-rules-python-inverse 
 '(("aliased_import" ("import_statement" "import_from_statement" "future_import_statement"))
   ("argument_list" ("call" "class_definition"))
   ("as_pattern" ("expression" "case_pattern"))
   ("as_pattern_target" ("as_pattern"))
   ("assert_statement" ("module" "_simple_statement" "block"))
   ("assignment" ("augmented_assignment" "expression_statement" "assignment"))
   ("attribute" ("dictionary_splat_pattern" "list_splat_pattern" "pattern" "primary_expression" "list_splat"))
   ("augmented_assignment" ("augmented_assignment" "expression_statement" "assignment"))
   ("await" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("block" ("finally_clause" "if_statement" "match_statement" "except_group_clause" "function_definition" "try_statement" "while_statement" "with_statement" "else_clause" "class_definition" "case_clause" "elif_clause" "except_clause" "for_statement"))
   ("boolean_operator" ("expression"))
   ("break_statement" ("module" "_simple_statement" "block"))
   ("call" ("primary_expression"))
   ("case_clause" ("block"))
   ("case_pattern" ("list_pattern" "class_pattern" "tuple_pattern" "as_pattern" "dict_pattern" "case_clause"))
   ("chevron" ("print_statement"))
   ("class_definition" ("module" "decorated_definition" "_compound_statement" "block"))
   ("class_pattern" ("keyword_pattern" "union_pattern" "case_pattern" "dict_pattern"))
   ("comparison_operator" ("expression"))
   ("complex_pattern" ("keyword_pattern" "union_pattern" "case_pattern" "dict_pattern"))
   ("concatenated_string" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("conditional_expression" ("expression"))
   ("constrained_type" ("type"))
   ("continue_statement" ("module" "_simple_statement" "block"))
   ("decorated_definition" ("module" "_compound_statement" "block"))
   ("decorator" ("decorated_definition"))
   ("default_parameter" ("parameter"))
   ("delete_statement" ("module" "_simple_statement" "block"))
   ("dict_pattern" ("keyword_pattern" "union_pattern" "case_pattern" "dict_pattern"))
   ("dictionary" ("primary_expression"))
   ("dictionary_comprehension" ("primary_expression"))
   ("dictionary_splat" ("argument_list" "dictionary"))
   ("dictionary_splat_pattern" ("typed_parameter" "parameter"))
   ("dotted_name" ("class_pattern" "future_import_statement" "import_statement" "union_pattern" "import_from_statement" "dict_pattern" "relative_import" "keyword_pattern" "aliased_import" "case_pattern"))
   ("elif_clause" ("if_statement"))
   ("ellipsis" ("primary_expression"))
   ("else_clause" ("if_statement" "while_statement" "for_statement" "try_statement"))
   ("escape_interpolation" ("string_content"))
   ("escape_sequence" ("string_content"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("exec_statement" ("module" "_simple_statement" "block"))
   ("expression" ("raise_statement" "not_operator" "assignment" "return_statement" "parenthesized_expression" "expression_list" "as_pattern" "lambda" "keyword_argument" "except_clause" "named_expression" "set_comprehension" "list_comprehension" "default_parameter" "set" "yield" "dictionary_splat" "delete_statement" "format_expression" "slice" "expression_statement" "typed_default_parameter" "tuple" "elif_clause" "if_clause" "list" "for_statement" "print_statement" "decorator" "if_statement" "match_statement" "except_group_clause" "pair" "exec_statement" "argument_list" "while_statement" "for_in_clause" "assert_statement" "with_item" "augmented_assignment" "conditional_expression" "chevron" "type" "subscript" "generator_expression" "boolean_operator" "interpolation" "list_splat"))
   ("expression_list" ("yield" "augmented_assignment" "raise_statement" "assignment" "delete_statement" "return_statement" "format_expression" "interpolation" "for_statement"))
   ("expression_statement" ("module" "_simple_statement" "block"))
   ("false" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("finally_clause" ("try_statement"))
   ("float" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern" "complex_pattern"))
   ("for_in_clause" ("dictionary_comprehension" "list_comprehension" "set_comprehension" "generator_expression"))
   ("for_statement" ("module" "_compound_statement" "block"))
   ("format_expression" ("format_specifier"))
   ("format_specifier" ("interpolation" "format_expression"))
   ("function_definition" ("module" "decorated_definition" "_compound_statement" "block"))
   ("future_import_statement" ("module" "_simple_statement" "block"))
   ("generator_expression" ("primary_expression" "call"))
   ("generic_type" ("type"))
   ("global_statement" ("module" "_simple_statement" "block"))
   ("identifier" ("pattern" "nonlocal_statement" "generic_type" "as_pattern" "keyword_argument" "named_expression" "default_parameter" "dotted_name" "primary_expression" "typed_default_parameter" "aliased_import" "dictionary_splat_pattern" "list_splat_pattern" "member_type" "exec_statement" "splat_type" "class_definition" "function_definition" "typed_parameter" "attribute" "splat_pattern" "global_statement" "parameter" "keyword_pattern" "list_splat"))
   ("if_clause" ("dictionary_comprehension" "generator_expression" "case_clause" "set_comprehension" "list_comprehension"))
   ("if_statement" ("module" "_compound_statement" "block"))
   ("import_from_statement" ("module" "_simple_statement" "block"))
   ("import_prefix" ("relative_import"))
   ("import_statement" ("module" "_simple_statement" "block"))
   ("integer" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern" "complex_pattern"))
   ("interpolation" ("string"))
   ("keyword_argument" ("argument_list"))
   ("keyword_pattern" ("case_pattern"))
   ("keyword_separator" ("parameter"))
   ("lambda" ("expression"))
   ("lambda_parameters" ("lambda"))
   ("list" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("list_pattern" ("pattern" "union_pattern" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("list_splat" ("parenthesized_list_splat" "parenthesized_expression" "argument_list" "primary_expression" "tuple" "list" "set"))
   ("list_splat_pattern" ("pattern" "typed_parameter" "parameter"))
   ("match_statement" ("module" "_compound_statement" "block"))
   ("member_type" ("type"))
   ("named_expression" ("expression"))
   ("none" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("nonlocal_statement" ("module" "_simple_statement" "block"))
   ("not_operator" ("expression"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("parameter" ("lambda_parameters" "parameters"))
   ("parameters" ("function_definition"))
   ("parenthesized_expression" ("argument_list" "primary_expression" "parenthesized_list_splat" "parenthesized_expression"))
   ("parenthesized_list_splat" ("list" "tuple" "set"))
   ("pass_statement" ("module" "_simple_statement" "block"))
   ("pattern" ("augmented_assignment" "list_pattern" "assignment" "pattern_list" "tuple_pattern" "for_in_clause" "for_statement"))
   ("pattern_list" ("augmented_assignment" "interpolation" "assignment" "format_expression" "for_in_clause" "for_statement"))
   ("positional_separator" ("parameter"))
   ("primary_expression" ("comparison_operator" "call" "unary_operator" "attribute" "subscript" "binary_operator" "await" "expression"))
   ("print_statement" ("module" "_simple_statement" "block"))
   ("raise_statement" ("module" "_simple_statement" "block"))
   ("relative_import" ("import_from_statement"))
   ("return_statement" ("module" "_simple_statement" "block"))
   ("set" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("slice" ("subscript"))
   ("splat_pattern" ("keyword_pattern" "union_pattern" "case_pattern" "dict_pattern"))
   ("splat_type" ("type"))
   ("string" ("concatenated_string" "exec_statement" "union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("string_content" ("string"))
   ("string_end" ("string"))
   ("string_start" ("string"))
   ("subscript" ("dictionary_splat_pattern" "list_splat_pattern" "pattern" "primary_expression" "list_splat"))
   ("true" ("union_pattern" "primary_expression" "dict_pattern" "keyword_pattern" "case_pattern"))
   ("try_statement" ("module" "_compound_statement" "block"))
   ("tuple" ("primary_expression"))
   ("tuple_pattern" ("pattern" "union_pattern" "dict_pattern" "parameter" "keyword_pattern" "case_pattern" "default_parameter"))
   ("type" ("type_parameter" "assignment" "member_type" "function_definition" "union_type" "typed_default_parameter" "type_alias_statement" "constrained_type" "typed_parameter"))
   ("type_alias_statement" ("module" "_simple_statement" "block"))
   ("type_conversion" ("interpolation" "format_expression"))
   ("type_parameter" ("generic_type" "function_definition" "class_definition"))
   ("typed_default_parameter" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("unary_operator" ("primary_expression"))
   ("union_pattern" ("keyword_pattern" "union_pattern" "case_pattern" "dict_pattern"))
   ("union_type" ("type"))
   ("while_statement" ("module" "_compound_statement" "block"))
   ("wildcard_import" ("import_from_statement"))
   ("with_clause" ("with_statement"))
   ("with_item" ("with_clause"))
   ("with_statement" ("module" "_compound_statement" "block"))
   ("yield" ("augmented_assignment" "assignment" "format_expression" "parenthesized_expression" "expression_statement" "tuple" "interpolation" "list" "set"))
  ) 
)
;; END Inverse production rules for python
;; START All node types in python
(defconst combobulate-rules-python-types 
 '("_compound_statement" "_simple_statement" "aliased_import" "argument_list" "as_pattern" "as_pattern_target" "assert_statement" "assignment" "attribute" "augmented_assignment" "await" "binary_operator" "block" "boolean_operator" "break_statement" "call" "case_clause" "case_pattern" "chevron" "class_definition" "class_pattern" "comment" "comparison_operator" "complex_pattern" "concatenated_string" "conditional_expression" "constrained_type" "continue_statement" "decorated_definition" "decorator" "default_parameter" "delete_statement" "dict_pattern" "dictionary" "dictionary_comprehension" "dictionary_splat" "dictionary_splat_pattern" "dotted_name" "elif_clause" "ellipsis" "else_clause" "escape_interpolation" "escape_sequence" "except_clause" "except_group_clause" "exec_statement" "expression" "expression_list" "expression_statement" "false" "finally_clause" "float" "for_in_clause" "for_statement" "format_expression" "format_specifier" "function_definition" "future_import_statement" "generator_expression" "generic_type" "global_statement" "identifier" "if_clause" "if_statement" "import_from_statement" "import_prefix" "import_statement" "integer" "interpolation" "keyword_argument" "keyword_pattern" "keyword_separator" "lambda" "lambda_parameters" "line_continuation" "list" "list_comprehension" "list_pattern" "list_splat" "list_splat_pattern" "match_statement" "member_type" "module" "named_expression" "none" "nonlocal_statement" "not_operator" "pair" "parameter" "parameters" "parenthesized_expression" "parenthesized_list_splat" "pass_statement" "pattern" "pattern_list" "positional_separator" "primary_expression" "print_statement" "raise_statement" "relative_import" "return_statement" "set" "set_comprehension" "slice" "splat_pattern" "splat_type" "string" "string_content" "string_end" "string_start" "subscript" "true" "try_statement" "tuple" "tuple_pattern" "type" "type_alias_statement" "type_conversion" "type_parameter" "typed_default_parameter" "typed_parameter" "unary_operator" "union_pattern" "union_type" "while_statement" "wildcard_import" "with_clause" "with_item" "with_statement" "yield") 
)
;; END All node types in python
;; START All supertypes in python
(defconst combobulate-rules-python-supertypes 
 '("_compound_statement" "_simple_statement" "expression" "parameter" "pattern" "primary_expression") 
)
;; END All supertypes in python

;; START Production rules for c
(defconst combobulate-rules-c 
 '(("_abstract_declarator" (:*unnamed* ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator"))) 
 ("_declarator" (:*unnamed* ("parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator" "identifier" "attributed_declarator"))) 
 ("_field_declarator" (:*unnamed* ("parenthesized_declarator" "field_identifier" "function_declarator" "pointer_declarator" "array_declarator" "attributed_declarator"))) 
 ("_type_declarator" (:*unnamed* ("parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator" "type_identifier" "attributed_declarator" "primitive_type"))) 
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator") :size ("expression"))) 
 ("abstract_function_declarator" (:*unnamed* nil :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator") :parameters ("parameter_list"))) 
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "ms_call_modifier"))) 
 ("abstract_pointer_declarator" (:*unnamed* ("ms_pointer_modifier" "type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator"))) 
 ("alignas_qualifier" (:*unnamed* ("expression" "type_descriptor"))) 
 ("alignof_expression" (:*unnamed* nil :type ("type_descriptor"))) 
 ("argument_list" (:*unnamed* ("expression" "preproc_defined" "compound_statement"))) 
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator" "array_declarator" "identifier" "primitive_type") :size ("expression"))) 
 ("assignment_expression" (:*unnamed* nil :left ("pointer_expression" "subscript_expression" "field_expression" "call_expression" "identifier" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier"))) 
 ("attribute_declaration" (:*unnamed* ("attribute"))) 
 ("attribute_specifier" (:*unnamed* ("argument_list"))) 
 ("attributed_declarator" (:*unnamed* ("pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator" "array_declarator" "attribute_declaration" "identifier" "primitive_type"))) 
 ("attributed_statement" (:*unnamed* ("statement" "attribute_declaration"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression" "preproc_defined") :operator nil :right ("expression" "preproc_defined"))) 
 ("bitfield_clause" (:*unnamed* ("expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("expression"))) 
 ("case_statement" (:*unnamed* ("if_statement" "return_statement" "do_statement" "compound_statement" "seh_try_statement" "while_statement" "attributed_statement" "switch_statement" "labeled_statement" "goto_statement" "declaration" "expression_statement" "seh_leave_statement" "type_definition" "continue_statement" "for_statement" "break_statement") :value ("expression"))) 
 ("cast_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression"))) 
 ("char_literal" (:*unnamed* ("character" "escape_sequence"))) 
 ("character" (:*unnamed* nil)) 
 ("comma_expression" (:*unnamed* nil :left ("expression") :right ("expression" "comma_expression"))) 
 ("comment" (:*unnamed* nil)) 
 ("compound_literal_expression" (:*unnamed* nil :type ("type_descriptor") :value ("initializer_list"))) 
 ("compound_statement" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "declaration" "preproc_call" "type_definition" "preproc_include" "linkage_specification" "function_definition" "type_specifier"))) 
 ("concatenated_string" (:*unnamed* ("identifier" "string_literal"))) 
 ("conditional_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression" "comma_expression"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("ms_declspec_modifier" "storage_class_specifier" "attribute_specifier" "attribute_declaration" "type_qualifier") :declarator ("pointer_declarator" "attributed_declarator" "ms_call_modifier" "parenthesized_declarator" "init_declarator" "function_declarator" "gnu_asm_expression" "array_declarator" "identifier") :type ("type_specifier"))) 
 ("declaration_list" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "declaration" "preproc_call" "type_definition" "preproc_include" "linkage_specification" "function_definition" "type_specifier"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("enum_specifier" (:*unnamed* ("attribute_specifier") :body ("enumerator_list") :name ("type_identifier") :underlying_type ("primitive_type"))) 
 ("enumerator" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("enumerator_list" (:*unnamed* ("preproc_ifdef" "enumerator" "preproc_if" "preproc_call"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression" (:*unnamed* ("char_literal" "binary_expression" "assignment_expression" "unary_expression" "alignof_expression" "number_literal" "string_literal" "parenthesized_expression" "false" "null" "cast_expression" "true" "offsetof_expression" "concatenated_string" "pointer_expression" "subscript_expression" "field_expression" "call_expression" "conditional_expression" "update_expression" "generic_expression" "sizeof_expression" "gnu_asm_expression" "compound_literal_expression" "extension_expression" "identifier"))) 
 ("expression_statement" (:*unnamed* ("expression" "comma_expression"))) 
 ("extension_expression" (:*unnamed* ("expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* ("ms_declspec_modifier" "storage_class_specifier" "attribute_specifier" "bitfield_clause" "attribute_declaration" "type_qualifier") :declarator ("parenthesized_declarator" "field_identifier" "function_declarator" "pointer_declarator" "array_declarator" "attributed_declarator") :type ("type_specifier"))) 
 ("field_declaration_list" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "field_declaration" "preproc_call"))) 
 ("field_designator" (:*unnamed* ("field_identifier"))) 
 ("field_expression" (:*unnamed* nil :argument ("expression") :field ("field_identifier") :operator nil)) 
 ("field_identifier" (:*unnamed* nil)) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("expression" "comma_expression") :initializer ("expression" "declaration" "comma_expression") :update ("expression" "comma_expression"))) 
 ("function_declarator" (:*unnamed* ("call_expression" "identifier" "gnu_asm_expression" "attribute_specifier") :declarator ("pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator" "array_declarator" "identifier" "primitive_type") :parameters ("parameter_list"))) 
 ("function_definition" (:*unnamed* ("ms_declspec_modifier" "storage_class_specifier" "attribute_specifier" "attribute_declaration" "type_qualifier" "declaration" "ms_call_modifier") :body ("compound_statement") :declarator ("parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator" "identifier" "attributed_declarator") :type ("type_specifier"))) 
 ("generic_expression" (:*unnamed* ("expression" "type_descriptor"))) 
 ("gnu_asm_clobber_list" (:*unnamed* nil :register ("concatenated_string" "string_literal"))) 
 ("gnu_asm_expression" (:*unnamed* ("gnu_asm_qualifier") :assembly_code ("concatenated_string" "string_literal") :clobbers ("gnu_asm_clobber_list") :goto_labels ("gnu_asm_goto_list") :input_operands ("gnu_asm_input_operand_list") :output_operands ("gnu_asm_output_operand_list"))) 
 ("gnu_asm_goto_list" (:*unnamed* nil :label ("identifier"))) 
 ("gnu_asm_input_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression"))) 
 ("gnu_asm_input_operand_list" (:*unnamed* nil :operand ("gnu_asm_input_operand"))) 
 ("gnu_asm_output_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression"))) 
 ("gnu_asm_output_operand_list" (:*unnamed* nil :operand ("gnu_asm_output_operand"))) 
 ("gnu_asm_qualifier" (:*unnamed* nil)) 
 ("goto_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("init_declarator" (:*unnamed* nil :declarator ("parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator" "identifier" "attributed_declarator") :value ("expression" "initializer_list"))) 
 ("initializer_list" (:*unnamed* ("expression" "initializer_list" "initializer_pair"))) 
 ("initializer_pair" (:*unnamed* nil :designator ("field_designator" "subscript_range_designator" "field_identifier" "subscript_designator") :value ("expression" "initializer_list"))) 
 ("labeled_statement" (:*unnamed* ("statement" "declaration") :label ("statement_identifier"))) 
 ("linkage_specification" (:*unnamed* nil :body ("declaration_list" "declaration" "function_definition") :value ("string_literal"))) 
 ("macro_type_specifier" (:*unnamed* nil :name ("identifier") :type ("type_descriptor"))) 
 ("ms_based_modifier" (:*unnamed* ("argument_list"))) 
 ("ms_call_modifier" (:*unnamed* nil)) 
 ("ms_declspec_modifier" (:*unnamed* ("identifier"))) 
 ("ms_pointer_modifier" (:*unnamed* ("ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unsigned_ptr_modifier" "ms_unaligned_ptr_modifier"))) 
 ("ms_restrict_modifier" (:*unnamed* nil)) 
 ("ms_signed_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unaligned_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unsigned_ptr_modifier" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number_literal" (:*unnamed* nil)) 
 ("offsetof_expression" (:*unnamed* nil :member ("field_identifier") :type ("type_descriptor"))) 
 ("parameter_declaration" (:*unnamed* ("ms_declspec_modifier" "storage_class_specifier" "attribute_specifier" "attribute_declaration" "type_qualifier") :declarator ("abstract_pointer_declarator" "pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "attributed_declarator" "parenthesized_declarator" "function_declarator" "abstract_array_declarator" "array_declarator" "identifier") :type ("type_specifier"))) 
 ("parameter_list" (:*unnamed* ("variadic_parameter" "identifier" "parameter_declaration" "compound_statement"))) 
 ("parenthesized_declarator" (:*unnamed* ("pointer_declarator" "type_identifier" "attributed_declarator" "ms_call_modifier" "parenthesized_declarator" "field_identifier" "function_declarator" "array_declarator" "identifier" "primitive_type"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "preproc_defined" "comma_expression" "compound_statement"))) 
 ("pointer_declarator" (:*unnamed* ("ms_based_modifier" "type_qualifier" "ms_pointer_modifier") :declarator ("pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator" "array_declarator" "identifier" "primitive_type"))) 
 ("pointer_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("preproc_arg" (:*unnamed* nil)) 
 ("preproc_call" (:*unnamed* nil :argument ("preproc_arg") :directive ("preproc_directive"))) 
 ("preproc_def" (:*unnamed* nil :name ("identifier") :value ("preproc_arg"))) 
 ("preproc_defined" (:*unnamed* ("identifier"))) 
 ("preproc_directive" (:*unnamed* nil)) 
 ("preproc_elif" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "enumerator" "declaration" "preproc_call" "type_definition" "preproc_include" "field_declaration" "linkage_specification" "function_definition" "type_specifier") :alternative ("preproc_else" "preproc_elifdef" "preproc_elif") :condition ("char_literal" "binary_expression" "number_literal" "call_expression" "preproc_defined" "unary_expression" "parenthesized_expression" "identifier"))) 
 ("preproc_elifdef" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "enumerator" "declaration" "preproc_call" "type_definition" "preproc_include" "field_declaration" "linkage_specification" "function_definition" "type_specifier") :alternative ("preproc_else" "preproc_elifdef" "preproc_elif") :name ("identifier"))) 
 ("preproc_else" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "enumerator" "declaration" "preproc_call" "type_definition" "preproc_include" "field_declaration" "linkage_specification" "function_definition" "type_specifier"))) 
 ("preproc_function_def" (:*unnamed* nil :name ("identifier") :parameters ("preproc_params") :value ("preproc_arg"))) 
 ("preproc_if" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "enumerator" "declaration" "preproc_call" "type_definition" "preproc_include" "field_declaration" "linkage_specification" "function_definition" "type_specifier") :alternative ("preproc_else" "preproc_elifdef" "preproc_elif") :condition ("char_literal" "binary_expression" "number_literal" "call_expression" "preproc_defined" "unary_expression" "parenthesized_expression" "identifier"))) 
 ("preproc_ifdef" (:*unnamed* ("preproc_function_def" "preproc_def" "preproc_if" "preproc_ifdef" "statement" "enumerator" "declaration" "preproc_call" "type_definition" "preproc_include" "field_declaration" "linkage_specification" "function_definition" "type_specifier") :alternative ("preproc_else" "preproc_elifdef" "preproc_elif") :name ("identifier"))) 
 ("preproc_include" (:*unnamed* nil :path ("system_lib_string" "call_expression" "identifier" "string_literal"))) 
 ("preproc_params" (:*unnamed* ("identifier"))) 
 ("primitive_type" (:*unnamed* nil)) 
 ("return_statement" (:*unnamed* ("expression" "comma_expression"))) 
 ("seh_except_clause" (:*unnamed* nil :body ("compound_statement") :filter ("parenthesized_expression"))) 
 ("seh_finally_clause" (:*unnamed* nil :body ("compound_statement"))) 
 ("seh_leave_statement" (:*unnamed* nil)) 
 ("seh_try_statement" (:*unnamed* ("seh_except_clause" "seh_finally_clause") :body ("compound_statement"))) 
 ("sized_type_specifier" (:*unnamed* ("type_qualifier") :type ("type_identifier" "primitive_type"))) 
 ("sizeof_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression"))) 
 ("statement" (:*unnamed* ("if_statement" "return_statement" "do_statement" "compound_statement" "seh_try_statement" "while_statement" "attributed_statement" "switch_statement" "labeled_statement" "goto_statement" "case_statement" "expression_statement" "seh_leave_statement" "continue_statement" "for_statement" "break_statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("storage_class_specifier" (:*unnamed* nil)) 
 ("string_content" (:*unnamed* nil)) 
 ("string_literal" (:*unnamed* ("escape_sequence" "string_content"))) 
 ("struct_specifier" (:*unnamed* ("ms_declspec_modifier" "attribute_specifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("subscript_designator" (:*unnamed* ("expression"))) 
 ("subscript_expression" (:*unnamed* nil :argument ("expression") :index ("expression"))) 
 ("subscript_range_designator" (:*unnamed* nil :end ("expression") :start ("expression"))) 
 ("switch_statement" (:*unnamed* nil :body ("compound_statement") :condition ("parenthesized_expression"))) 
 ("system_lib_string" (:*unnamed* nil)) 
 ("translation_unit" (:*unnamed* ("if_statement" "preproc_ifdef" "return_statement" "do_statement" "preproc_call" "compound_statement" "while_statement" "preproc_include" "linkage_specification" "attributed_statement" "function_definition" "switch_statement" "type_specifier" "preproc_function_def" "preproc_def" "labeled_statement" "preproc_if" "goto_statement" "case_statement" "declaration" "expression_statement" "type_definition" "continue_statement" "for_statement" "break_statement"))) 
 ("true" (:*unnamed* nil)) 
 ("type_definition" (:*unnamed* ("type_qualifier" "attribute_specifier") :declarator ("parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator" "type_identifier" "attributed_declarator" "primitive_type") :type ("type_specifier"))) 
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator") :type ("type_specifier"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_qualifier" (:*unnamed* ("alignas_qualifier"))) 
 ("type_specifier" (:*unnamed* ("enum_specifier" "union_specifier" "struct_specifier" "type_identifier" "sized_type_specifier" "macro_type_specifier" "primitive_type"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression" "preproc_defined") :operator nil)) 
 ("union_specifier" (:*unnamed* ("ms_declspec_modifier" "attribute_specifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variadic_parameter" (:*unnamed* nil)) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
))
;; END Production rules for c
;; START Inverse production rules for c
(defconst combobulate-rules-c-inverse 
 '(("abstract_array_declarator" ("abstract_pointer_declarator" "type_descriptor" "_abstract_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator" "parameter_declaration"))
   ("abstract_function_declarator" ("abstract_pointer_declarator" "type_descriptor" "_abstract_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator" "parameter_declaration"))
   ("abstract_parenthesized_declarator" ("abstract_pointer_declarator" "type_descriptor" "_abstract_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator" "parameter_declaration"))
   ("abstract_pointer_declarator" ("abstract_pointer_declarator" "type_descriptor" "_abstract_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator" "parameter_declaration"))
   ("alignas_qualifier" ("type_qualifier"))
   ("alignof_expression" ("expression"))
   ("argument_list" ("attribute_specifier" "call_expression" "ms_based_modifier" "attribute"))
   ("array_declarator" ("_declarator" "_type_declarator" "pointer_declarator" "attributed_declarator" "_field_declarator" "declaration" "parenthesized_declarator" "init_declarator" "function_declarator" "type_definition" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("assignment_expression" ("expression"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("declaration" "attributed_declarator" "function_definition" "parameter_declaration" "field_declaration" "attributed_statement"))
   ("attribute_specifier" ("union_specifier" "enum_specifier" "declaration" "type_definition" "function_declarator" "parameter_declaration" "struct_specifier" "field_declaration" "function_definition"))
   ("attributed_declarator" ("_declarator" "_type_declarator" "pointer_declarator" "attributed_declarator" "_field_declarator" "declaration" "parenthesized_declarator" "init_declarator" "function_declarator" "type_definition" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("attributed_statement" ("statement" "case_statement" "translation_unit"))
   ("binary_expression" ("expression" "preproc_elif" "preproc_if"))
   ("bitfield_clause" ("field_declaration"))
   ("break_statement" ("statement" "case_statement" "translation_unit"))
   ("call_expression" ("preproc_if" "assignment_expression" "function_declarator" "preproc_elif" "preproc_include" "expression"))
   ("case_statement" ("statement" "translation_unit"))
   ("cast_expression" ("expression"))
   ("char_literal" ("expression" "preproc_elif" "preproc_if"))
   ("character" ("char_literal"))
   ("comma_expression" ("conditional_expression" "return_statement" "parenthesized_expression" "expression_statement" "comma_expression" "for_statement"))
   ("compound_literal_expression" ("expression"))
   ("compound_statement" ("statement" "seh_except_clause" "parameter_list" "case_statement" "translation_unit" "parenthesized_expression" "argument_list" "seh_try_statement" "function_definition" "switch_statement" "seh_finally_clause"))
   ("concatenated_string" ("expression" "gnu_asm_expression" "gnu_asm_clobber_list"))
   ("conditional_expression" ("expression"))
   ("continue_statement" ("statement" "case_statement" "translation_unit"))
   ("declaration" ("labeled_statement" "preproc_if" "preproc_ifdef" "preproc_elifdef" "case_statement" "translation_unit" "compound_statement" "declaration_list" "preproc_elif" "preproc_else" "linkage_specification" "function_definition" "for_statement"))
   ("declaration_list" ("linkage_specification"))
   ("do_statement" ("statement" "case_statement" "translation_unit"))
   ("else_clause" ("if_statement"))
   ("enum_specifier" ("type_specifier"))
   ("enumerator" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "enumerator_list" "preproc_else" "preproc_elif"))
   ("enumerator_list" ("enum_specifier"))
   ("escape_sequence" ("string_literal" "char_literal"))
   ("expression" ("subscript_designator" "initializer_pair" "binary_expression" "assignment_expression" "return_statement" "unary_expression" "parenthesized_expression" "bitfield_clause" "alignas_qualifier" "cast_expression" "pointer_expression" "subscript_expression" "call_expression" "case_statement" "gnu_asm_input_operand" "sizeof_expression" "expression_statement" "array_declarator" "for_statement" "gnu_asm_output_operand" "argument_list" "abstract_array_declarator" "comma_expression" "field_expression" "conditional_expression" "enumerator" "update_expression" "generic_expression" "init_declarator" "initializer_list" "subscript_range_designator" "extension_expression"))
   ("expression_statement" ("statement" "case_statement" "translation_unit"))
   ("extension_expression" ("expression"))
   ("false" ("expression"))
   ("field_declaration" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "field_declaration_list" "preproc_else" "preproc_elif"))
   ("field_declaration_list" ("union_specifier" "struct_specifier"))
   ("field_designator" ("initializer_pair"))
   ("field_expression" ("expression" "assignment_expression"))
   ("field_identifier" ("offsetof_expression" "pointer_declarator" "initializer_pair" "field_expression" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "function_declarator" "array_declarator" "field_designator" "field_declaration"))
   ("for_statement" ("statement" "case_statement" "translation_unit"))
   ("function_declarator" ("_declarator" "_type_declarator" "pointer_declarator" "attributed_declarator" "_field_declarator" "declaration" "parenthesized_declarator" "init_declarator" "function_declarator" "type_definition" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("function_definition" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "declaration_list" "preproc_elif" "preproc_else" "linkage_specification"))
   ("generic_expression" ("expression"))
   ("gnu_asm_clobber_list" ("gnu_asm_expression"))
   ("gnu_asm_expression" ("expression" "function_declarator" "declaration"))
   ("gnu_asm_goto_list" ("gnu_asm_expression"))
   ("gnu_asm_input_operand" ("gnu_asm_input_operand_list"))
   ("gnu_asm_input_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_output_operand" ("gnu_asm_output_operand_list"))
   ("gnu_asm_output_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_qualifier" ("gnu_asm_expression"))
   ("goto_statement" ("statement" "case_statement" "translation_unit"))
   ("identifier" ("assignment_expression" "parenthesized_declarator" "preproc_function_def" "preproc_def" "_declarator" "preproc_if" "parameter_list" "preproc_defined" "macro_type_specifier" "gnu_asm_input_operand" "ms_declspec_modifier" "gnu_asm_goto_list" "preproc_elif" "array_declarator" "gnu_asm_output_operand" "preproc_ifdef" "preproc_params" "attributed_declarator" "parameter_declaration" "preproc_include" "function_definition" "concatenated_string" "pointer_declarator" "attribute" "enumerator" "preproc_elifdef" "declaration" "init_declarator" "function_declarator" "expression"))
   ("if_statement" ("statement" "case_statement" "translation_unit"))
   ("init_declarator" ("declaration"))
   ("initializer_list" ("compound_literal_expression" "init_declarator" "initializer_list" "initializer_pair"))
   ("initializer_pair" ("initializer_list"))
   ("labeled_statement" ("statement" "case_statement" "translation_unit"))
   ("linkage_specification" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("macro_type_specifier" ("type_specifier"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_call_modifier" ("parenthesized_declarator" "function_definition" "declaration" "abstract_parenthesized_declarator"))
   ("ms_declspec_modifier" ("union_specifier" "declaration" "parameter_declaration" "struct_specifier" "field_declaration" "function_definition"))
   ("ms_pointer_modifier" ("abstract_pointer_declarator" "pointer_declarator"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("null" ("expression"))
   ("number_literal" ("expression" "preproc_elif" "preproc_if"))
   ("offsetof_expression" ("expression"))
   ("parameter_declaration" ("parameter_list"))
   ("parameter_list" ("function_declarator" "abstract_function_declarator"))
   ("parenthesized_declarator" ("_declarator" "_type_declarator" "pointer_declarator" "attributed_declarator" "_field_declarator" "declaration" "parenthesized_declarator" "init_declarator" "function_declarator" "type_definition" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("parenthesized_expression" ("if_statement" "preproc_if" "assignment_expression" "seh_except_clause" "do_statement" "preproc_elif" "while_statement" "expression" "switch_statement"))
   ("pointer_declarator" ("_declarator" "_type_declarator" "pointer_declarator" "attributed_declarator" "_field_declarator" "declaration" "parenthesized_declarator" "init_declarator" "function_declarator" "type_definition" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("pointer_expression" ("expression" "assignment_expression"))
   ("preproc_arg" ("preproc_function_def" "preproc_def" "preproc_call"))
   ("preproc_call" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "enumerator_list" "declaration_list" "preproc_elif" "field_declaration_list" "preproc_else"))
   ("preproc_def" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "field_declaration_list" "declaration_list" "preproc_elif" "preproc_else"))
   ("preproc_defined" ("preproc_if" "binary_expression" "unary_expression" "parenthesized_expression" "argument_list" "preproc_elif"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_ifdef" "preproc_elifdef" "preproc_elif" "preproc_if"))
   ("preproc_elifdef" ("preproc_ifdef" "preproc_elifdef" "preproc_elif" "preproc_if"))
   ("preproc_else" ("preproc_ifdef" "preproc_elifdef" "preproc_elif" "preproc_if"))
   ("preproc_function_def" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "field_declaration_list" "declaration_list" "preproc_elif" "preproc_else"))
   ("preproc_if" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "enumerator_list" "declaration_list" "preproc_elif" "field_declaration_list" "preproc_else"))
   ("preproc_ifdef" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "enumerator_list" "declaration_list" "preproc_elif" "field_declaration_list" "preproc_else"))
   ("preproc_include" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "translation_unit" "compound_statement" "declaration_list" "preproc_else" "preproc_elif"))
   ("preproc_params" ("preproc_function_def"))
   ("primitive_type" ("_type_declarator" "pointer_declarator" "sized_type_specifier" "enum_specifier" "attributed_declarator" "parenthesized_declarator" "function_declarator" "array_declarator" "type_definition" "type_specifier"))
   ("return_statement" ("statement" "case_statement" "translation_unit"))
   ("seh_except_clause" ("seh_try_statement"))
   ("seh_finally_clause" ("seh_try_statement"))
   ("seh_leave_statement" ("statement" "case_statement"))
   ("seh_try_statement" ("statement" "case_statement"))
   ("sized_type_specifier" ("type_specifier"))
   ("sizeof_expression" ("expression"))
   ("statement" ("if_statement" "labeled_statement" "preproc_if" "preproc_ifdef" "preproc_elifdef" "do_statement" "compound_statement" "declaration_list" "preproc_elif" "preproc_else" "while_statement" "else_clause" "attributed_statement" "for_statement"))
   ("statement_identifier" ("goto_statement" "labeled_statement"))
   ("storage_class_specifier" ("field_declaration" "function_definition" "declaration" "parameter_declaration"))
   ("string_content" ("string_literal"))
   ("string_literal" ("gnu_asm_output_operand" "concatenated_string" "gnu_asm_input_operand" "gnu_asm_expression" "preproc_include" "gnu_asm_clobber_list" "expression" "linkage_specification"))
   ("struct_specifier" ("type_specifier"))
   ("subscript_designator" ("initializer_pair"))
   ("subscript_expression" ("expression" "assignment_expression"))
   ("subscript_range_designator" ("initializer_pair"))
   ("switch_statement" ("statement" "case_statement" "translation_unit"))
   ("system_lib_string" ("preproc_include"))
   ("true" ("expression"))
   ("type_definition" ("preproc_if" "preproc_ifdef" "preproc_elifdef" "case_statement" "translation_unit" "compound_statement" "declaration_list" "preproc_elif" "preproc_else"))
   ("type_descriptor" ("offsetof_expression" "alignof_expression" "macro_type_specifier" "generic_expression" "sizeof_expression" "compound_literal_expression" "alignas_qualifier" "cast_expression"))
   ("type_identifier" ("union_specifier" "_type_declarator" "pointer_declarator" "sized_type_specifier" "enum_specifier" "attributed_declarator" "parenthesized_declarator" "function_declarator" "array_declarator" "type_definition" "struct_specifier" "type_specifier"))
   ("type_qualifier" ("abstract_pointer_declarator" "pointer_declarator" "type_descriptor" "sized_type_specifier" "declaration" "type_definition" "abstract_array_declarator" "parameter_declaration" "array_declarator" "field_declaration" "function_definition"))
   ("type_specifier" ("preproc_if" "type_descriptor" "preproc_ifdef" "preproc_elifdef" "declaration" "translation_unit" "compound_statement" "type_definition" "declaration_list" "preproc_elif" "preproc_else" "parameter_declaration" "field_declaration" "function_definition"))
   ("unary_expression" ("expression" "preproc_elif" "preproc_if"))
   ("union_specifier" ("type_specifier"))
   ("update_expression" ("expression"))
   ("variadic_parameter" ("parameter_list"))
   ("while_statement" ("statement" "case_statement" "translation_unit"))
  ) 
)
;; END Inverse production rules for c
;; START All node types in c
(defconst combobulate-rules-c-types 
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator" "alignas_qualifier" "alignof_expression" "argument_list" "array_declarator" "assignment_expression" "attribute" "attribute_declaration" "attribute_specifier" "attributed_declarator" "attributed_statement" "binary_expression" "bitfield_clause" "break_statement" "call_expression" "case_statement" "cast_expression" "char_literal" "character" "comma_expression" "comment" "compound_literal_expression" "compound_statement" "concatenated_string" "conditional_expression" "continue_statement" "declaration" "declaration_list" "do_statement" "else_clause" "enum_specifier" "enumerator" "enumerator_list" "escape_sequence" "expression" "expression_statement" "extension_expression" "false" "field_declaration" "field_declaration_list" "field_designator" "field_expression" "field_identifier" "for_statement" "function_declarator" "function_definition" "generic_expression" "gnu_asm_clobber_list" "gnu_asm_expression" "gnu_asm_goto_list" "gnu_asm_input_operand" "gnu_asm_input_operand_list" "gnu_asm_output_operand" "gnu_asm_output_operand_list" "gnu_asm_qualifier" "goto_statement" "identifier" "if_statement" "init_declarator" "initializer_list" "initializer_pair" "labeled_statement" "linkage_specification" "macro_type_specifier" "ms_based_modifier" "ms_call_modifier" "ms_declspec_modifier" "ms_pointer_modifier" "ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_unsigned_ptr_modifier" "null" "number_literal" "offsetof_expression" "parameter_declaration" "parameter_list" "parenthesized_declarator" "parenthesized_expression" "pointer_declarator" "pointer_expression" "preproc_arg" "preproc_call" "preproc_def" "preproc_defined" "preproc_directive" "preproc_elif" "preproc_elifdef" "preproc_else" "preproc_function_def" "preproc_if" "preproc_ifdef" "preproc_include" "preproc_params" "primitive_type" "return_statement" "seh_except_clause" "seh_finally_clause" "seh_leave_statement" "seh_try_statement" "sized_type_specifier" "sizeof_expression" "statement" "statement_identifier" "storage_class_specifier" "string_content" "string_literal" "struct_specifier" "subscript_designator" "subscript_expression" "subscript_range_designator" "switch_statement" "system_lib_string" "translation_unit" "true" "type_definition" "type_descriptor" "type_identifier" "type_qualifier" "type_specifier" "unary_expression" "union_specifier" "update_expression" "variadic_parameter" "while_statement") 
)
;; END All node types in c
;; START All supertypes in c
(defconst combobulate-rules-c-supertypes 
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "expression" "statement" "type_specifier") 
)
;; END All supertypes in c

;; START Production rules for html
(defconst combobulate-rules-html 
 '(("attribute" (:*unnamed* ("attribute_name" "attribute_value" "quoted_attribute_value"))) 
 ("attribute_name" (:*unnamed* nil)) 
 ("attribute_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("doctype" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("entity" "element" "style_element" "erroneous_end_tag" "script_element" "text" "doctype"))) 
 ("element" (:*unnamed* ("element" "erroneous_end_tag" "script_element" "doctype" "end_tag" "entity" "start_tag" "self_closing_tag" "style_element" "text"))) 
 ("end_tag" (:*unnamed* ("tag_name"))) 
 ("entity" (:*unnamed* nil)) 
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name"))) 
 ("erroneous_end_tag_name" (:*unnamed* nil)) 
 ("quoted_attribute_value" (:*unnamed* ("attribute_value"))) 
 ("raw_text" (:*unnamed* nil)) 
 ("script_element" (:*unnamed* ("start_tag" "end_tag" "raw_text"))) 
 ("self_closing_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("start_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("style_element" (:*unnamed* ("start_tag" "end_tag" "raw_text"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("text" (:*unnamed* nil)) 
))
;; END Production rules for html
;; START Inverse production rules for html
(defconst combobulate-rules-html-inverse 
 '(("attribute" ("start_tag" "self_closing_tag"))
   ("attribute_name" ("attribute"))
   ("attribute_value" ("quoted_attribute_value" "attribute"))
   ("doctype" ("element" "document"))
   ("element" ("element" "document"))
   ("end_tag" ("element" "script_element" "style_element"))
   ("entity" ("element" "document"))
   ("erroneous_end_tag" ("element" "document"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("quoted_attribute_value" ("attribute"))
   ("raw_text" ("script_element" "style_element"))
   ("script_element" ("element" "document"))
   ("self_closing_tag" ("element"))
   ("start_tag" ("element" "script_element" "style_element"))
   ("style_element" ("element" "document"))
   ("tag_name" ("start_tag" "self_closing_tag" "end_tag"))
   ("text" ("element" "document"))
  ) 
)
;; END Inverse production rules for html
;; START All node types in html
(defconst combobulate-rules-html-types 
 '("attribute" "attribute_name" "attribute_value" "comment" "doctype" "document" "element" "end_tag" "entity" "erroneous_end_tag" "erroneous_end_tag_name" "quoted_attribute_value" "raw_text" "script_element" "self_closing_tag" "start_tag" "style_element" "tag_name" "text") 
)
;; END All node types in html
;; START All supertypes in html
(defconst combobulate-rules-html-supertypes 
 nil 
)
;; END All supertypes in html

;; START Production rules for toml
(defconst combobulate-rules-toml 
 '(("array" (:*unnamed* ("boolean" "integer" "array" "local_time" "float" "offset_date_time" "string" "local_date" "local_date_time" "inline_table"))) 
 ("bare_key" (:*unnamed* nil)) 
 ("boolean" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("table" "table_array_element" "pair"))) 
 ("dotted_key" (:*unnamed* ("bare_key" "dotted_key" "quoted_key"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float" (:*unnamed* nil)) 
 ("inline_table" (:*unnamed* ("pair"))) 
 ("integer" (:*unnamed* nil)) 
 ("local_date" (:*unnamed* nil)) 
 ("local_date_time" (:*unnamed* nil)) 
 ("local_time" (:*unnamed* nil)) 
 ("offset_date_time" (:*unnamed* nil)) 
 ("pair" (:*unnamed* ("boolean" "integer" "array" "local_time" "float" "offset_date_time" "string" "local_date" "local_date_time" "bare_key" "inline_table" "dotted_key" "quoted_key"))) 
 ("quoted_key" (:*unnamed* ("escape_sequence"))) 
 ("string" (:*unnamed* ("escape_sequence"))) 
 ("table" (:*unnamed* ("bare_key" "pair" "dotted_key" "quoted_key"))) 
 ("table_array_element" (:*unnamed* ("bare_key" "pair" "dotted_key" "quoted_key"))) 
))
;; END Production rules for toml
;; START Inverse production rules for toml
(defconst combobulate-rules-toml-inverse 
 '(("array" ("pair" "array"))
   ("bare_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("boolean" ("pair" "array"))
   ("dotted_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("escape_sequence" ("string" "quoted_key"))
   ("float" ("pair" "array"))
   ("inline_table" ("pair" "array"))
   ("integer" ("pair" "array"))
   ("local_date" ("pair" "array"))
   ("local_date_time" ("pair" "array"))
   ("local_time" ("pair" "array"))
   ("offset_date_time" ("pair" "array"))
   ("pair" ("table" "inline_table" "table_array_element" "document"))
   ("quoted_key" ("table" "table_array_element" "pair" "dotted_key"))
   ("string" ("pair" "array"))
   ("table" ("document"))
   ("table_array_element" ("document"))
  ) 
)
;; END Inverse production rules for toml
;; START All node types in toml
(defconst combobulate-rules-toml-types 
 '("array" "bare_key" "boolean" "comment" "document" "dotted_key" "escape_sequence" "float" "inline_table" "integer" "local_date" "local_date_time" "local_time" "offset_date_time" "pair" "quoted_key" "string" "table" "table_array_element") 
)
;; END All node types in toml
;; START All supertypes in toml
(defconst combobulate-rules-toml-supertypes 
 nil 
)
;; END All supertypes in toml

;; START Production rules for json
(defconst combobulate-rules-json 
 '(("_value" (:*unnamed* ("true" "number" "false" "array" "string" "null" "object"))) 
 ("array" (:*unnamed* ("true" "number" "false" "array" "string" "null" "object"))) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("true" "number" "false" "array" "string" "null" "object"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("pair"))) 
 ("pair" (:*unnamed* nil :key ("string") :value ("true" "number" "false" "array" "string" "null" "object"))) 
 ("string" (:*unnamed* ("string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence"))) 
 ("true" (:*unnamed* nil)) 
))
;; END Production rules for json
;; START Inverse production rules for json
(defconst combobulate-rules-json-inverse 
 '(("array" ("_value" "array" "pair" "document"))
   ("escape_sequence" ("string_content"))
   ("false" ("_value" "array" "pair" "document"))
   ("null" ("_value" "array" "pair" "document"))
   ("number" ("_value" "array" "pair" "document"))
   ("object" ("_value" "array" "pair" "document"))
   ("pair" ("object"))
   ("string" ("_value" "array" "pair" "document"))
   ("string_content" ("string"))
   ("true" ("_value" "array" "pair" "document"))
  ) 
)
;; END Inverse production rules for json
;; START All node types in json
(defconst combobulate-rules-json-types 
 '("_value" "array" "comment" "document" "escape_sequence" "false" "null" "number" "object" "pair" "string" "string_content" "true") 
)
;; END All node types in json
;; START All supertypes in json
(defconst combobulate-rules-json-supertypes 
 '("_value") 
)
;; END All supertypes in json

;; START Production rules for ocaml
(defconst combobulate-rules-ocaml 
 '(("_binding_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("_class_expression" (:*unnamed* ("let_open_class_expression" "class_function" "let_class_expression" "class_application"))) 
 ("_class_field" (:*unnamed* ("method_definition" "class_initializer" "quoted_item_extension" "item_extension" "instance_variable_definition" "inheritance_definition" "type_parameter_constraint"))) 
 ("_class_field_specification" (:*unnamed* ("instance_variable_specification" "method_specification" "inheritance_specification" "quoted_item_extension" "item_extension" "type_parameter_constraint"))) 
 ("_class_type" (:*unnamed* ("class_function_type"))) 
 ("_constant" (:*unnamed* ("boolean" "unit" "number" "character" "quoted_string" "string"))) 
 ("_effect_pattern" (:*unnamed* ("tag_pattern" "constructor_pattern" "lazy_pattern"))) 
 ("_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("_infix_operator" (:*unnamed* ("pow_operator" "or_operator" "concat_operator" "rel_operator" "mult_operator" "and_operator" "add_operator" "assign_operator"))) 
 ("_module_expression" (:*unnamed* ("structure" "functor" "module_path" "module_application"))) 
 ("_module_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_type_path" "quoted_extension"))) 
 ("_parameter" (:*unnamed* ("abstract_type" "parameter"))) 
 ("_pattern" (:*unnamed* ("constructor_pattern" "cons_pattern" "lazy_pattern" "exception_pattern" "range_pattern" "tag_pattern" "tuple_pattern" "alias_pattern" "or_pattern" "effect_pattern"))) 
 ("_polymorphic_type" (:*unnamed* ("polymorphic_type"))) 
 ("_sequence_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("_signature_item" (:*unnamed* ("module_definition" "include_module_type" "quoted_item_extension" "external" "class_type_definition" "floating_attribute" "open_module" "value_specification" "module_type_definition" "exception_definition" "class_definition" "type_definition" "item_extension"))) 
 ("_signed_constant" (:*unnamed* ("boolean" "unit" "number" "character" "quoted_string" "string" "signed_number"))) 
 ("_simple_class_expression" (:*unnamed* ("typed_class_expression" "instantiated_class" "class_path" "quoted_extension" "object_expression" "parenthesized_class_expression" "extension"))) 
 ("_simple_class_type" (:*unnamed* ("let_open_class_type" "quoted_extension" "class_type_path" "class_body_type" "instantiated_class_type" "extension"))) 
 ("_simple_expression" (:*unnamed* ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("_simple_module_expression" (:*unnamed* ("quoted_extension" "parenthesized_module_expression" "packed_module" "extension" "typed_module_expression"))) 
 ("_simple_pattern" (:*unnamed* ("boolean" "array_pattern" "string" "number" "character" "local_open_pattern" "value_pattern" "package_pattern" "signed_number" "tag" "parenthesized_operator" "unit" "list_pattern" "parenthesized_pattern" "extension" "typed_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "quoted_string" "record_pattern"))) 
 ("_simple_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path"))) 
 ("_structure_item" (:*unnamed* ("module_definition" "quoted_item_extension" "value_definition" "external" "class_type_definition" "floating_attribute" "open_module" "module_type_definition" "exception_definition" "include_module" "class_definition" "type_definition" "item_extension"))) 
 ("_tuple_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "tuple_type"))) 
 ("_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("abstract_type" (:*unnamed* ("type_constructor"))) 
 ("add_operator" (:*unnamed* nil)) 
 ("alias_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "value_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("aliased_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("and_operator" (:*unnamed* nil)) 
 ("application_expression" (:*unnamed* nil :argument ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "labeled_argument" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression") :function ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("array_binding_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("array_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("array_get_expression" (:*unnamed* ("infix_expression" "let_expression" "if_expression" "parenthesized_expression" "object_copy_expression" "match_expression" "bigarray_get_expression" "sequence_expression" "let_module_expression" "unit" "let_open_expression" "application_expression" "array_expression" "method_invocation" "value_path" "extension" "cons_expression" "try_expression" "constructor_path" "quoted_extension" "quoted_string" "set_expression" "function_expression" "assert_expression" "typed_expression" "boolean" "while_expression" "package_expression" "indexing_operator_path" "string" "field_get_expression" "lazy_expression" "number" "character" "string_get_expression" "fun_expression" "new_expression" "hash_expression" "list_expression" "object_expression" "tag" "record_expression" "prefix_expression" "for_expression" "array_get_expression" "local_open_expression" "sign_expression" "ocamlyacc_value" "coercion_expression" "let_exception_expression" "product_expression"))) 
 ("array_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("assert_expression" (:*unnamed* ("boolean" "package_expression" "string" "attribute_id" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("assign_operator" (:*unnamed* nil)) 
 ("attribute" (:*unnamed* ("attribute_payload" "attribute_id"))) 
 ("attribute_id" (:*unnamed* nil)) 
 ("attribute_payload" (:*unnamed* ("polymorphic_variant_type" "class_type_definition" "floating_attribute" "module_type_definition" "tuple_pattern" "exception_definition" "include_module" "or_pattern" "parenthesized_type" "aliased_type" "cons_pattern" "external" "open_module" "extension" "tag_pattern" "package_type" "quoted_extension" "function_type" "hash_type" "local_open_type" "item_extension" "type_variable" "module_definition" "include_module_type" "value_specification" "lazy_pattern" "exception_pattern" "range_pattern" "expression_item" "object_type" "type_constructor_path" "class_definition" "effect_pattern" "guard" "constructed_type" "constructor_pattern" "quoted_item_extension" "value_definition" "alias_pattern" "toplevel_directive" "type_definition" "tuple_type"))) 
 ("bigarray_get_expression" (:*unnamed* ("infix_expression" "let_expression" "if_expression" "parenthesized_expression" "object_copy_expression" "match_expression" "bigarray_get_expression" "sequence_expression" "let_module_expression" "unit" "let_open_expression" "application_expression" "array_expression" "method_invocation" "value_path" "extension" "cons_expression" "try_expression" "constructor_path" "quoted_extension" "quoted_string" "set_expression" "function_expression" "assert_expression" "typed_expression" "boolean" "while_expression" "package_expression" "indexing_operator_path" "string" "field_get_expression" "lazy_expression" "number" "character" "string_get_expression" "fun_expression" "new_expression" "hash_expression" "list_expression" "object_expression" "tag" "record_expression" "prefix_expression" "for_expression" "array_get_expression" "local_open_expression" "sign_expression" "ocamlyacc_value" "coercion_expression" "let_exception_expression" "product_expression"))) 
 ("boolean" (:*unnamed* nil)) 
 ("character" (:*unnamed* ("character_content"))) 
 ("character_content" (:*unnamed* ("escape_sequence"))) 
 ("class_application" (:*unnamed* nil :argument ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "labeled_argument" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression") :class ("typed_class_expression" "instantiated_class" "class_path" "quoted_extension" "object_expression" "parenthesized_class_expression" "extension"))) 
 ("class_binding" (:*unnamed* ("class_function_type" "parameter" "item_attribute" "type_variable" "abstract_type") :body ("let_open_class_expression" "class_function" "let_class_expression" "class_application") :name ("class_name"))) 
 ("class_body_type" (:*unnamed* ("polymorphic_variant_type" "floating_attribute" "method_specification" "hash_type" "object_type" "type_constructor_path" "parenthesized_type" "aliased_type" "instance_variable_specification" "constructed_type" "inheritance_specification" "quoted_item_extension" "type_variable" "extension" "type_parameter_constraint" "package_type" "quoted_extension" "function_type" "local_open_type" "item_extension" "tuple_type"))) 
 ("class_definition" (:*unnamed* ("class_binding" "attribute_id"))) 
 ("class_function" (:*unnamed* ("abstract_type" "parameter") :body ("let_open_class_expression" "class_function" "let_class_expression" "class_application"))) 
 ("class_function_type" (:*unnamed* ("constructed_type" "label_name" "polymorphic_variant_type" "extension" "class_function_type" "package_type" "object_type" "quoted_extension" "hash_type" "parenthesized_type" "type_constructor_path" "type_variable" "local_open_type" "tuple_type"))) 
 ("class_initializer" (:*unnamed* ("infix_expression" "while_expression" "item_attribute" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("class_name" (:*unnamed* nil)) 
 ("class_path" (:*unnamed* ("class_name" "module_path"))) 
 ("class_type_binding" (:*unnamed* ("item_attribute" "type_variable") :body ("let_open_class_type" "quoted_extension" "class_type_path" "class_body_type" "instantiated_class_type" "extension") :name ("class_type_name"))) 
 ("class_type_definition" (:*unnamed* ("class_type_binding" "attribute_id"))) 
 ("class_type_name" (:*unnamed* nil)) 
 ("class_type_path" (:*unnamed* ("extended_module_path" "class_type_name"))) 
 ("coercion_expression" (:*unnamed* ("infix_expression" "polymorphic_variant_type" "let_expression" "if_expression" "match_expression" "parenthesized_type" "sequence_expression" "aliased_type" "let_module_expression" "let_open_expression" "application_expression" "extension" "cons_expression" "package_type" "try_expression" "quoted_extension" "hash_type" "function_type" "local_open_type" "type_variable" "set_expression" "function_expression" "assert_expression" "while_expression" "lazy_expression" "object_type" "type_constructor_path" "fun_expression" "constructed_type" "for_expression" "sign_expression" "let_exception_expression" "product_expression" "tuple_type"))) 
 ("comment" (:*unnamed* nil)) 
 ("compilation_unit" (:*unnamed* ("module_definition" "shebang" "class_type_definition" "floating_attribute" "module_type_definition" "exception_definition" "expression_item" "include_module" "class_definition" "quoted_item_extension" "value_definition" "external" "open_module" "toplevel_directive" "type_definition" "item_extension"))) 
 ("concat_operator" (:*unnamed* nil)) 
 ("cons_expression" (:*unnamed* nil :left ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :right ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("cons_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("constrain_module" (:*unnamed* ("module_path" "extended_module_path"))) 
 ("constrain_module_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_type_path" "quoted_extension"))) 
 ("constrain_type" (:*unnamed* ("constructed_type" "type_constraint" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("constructed_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "extension" "package_type" "hash_type" "object_type" "type_constructor_path" "function_type" "parenthesized_type" "quoted_extension" "type_variable" "aliased_type" "local_open_type" "tuple_type"))) 
 ("constructor_declaration" (:*unnamed* ("constructed_type" "record_declaration" "polymorphic_variant_type" "type_variable" "extension" "package_type" "constructor_path" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "constructor_name"))) 
 ("constructor_name" (:*unnamed* nil)) 
 ("constructor_path" (:*unnamed* ("constructor_name" "module_path"))) 
 ("constructor_pattern" (:*unnamed* ("constructor_pattern" "cons_pattern" "lazy_pattern" "exception_pattern" "range_pattern" "tag_pattern" "tuple_pattern" "alias_pattern" "abstract_type" "constructor_path" "or_pattern" "effect_pattern") :pattern ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("conversion_specification" (:*unnamed* nil)) 
 ("directive" (:*unnamed* nil)) 
 ("do_clause" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("effect_pattern" (:*unnamed* nil :continuation ("boolean" "array_pattern" "string" "number" "character" "local_open_pattern" "value_pattern" "package_pattern" "signed_number" "tag" "parenthesized_operator" "unit" "list_pattern" "parenthesized_pattern" "extension" "typed_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "quoted_string" "record_pattern") :effect ("tag_pattern" "constructor_pattern" "lazy_pattern"))) 
 ("else_clause" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("exception_definition" (:*unnamed* ("item_attribute" "constructor_declaration" "attribute_id"))) 
 ("exception_pattern" (:*unnamed* ("constructor_pattern" "cons_pattern" "lazy_pattern" "exception_pattern" "range_pattern" "tag_pattern" "tuple_pattern" "alias_pattern" "attribute_id" "or_pattern" "effect_pattern"))) 
 ("expression_item" (:*unnamed* ("infix_expression" "while_expression" "item_attribute" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("extended_module_path" (:*unnamed* ("module_name" "extended_module_path"))) 
 ("extension" (:*unnamed* ("attribute_payload" "attribute_id"))) 
 ("external" (:*unnamed* ("value_name" "parenthesized_operator" "string" "item_attribute" "polymorphic_type" "attribute_id"))) 
 ("field_declaration" (:*unnamed* ("field_name" "polymorphic_type"))) 
 ("field_expression" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :name ("field_path"))) 
 ("field_get_expression" (:*unnamed* ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "field_path" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("field_name" (:*unnamed* nil)) 
 ("field_path" (:*unnamed* ("field_name" "module_path"))) 
 ("field_pattern" (:*unnamed* ("polymorphic_variant_type" "lazy_pattern" "exception_pattern" "range_pattern" "tuple_pattern" "hash_type" "object_type" "type_constructor_path" "or_pattern" "parenthesized_type" "effect_pattern" "aliased_type" "constructed_type" "constructor_pattern" "cons_pattern" "field_path" "extension" "tag_pattern" "package_type" "alias_pattern" "quoted_extension" "function_type" "local_open_type" "type_variable" "tuple_type") :pattern ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("floating_attribute" (:*unnamed* ("attribute_payload" "attribute_id"))) 
 ("for_expression" (:*unnamed* ("do_clause" "attribute_id") :from ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :name ("value_pattern" "parenthesized_operator") :to ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("fun_expression" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "extension" "abstract_type" "attribute_id" "package_type" "hash_type" "object_type" "quoted_extension" "parameter" "parenthesized_type" "type_constructor_path" "type_variable" "local_open_type") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("function_expression" (:*unnamed* ("match_case" "attribute_id"))) 
 ("function_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "typed_label" "tuple_type"))) 
 ("functor" (:*unnamed* ("module_parameter") :body ("structure" "functor" "module_path" "module_application"))) 
 ("functor_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_parameter" "module_type_path" "quoted_extension"))) 
 ("guard" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("hash_expression" (:*unnamed* nil :left ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression") :operator ("hash_operator") :right ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("hash_operator" (:*unnamed* nil)) 
 ("hash_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "package_type" "hash_type" "object_type" "type_constructor_path" "function_type" "parenthesized_type" "class_type_path" "quoted_extension" "aliased_type" "local_open_type" "tuple_type"))) 
 ("if_expression" (:*unnamed* ("else_clause" "then_clause" "attribute_id") :condition ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("include_module" (:*unnamed* ("structure" "functor" "item_attribute" "module_path" "module_application" "attribute_id"))) 
 ("include_module_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "item_attribute" "extension" "attribute_id" "signature" "module_type_constraint" "module_type_path" "quoted_extension"))) 
 ("indexing_operator" (:*unnamed* nil)) 
 ("indexing_operator_path" (:*unnamed* ("indexing_operator" "module_path"))) 
 ("infix_expression" (:*unnamed* nil :left ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :operator ("pow_operator" "or_operator" "concat_operator" "rel_operator" "mult_operator" "and_operator" "add_operator" "assign_operator") :right ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("inheritance_definition" (:*unnamed* ("let_class_expression" "class_application" "value_pattern" "class_function" "let_open_class_expression" "item_attribute" "parenthesized_operator"))) 
 ("inheritance_specification" (:*unnamed* ("let_open_class_type" "quoted_extension" "class_type_path" "class_body_type" "item_attribute" "instantiated_class_type" "extension"))) 
 ("instance_variable_definition" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "item_attribute" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :name ("instance_variable_name"))) 
 ("instance_variable_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "instance_variable_name" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("instance_variable_name" (:*unnamed* nil)) 
 ("instance_variable_specification" (:*unnamed* ("polymorphic_variant_type" "item_attribute" "hash_type" "object_type" "type_constructor_path" "parenthesized_type" "aliased_type" "local_open_type" "constructed_type" "extension" "package_type" "quoted_extension" "function_type" "instance_variable_name" "type_variable" "tuple_type"))) 
 ("instantiated_class" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "class_path" "tuple_type"))) 
 ("instantiated_class_type" (:*unnamed* ("constructed_type" "class_type_path" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("item_attribute" (:*unnamed* ("attribute_payload" "attribute_id"))) 
 ("item_extension" (:*unnamed* ("attribute_payload" "item_attribute" "attribute_id"))) 
 ("label_name" (:*unnamed* nil)) 
 ("labeled_argument" (:*unnamed* ("polymorphic_variant_type" "parenthesized_expression" "object_copy_expression" "parenthesized_type" "bigarray_get_expression" "aliased_type" "unit" "array_expression" "value_path" "method_invocation" "extension" "package_type" "constructor_path" "quoted_extension" "function_type" "quoted_string" "hash_type" "type_variable" "local_open_type" "typed_expression" "boolean" "package_expression" "string" "field_get_expression" "number" "character" "string_get_expression" "object_type" "type_constructor_path" "new_expression" "hash_expression" "list_expression" "object_expression" "tag" "constructed_type" "label_name" "record_expression" "prefix_expression" "array_get_expression" "local_open_expression" "ocamlyacc_value" "coercion_expression" "tuple_type"))) 
 ("lazy_expression" (:*unnamed* ("boolean" "package_expression" "string" "attribute_id" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("lazy_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "attribute_id" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("let_and_operator" (:*unnamed* nil)) 
 ("let_binding" (:*unnamed* ("item_attribute" "polymorphic_type" "abstract_type" "parameter") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :pattern ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("let_class_expression" (:*unnamed* ("value_definition") :body ("let_open_class_expression" "class_function" "let_class_expression" "class_application"))) 
 ("let_exception_expression" (:*unnamed* ("exception_definition") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("let_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "value_definition" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("let_module_expression" (:*unnamed* ("module_definition") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("let_open_class_expression" (:*unnamed* ("open_module") :body ("let_open_class_expression" "class_function" "let_class_expression" "class_application"))) 
 ("let_open_class_type" (:*unnamed* ("open_module") :body ("let_open_class_type" "quoted_extension" "class_type_path" "class_body_type" "instantiated_class_type" "extension"))) 
 ("let_open_expression" (:*unnamed* ("open_module") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("let_operator" (:*unnamed* nil)) 
 ("line_number_directive" (:*unnamed* nil)) 
 ("list_binding_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("list_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("list_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("local_open_expression" (:*unnamed* ("infix_expression" "while_expression" "package_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "object_copy_expression" "match_expression" "fun_expression" "list_expression" "sequence_expression" "module_path" "let_module_expression" "record_expression" "for_expression" "let_open_expression" "application_expression" "array_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("local_open_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_binding_pattern" "record_pattern" "module_path"))) 
 ("local_open_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "extended_module_path" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("match_case" (:*unnamed* ("guard") :body ("infix_expression" "while_expression" "refutation_case" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :pattern ("constructor_pattern" "cons_pattern" "lazy_pattern" "exception_pattern" "range_pattern" "tag_pattern" "tuple_pattern" "alias_pattern" "or_pattern" "effect_pattern"))) 
 ("match_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "attribute_id" "match_operator" "lazy_expression" "match_case" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("match_operator" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("item_attribute" "polymorphic_type" "abstract_type" "parameter") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :name ("method_name"))) 
 ("method_invocation" (:*unnamed* ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "method_name" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("method_name" (:*unnamed* nil)) 
 ("method_specification" (:*unnamed* ("item_attribute" "method_name" "polymorphic_type"))) 
 ("method_type" (:*unnamed* ("method_name" "polymorphic_type"))) 
 ("module_application" (:*unnamed* nil :argument ("quoted_extension" "parenthesized_module_expression" "packed_module" "extension" "typed_module_expression") :functor ("structure" "functor" "module_path" "module_application"))) 
 ("module_binding" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "item_attribute" "extension" "signature" "module_type_constraint" "module_parameter" "module_type_path" "quoted_extension") :body ("structure" "functor" "module_path" "module_application") :name ("module_name"))) 
 ("module_definition" (:*unnamed* ("module_binding" "attribute_id"))) 
 ("module_name" (:*unnamed* nil)) 
 ("module_parameter" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_type_path" "quoted_extension") :name ("module_name"))) 
 ("module_path" (:*unnamed* ("module_path" "module_name"))) 
 ("module_type_constraint" (:*unnamed* ("functor_type" "module_type_of" "constrain_module" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "constrain_module_type" "module_type_path" "quoted_extension" "constrain_type"))) 
 ("module_type_definition" (:*unnamed* ("item_attribute" "attribute_id") :body ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_type_path" "quoted_extension") :name ("module_type_name"))) 
 ("module_type_name" (:*unnamed* nil)) 
 ("module_type_of" (:*unnamed* ("structure" "functor" "module_path" "module_application"))) 
 ("module_type_path" (:*unnamed* ("module_type_name" "extended_module_path"))) 
 ("mult_operator" (:*unnamed* nil)) 
 ("new_expression" (:*unnamed* ("class_path" "attribute_id"))) 
 ("number" (:*unnamed* nil)) 
 ("object_copy_expression" (:*unnamed* ("instance_variable_expression"))) 
 ("object_expression" (:*unnamed* ("polymorphic_variant_type" "floating_attribute" "tuple_pattern" "attribute_id" "or_pattern" "parenthesized_type" "aliased_type" "cons_pattern" "instance_variable_definition" "extension" "method_definition" "tag_pattern" "package_type" "class_initializer" "quoted_extension" "hash_type" "function_type" "local_open_type" "type_variable" "item_extension" "inheritance_definition" "lazy_pattern" "exception_pattern" "range_pattern" "object_type" "type_constructor_path" "effect_pattern" "constructed_type" "constructor_pattern" "quoted_item_extension" "type_parameter_constraint" "alias_pattern" "tuple_type"))) 
 ("object_type" (:*unnamed* ("constructed_type" "method_type" "polymorphic_variant_type" "type_variable" "extension" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path"))) 
 ("ocamlyacc_value" (:*unnamed* nil)) 
 ("open_module" (:*unnamed* ("structure" "functor" "item_attribute" "module_path" "module_application" "attribute_id"))) 
 ("or_operator" (:*unnamed* nil)) 
 ("or_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("package_expression" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "functor" "module_application" "extension" "signature" "structure" "module_type_constraint" "attribute_id" "module_type_path" "quoted_extension" "module_path"))) 
 ("package_pattern" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "attribute_id" "signature" "module_type_constraint" "module_name" "module_type_path" "quoted_extension"))) 
 ("package_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "attribute_id" "signature" "module_type_constraint" "module_type_path" "quoted_extension"))) 
 ("packed_module" (:*unnamed* ("functor_type" "module_type_of" "infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "parenthesized_module_type" "extension" "cons_expression" "signature" "sign_expression" "module_type_constraint" "try_expression" "module_type_path" "quoted_extension" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("parameter" (:*unnamed* ("infix_expression" "polymorphic_variant_type" "let_expression" "if_expression" "match_expression" "parenthesized_type" "sequence_expression" "aliased_type" "let_module_expression" "let_open_expression" "application_expression" "extension" "cons_expression" "package_type" "try_expression" "quoted_extension" "hash_type" "function_type" "local_open_type" "type_variable" "set_expression" "function_expression" "assert_expression" "while_expression" "lazy_expression" "object_type" "type_constructor_path" "fun_expression" "constructed_type" "label_name" "for_expression" "sign_expression" "let_exception_expression" "product_expression" "tuple_type") :pattern ("boolean" "array_pattern" "string" "lazy_pattern" "exception_pattern" "range_pattern" "tuple_pattern" "number" "character" "local_open_pattern" "value_pattern" "or_pattern" "package_pattern" "effect_pattern" "signed_number" "tag" "parenthesized_operator" "unit" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "quoted_string" "record_pattern"))) 
 ("parenthesized_class_expression" (:*unnamed* ("let_open_class_expression" "class_function" "let_class_expression" "class_application"))) 
 ("parenthesized_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "attribute_id" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("parenthesized_module_expression" (:*unnamed* ("structure" "functor" "module_path" "module_application"))) 
 ("parenthesized_module_type" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "extension" "signature" "module_type_constraint" "module_type_path" "quoted_extension"))) 
 ("parenthesized_operator" (:*unnamed* ("pow_operator" "let_operator" "let_and_operator" "or_operator" "hash_operator" "indexing_operator" "concat_operator" "match_operator" "rel_operator" "mult_operator" "and_operator" "prefix_operator" "add_operator" "assign_operator"))) 
 ("parenthesized_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("parenthesized_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("polymorphic_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "abstract_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("polymorphic_variant_pattern" (:*unnamed* ("type_constructor_path"))) 
 ("polymorphic_variant_type" (:*unnamed* ("tag_specification" "polymorphic_variant_type" "hash_type" "object_type" "type_constructor_path" "parenthesized_type" "aliased_type" "tag" "constructed_type" "extension" "package_type" "quoted_extension" "function_type" "local_open_type" "type_variable" "tuple_type"))) 
 ("pow_operator" (:*unnamed* nil)) 
 ("prefix_expression" (:*unnamed* nil :operator ("prefix_operator") :right ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("prefix_operator" (:*unnamed* nil)) 
 ("pretty_printing_indication" (:*unnamed* nil)) 
 ("product_expression" (:*unnamed* nil :left ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :right ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("quoted_extension" (:*unnamed* ("attribute_id" "quoted_string_content"))) 
 ("quoted_item_extension" (:*unnamed* ("item_attribute" "attribute_id" "quoted_string_content"))) 
 ("quoted_string" (:*unnamed* ("quoted_string_content"))) 
 ("quoted_string_content" (:*unnamed* ("pretty_printing_indication" "conversion_specification"))) 
 ("range_pattern" (:*unnamed* ("boolean" "unit" "number" "character" "quoted_string" "string" "signed_number"))) 
 ("record_binding_pattern" (:*unnamed* ("field_pattern"))) 
 ("record_declaration" (:*unnamed* ("field_declaration"))) 
 ("record_expression" (:*unnamed* ("boolean" "package_expression" "string" "field_get_expression" "number" "character" "parenthesized_expression" "object_copy_expression" "string_get_expression" "new_expression" "hash_expression" "list_expression" "bigarray_get_expression" "object_expression" "tag" "unit" "record_expression" "prefix_expression" "array_expression" "field_expression" "array_get_expression" "method_invocation" "value_path" "extension" "local_open_expression" "constructor_path" "ocamlyacc_value" "coercion_expression" "quoted_string" "quoted_extension" "typed_expression"))) 
 ("record_pattern" (:*unnamed* ("field_pattern"))) 
 ("refutation_case" (:*unnamed* nil)) 
 ("rel_operator" (:*unnamed* nil)) 
 ("sequence_expression" (:*unnamed* ("attribute_id") :left ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression") :right ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("set_expression" (:*unnamed* ("string_get_expression" "instance_variable_name" "array_get_expression" "bigarray_get_expression" "field_get_expression") :body ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("shebang" (:*unnamed* nil)) 
 ("sign_expression" (:*unnamed* nil :operator ("sign_operator") :right ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("sign_operator" (:*unnamed* nil)) 
 ("signature" (:*unnamed* ("module_definition" "include_module_type" "quoted_item_extension" "external" "class_type_definition" "floating_attribute" "open_module" "value_specification" "module_type_definition" "exception_definition" "class_definition" "type_definition" "item_extension"))) 
 ("signed_number" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence" "pretty_printing_indication" "conversion_specification"))) 
 ("string_get_expression" (:*unnamed* ("infix_expression" "let_expression" "if_expression" "parenthesized_expression" "object_copy_expression" "match_expression" "bigarray_get_expression" "sequence_expression" "let_module_expression" "unit" "let_open_expression" "application_expression" "array_expression" "method_invocation" "value_path" "extension" "cons_expression" "try_expression" "constructor_path" "quoted_extension" "quoted_string" "set_expression" "function_expression" "assert_expression" "typed_expression" "boolean" "while_expression" "package_expression" "indexing_operator_path" "string" "field_get_expression" "lazy_expression" "number" "character" "string_get_expression" "fun_expression" "new_expression" "hash_expression" "list_expression" "object_expression" "tag" "record_expression" "prefix_expression" "for_expression" "array_get_expression" "local_open_expression" "sign_expression" "ocamlyacc_value" "coercion_expression" "let_exception_expression" "product_expression"))) 
 ("structure" (:*unnamed* ("module_definition" "quoted_item_extension" "value_definition" "external" "class_type_definition" "floating_attribute" "open_module" "module_type_definition" "exception_definition" "expression_item" "toplevel_directive" "include_module" "class_definition" "type_definition" "item_extension"))) 
 ("tag" (:*unnamed* nil)) 
 ("tag_pattern" (:*unnamed* ("constructor_pattern" "cons_pattern" "lazy_pattern" "exception_pattern" "range_pattern" "tag_pattern" "tuple_pattern" "alias_pattern" "or_pattern" "effect_pattern" "tag") :pattern ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("tag_specification" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tag" "tuple_type"))) 
 ("then_clause" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("toplevel_directive" (:*unnamed* ("boolean" "unit" "string" "value_path" "number" "character" "directive" "quoted_string" "module_path"))) 
 ("try_expression" (:*unnamed* ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "attribute_id" "lazy_expression" "match_case" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
 ("tuple_pattern" (:*unnamed* ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "exception_pattern" "local_open_pattern" "or_pattern" "package_pattern" "effect_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("tuple_type" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "tuple_type"))) 
 ("type_binding" (:*unnamed* ("type_constraint" "polymorphic_variant_type" "item_attribute" "hash_type" "object_type" "type_constructor_path" "parenthesized_type" "aliased_type" "constructed_type" "extension" "package_type" "quoted_extension" "function_type" "local_open_type" "type_variable" "tuple_type") :body ("record_declaration" "variant_declaration") :name ("type_constructor_path" "type_constructor"))) 
 ("type_constraint" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("type_constructor" (:*unnamed* nil)) 
 ("type_constructor_path" (:*unnamed* ("type_constructor" "extended_module_path"))) 
 ("type_definition" (:*unnamed* ("type_binding" "attribute_id"))) 
 ("type_parameter_constraint" (:*unnamed* ("constructed_type" "polymorphic_variant_type" "item_attribute" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("type_variable" (:*unnamed* nil)) 
 ("typed_class_expression" (:*unnamed* ("let_class_expression" "class_application" "class_function" "let_open_class_expression" "class_function_type"))) 
 ("typed_expression" (:*unnamed* ("infix_expression" "polymorphic_variant_type" "let_expression" "if_expression" "match_expression" "parenthesized_type" "sequence_expression" "aliased_type" "let_module_expression" "let_open_expression" "application_expression" "extension" "cons_expression" "package_type" "try_expression" "quoted_extension" "hash_type" "function_type" "local_open_type" "type_variable" "set_expression" "function_expression" "assert_expression" "while_expression" "lazy_expression" "object_type" "type_constructor_path" "fun_expression" "constructed_type" "for_expression" "sign_expression" "let_exception_expression" "product_expression" "tuple_type"))) 
 ("typed_label" (:*unnamed* ("constructed_type" "label_name" "polymorphic_variant_type" "type_variable" "extension" "function_type" "package_type" "object_type" "parenthesized_type" "hash_type" "local_open_type" "quoted_extension" "type_constructor_path" "aliased_type" "tuple_type"))) 
 ("typed_module_expression" (:*unnamed* ("functor_type" "module_type_of" "parenthesized_module_type" "functor" "module_application" "extension" "signature" "structure" "module_type_constraint" "module_type_path" "quoted_extension" "module_path"))) 
 ("typed_pattern" (:*unnamed* ("polymorphic_variant_type" "lazy_pattern" "exception_pattern" "range_pattern" "tuple_pattern" "hash_type" "object_type" "type_constructor_path" "or_pattern" "parenthesized_type" "effect_pattern" "aliased_type" "constructed_type" "constructor_pattern" "cons_pattern" "extension" "tag_pattern" "package_type" "alias_pattern" "quoted_extension" "function_type" "local_open_type" "type_variable" "tuple_type") :pattern ("array_pattern" "lazy_pattern" "tuple_pattern" "range_pattern" "local_open_pattern" "or_pattern" "package_pattern" "tag" "parenthesized_operator" "constructor_pattern" "cons_pattern" "list_pattern" "parenthesized_pattern" "extension" "value_name" "tag_pattern" "typed_pattern" "alias_pattern" "constructor_path" "quoted_extension" "polymorphic_variant_pattern" "record_pattern"))) 
 ("unit" (:*unnamed* nil)) 
 ("value_definition" (:*unnamed* ("let_binding" "let_and_operator" "let_operator" "attribute_id"))) 
 ("value_name" (:*unnamed* nil)) 
 ("value_path" (:*unnamed* ("value_name" "module_path" "parenthesized_operator"))) 
 ("value_pattern" (:*unnamed* nil)) 
 ("value_specification" (:*unnamed* ("polymorphic_type" "parenthesized_operator" "item_attribute" "value_name" "attribute_id"))) 
 ("variant_declaration" (:*unnamed* ("constructor_declaration"))) 
 ("while_expression" (:*unnamed* ("do_clause" "attribute_id") :condition ("infix_expression" "while_expression" "let_expression" "if_expression" "product_expression" "lazy_expression" "match_expression" "fun_expression" "sequence_expression" "let_module_expression" "for_expression" "let_open_expression" "application_expression" "cons_expression" "sign_expression" "try_expression" "set_expression" "let_exception_expression" "function_expression" "assert_expression"))) 
))
;; END Production rules for ocaml
;; START Inverse production rules for ocaml
(defconst combobulate-rules-ocaml-inverse 
 '(("abstract_type" ("_parameter" "class_binding" "constructor_pattern" "class_function" "polymorphic_type" "method_definition" "let_binding" "fun_expression"))
   ("add_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("alias_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("aliased_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parenthesized_type" "constrain_type" "coercion_expression" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "local_open_type" "labeled_argument" "type_binding" "typed_expression" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "type_parameter_constraint" "typed_pattern" "parameter"))
   ("and_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("application_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("array_binding_pattern" ("local_open_pattern"))
   ("array_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "local_open_expression" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("array_get_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "set_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("array_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("assert_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("assign_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("attribute_id" ("class_type_definition" "floating_attribute" "item_attribute" "module_type_definition" "if_expression" "exception_definition" "parenthesized_expression" "include_module" "match_expression" "package_pattern" "sequence_expression" "external" "open_module" "extension" "package_type" "try_expression" "quoted_extension" "item_extension" "function_expression" "assert_expression" "module_definition" "include_module_type" "while_expression" "package_expression" "value_specification" "lazy_pattern" "exception_pattern" "lazy_expression" "fun_expression" "class_definition" "new_expression" "object_expression" "quoted_item_extension" "value_definition" "attribute" "for_expression" "type_definition"))
   ("attribute_payload" ("floating_attribute" "attribute" "item_attribute" "extension" "item_extension"))
   ("bigarray_get_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "set_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("boolean" ("class_application" "bigarray_get_expression" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("character" ("class_application" "bigarray_get_expression" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("character_content" ("character"))
   ("class_application" ("class_binding" "_class_expression" "class_function" "let_class_expression" "let_open_class_expression" "typed_class_expression" "parenthesized_class_expression" "inheritance_definition"))
   ("class_binding" ("class_definition"))
   ("class_body_type" ("class_type_binding" "let_open_class_type" "inheritance_specification" "_simple_class_type"))
   ("class_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("class_function" ("class_binding" "_class_expression" "class_function" "let_class_expression" "let_open_class_expression" "typed_class_expression" "parenthesized_class_expression" "inheritance_definition"))
   ("class_function_type" ("typed_class_expression" "_class_type" "class_binding" "class_function_type"))
   ("class_initializer" ("object_expression" "_class_field"))
   ("class_name" ("class_binding" "class_path"))
   ("class_path" ("instantiated_class" "class_application" "_simple_class_expression" "new_expression"))
   ("class_type_binding" ("class_type_definition"))
   ("class_type_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("class_type_name" ("class_type_binding" "class_type_path"))
   ("class_type_path" ("inheritance_specification" "let_open_class_type" "instantiated_class_type" "_simple_class_type" "hash_type" "class_type_binding"))
   ("coercion_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("concat_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("cons_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("cons_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("constrain_module" ("module_type_constraint"))
   ("constrain_module_type" ("module_type_constraint"))
   ("constrain_type" ("module_type_constraint"))
   ("constructed_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("constructor_declaration" ("variant_declaration" "exception_definition"))
   ("constructor_name" ("constructor_path" "constructor_declaration"))
   ("constructor_path" ("array_pattern" "class_application" "tuple_pattern" "or_pattern" "bigarray_get_expression" "cons_pattern" "application_expression" "method_invocation" "parenthesized_pattern" "tag_pattern" "let_binding" "labeled_argument" "constructor_declaration" "assert_expression" "field_pattern" "_binding_pattern" "lazy_pattern" "field_get_expression" "lazy_expression" "local_open_pattern" "string_get_expression" "array_binding_pattern" "list_binding_pattern" "hash_expression" "effect_pattern" "constructor_pattern" "_simple_expression" "prefix_expression" "record_expression" "list_pattern" "array_get_expression" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("constructor_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "_effect_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "effect_pattern" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("conversion_specification" ("string_content" "quoted_string_content"))
   ("directive" ("toplevel_directive"))
   ("do_clause" ("while_expression" "for_expression"))
   ("effect_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "field_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("else_clause" ("if_expression"))
   ("escape_sequence" ("string_content" "character_content"))
   ("exception_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure" "let_exception_expression"))
   ("exception_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "field_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("expression_item" ("structure" "compilation_unit" "attribute_payload"))
   ("extended_module_path" ("constrain_module" "module_type_path" "type_constructor_path" "extended_module_path" "local_open_type" "class_type_path"))
   ("extension" ("functor_type" "module_application" "module_binding" "packed_module" "module_parameter" "labeled_argument" "_type" "local_open_pattern" "instantiated_class" "list_binding_pattern" "fun_expression" "typed_label" "_module_type" "constructed_type" "record_expression" "prefix_expression" "list_pattern" "class_function_type" "tuple_type" "tag_specification" "type_constraint" "aliased_type" "inheritance_specification" "parenthesized_module_type" "method_invocation" "parenthesized_pattern" "tag_pattern" "let_binding" "function_type" "local_open_type" "_binding_pattern" "lazy_pattern" "array_binding_pattern" "object_type" "instance_variable_specification" "constructor_pattern" "typed_pattern" "coercion_expression" "array_pattern" "class_application" "_simple_module_expression" "tuple_pattern" "package_pattern" "constrain_type" "bigarray_get_expression" "cons_pattern" "application_expression" "instantiated_class_type" "_tuple_type" "class_type_binding" "constructor_declaration" "assert_expression" "typed_expression" "include_module_type" "field_get_expression" "effect_pattern" "object_expression" "_simple_expression" "let_open_class_type" "field_expression" "array_get_expression" "attribute_payload" "module_type_constraint" "_simple_class_type" "parameter" "_simple_type" "polymorphic_variant_type" "_simple_class_expression" "module_type_definition" "constrain_module_type" "or_pattern" "parenthesized_type" "instance_variable_definition" "package_type" "hash_type" "type_binding" "field_pattern" "package_expression" "polymorphic_type" "lazy_expression" "string_get_expression" "hash_expression" "class_body_type" "_simple_pattern" "type_parameter_constraint" "typed_module_expression" "alias_pattern"))
   ("external" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("field_declaration" ("record_declaration"))
   ("field_expression" ("record_expression"))
   ("field_get_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "set_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("field_name" ("field_declaration" "field_path"))
   ("field_path" ("field_expression" "field_pattern" "field_get_expression"))
   ("field_pattern" ("record_binding_pattern" "record_pattern"))
   ("floating_attribute" ("_signature_item" "class_body_type" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure" "object_expression"))
   ("for_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("fun_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("function_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("function_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parenthesized_type" "constrain_type" "coercion_expression" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "local_open_type" "labeled_argument" "type_binding" "typed_expression" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "type_parameter_constraint" "typed_pattern" "parameter"))
   ("functor" ("module_type_of" "package_expression" "open_module" "functor" "module_application" "typed_module_expression" "_module_expression" "module_binding" "include_module" "parenthesized_module_expression"))
   ("functor_type" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("guard" ("match_case" "attribute_payload"))
   ("hash_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("hash_operator" ("hash_expression" "parenthesized_operator"))
   ("hash_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("if_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("include_module" ("structure" "compilation_unit" "_structure_item" "attribute_payload"))
   ("include_module_type" ("_signature_item" "attribute_payload" "signature"))
   ("indexing_operator" ("parenthesized_operator" "indexing_operator_path"))
   ("indexing_operator_path" ("array_get_expression" "bigarray_get_expression" "string_get_expression"))
   ("infix_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("inheritance_definition" ("object_expression" "_class_field"))
   ("inheritance_specification" ("_class_field_specification" "class_body_type"))
   ("instance_variable_definition" ("object_expression" "_class_field"))
   ("instance_variable_expression" ("object_copy_expression"))
   ("instance_variable_name" ("instance_variable_specification" "set_expression" "instance_variable_definition" "instance_variable_expression"))
   ("instance_variable_specification" ("_class_field_specification" "class_body_type"))
   ("instantiated_class" ("class_application" "_simple_class_expression"))
   ("instantiated_class_type" ("class_type_binding" "let_open_class_type" "inheritance_specification" "_simple_class_type"))
   ("item_attribute" ("module_type_definition" "exception_definition" "method_specification" "module_binding" "include_module" "class_binding" "inheritance_specification" "external" "open_module" "instance_variable_definition" "method_definition" "let_binding" "class_initializer" "class_type_binding" "type_binding" "item_extension" "inheritance_definition" "include_module_type" "value_specification" "expression_item" "instance_variable_specification" "quoted_item_extension" "type_parameter_constraint"))
   ("item_extension" ("_class_field_specification" "_class_field" "_signature_item" "class_body_type" "_structure_item" "attribute_payload" "compilation_unit" "signature" "structure" "object_expression"))
   ("label_name" ("labeled_argument" "typed_label" "class_function_type" "parameter"))
   ("labeled_argument" ("application_expression" "class_application"))
   ("lazy_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("lazy_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "_effect_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "effect_pattern" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("let_and_operator" ("value_definition" "parenthesized_operator"))
   ("let_binding" ("value_definition"))
   ("let_class_expression" ("class_binding" "_class_expression" "class_function" "let_class_expression" "let_open_class_expression" "typed_class_expression" "parenthesized_class_expression" "inheritance_definition"))
   ("let_exception_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("let_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("let_module_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("let_open_class_expression" ("class_binding" "_class_expression" "class_function" "let_class_expression" "let_open_class_expression" "typed_class_expression" "parenthesized_class_expression" "inheritance_definition"))
   ("let_open_class_type" ("class_type_binding" "let_open_class_type" "inheritance_specification" "_simple_class_type"))
   ("let_open_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("let_operator" ("value_definition" "parenthesized_operator"))
   ("list_binding_pattern" ("local_open_pattern"))
   ("list_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "local_open_expression" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("list_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("local_open_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("local_open_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("local_open_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("match_case" ("try_expression" "function_expression" "match_expression"))
   ("match_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("match_operator" ("parenthesized_operator" "match_expression"))
   ("method_definition" ("object_expression" "_class_field"))
   ("method_invocation" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("method_name" ("method_definition" "method_specification" "method_invocation" "method_type"))
   ("method_specification" ("_class_field_specification" "class_body_type"))
   ("method_type" ("object_type"))
   ("module_application" ("module_type_of" "package_expression" "open_module" "functor" "module_application" "typed_module_expression" "_module_expression" "module_binding" "include_module" "parenthesized_module_expression"))
   ("module_binding" ("module_definition"))
   ("module_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure" "let_module_expression"))
   ("module_name" ("module_binding" "module_parameter" "extended_module_path" "package_pattern" "module_path"))
   ("module_parameter" ("functor_type" "functor" "module_binding"))
   ("module_path" ("module_application" "module_binding" "include_module" "field_path" "open_module" "functor" "value_path" "constructor_path" "parenthesized_module_expression" "constrain_module" "module_type_of" "package_expression" "indexing_operator_path" "local_open_pattern" "class_path" "local_open_expression" "typed_module_expression" "_module_expression" "toplevel_directive" "module_path"))
   ("module_type_constraint" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("module_type_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("module_type_name" ("module_type_definition" "module_type_path"))
   ("module_type_of" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("module_type_path" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("mult_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("new_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("number" ("class_application" "bigarray_get_expression" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("object_copy_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "local_open_expression" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("object_expression" ("_simple_expression" "prefix_expression" "class_application" "_simple_class_expression" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("object_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("ocamlyacc_value" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("open_module" ("let_open_class_type" "let_open_expression" "_signature_item" "let_open_class_expression" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("or_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("or_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("package_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "local_open_expression" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("package_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("package_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("packed_module" ("module_application" "_simple_module_expression"))
   ("parameter" ("_parameter" "class_binding" "class_function" "method_definition" "let_binding" "fun_expression"))
   ("parenthesized_class_expression" ("class_application" "_simple_class_expression"))
   ("parenthesized_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("parenthesized_module_expression" ("module_application" "_simple_module_expression"))
   ("parenthesized_module_type" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("parenthesized_operator" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "external" "value_path" "parenthesized_pattern" "tag_pattern" "let_binding" "inheritance_definition" "field_pattern" "_binding_pattern" "value_specification" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "for_expression" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("parenthesized_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("parenthesized_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("polymorphic_type" ("method_type" "external" "value_specification" "_polymorphic_type" "method_definition" "let_binding" "method_specification" "field_declaration"))
   ("polymorphic_variant_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("polymorphic_variant_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "type_binding" "typed_expression" "_simple_type" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("pow_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("prefix_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("prefix_operator" ("prefix_expression" "parenthesized_operator"))
   ("pretty_printing_indication" ("string_content" "quoted_string_content"))
   ("product_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("quoted_extension" ("functor_type" "module_application" "module_binding" "packed_module" "module_parameter" "labeled_argument" "_type" "local_open_pattern" "instantiated_class" "list_binding_pattern" "fun_expression" "typed_label" "_module_type" "constructed_type" "record_expression" "prefix_expression" "list_pattern" "class_function_type" "tuple_type" "tag_specification" "type_constraint" "aliased_type" "inheritance_specification" "parenthesized_module_type" "method_invocation" "parenthesized_pattern" "tag_pattern" "let_binding" "function_type" "local_open_type" "_binding_pattern" "lazy_pattern" "array_binding_pattern" "object_type" "instance_variable_specification" "constructor_pattern" "typed_pattern" "coercion_expression" "array_pattern" "class_application" "_simple_module_expression" "tuple_pattern" "package_pattern" "constrain_type" "bigarray_get_expression" "cons_pattern" "application_expression" "instantiated_class_type" "_tuple_type" "class_type_binding" "constructor_declaration" "assert_expression" "typed_expression" "include_module_type" "field_get_expression" "effect_pattern" "object_expression" "_simple_expression" "let_open_class_type" "field_expression" "array_get_expression" "attribute_payload" "module_type_constraint" "_simple_class_type" "parameter" "_simple_type" "polymorphic_variant_type" "_simple_class_expression" "module_type_definition" "constrain_module_type" "or_pattern" "parenthesized_type" "instance_variable_definition" "package_type" "hash_type" "type_binding" "field_pattern" "package_expression" "polymorphic_type" "lazy_expression" "string_get_expression" "hash_expression" "class_body_type" "_simple_pattern" "type_parameter_constraint" "typed_module_expression" "alias_pattern"))
   ("quoted_item_extension" ("_class_field_specification" "_class_field" "_signature_item" "class_body_type" "_structure_item" "attribute_payload" "compilation_unit" "signature" "structure" "object_expression"))
   ("quoted_string" ("class_application" "bigarray_get_expression" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("quoted_string_content" ("quoted_string" "quoted_item_extension" "quoted_extension"))
   ("range_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("record_binding_pattern" ("local_open_pattern"))
   ("record_declaration" ("type_binding" "constructor_declaration"))
   ("record_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "local_open_expression" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("record_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("refutation_case" ("match_case"))
   ("rel_operator" ("_infix_operator" "infix_expression" "parenthesized_operator"))
   ("sequence_expression" ("_sequence_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "sequence_expression" "let_module_expression" "let_open_expression" "instance_variable_definition" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "guard" "for_expression" "array_get_expression" "local_open_expression" "coercion_expression" "let_exception_expression"))
   ("set_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("shebang" ("compilation_unit"))
   ("sign_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("sign_operator" ("sign_expression"))
   ("signature" ("_module_type" "functor_type" "include_module_type" "package_expression" "parenthesized_module_type" "module_type_definition" "typed_module_expression" "constrain_module_type" "module_type_constraint" "package_type" "module_binding" "module_parameter" "package_pattern" "packed_module"))
   ("signed_number" ("_signed_constant" "_simple_pattern" "range_pattern" "parameter" "effect_pattern"))
   ("string" ("class_application" "bigarray_get_expression" "external" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("string_content" ("string"))
   ("string_get_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "set_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("structure" ("module_type_of" "package_expression" "open_module" "functor" "module_application" "typed_module_expression" "_module_expression" "module_binding" "include_module" "parenthesized_module_expression"))
   ("tag" ("tag_specification" "array_pattern" "class_application" "polymorphic_variant_type" "tuple_pattern" "or_pattern" "bigarray_get_expression" "cons_pattern" "application_expression" "method_invocation" "parenthesized_pattern" "tag_pattern" "let_binding" "labeled_argument" "assert_expression" "field_pattern" "_binding_pattern" "lazy_pattern" "field_get_expression" "lazy_expression" "local_open_pattern" "string_get_expression" "array_binding_pattern" "list_binding_pattern" "hash_expression" "effect_pattern" "constructor_pattern" "_simple_expression" "prefix_expression" "record_expression" "list_pattern" "array_get_expression" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("tag_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "_effect_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "effect_pattern" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("tag_specification" ("polymorphic_variant_type"))
   ("then_clause" ("if_expression"))
   ("toplevel_directive" ("structure" "compilation_unit" "attribute_payload"))
   ("try_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
   ("tuple_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "exception_pattern" "match_case" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "object_expression" "constructor_pattern" "list_pattern" "attribute_payload" "typed_pattern" "alias_pattern" "parameter"))
   ("tuple_type" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "local_open_type" "labeled_argument" "type_binding" "typed_expression" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("type_binding" ("type_definition"))
   ("type_constraint" ("constrain_type" "type_binding"))
   ("type_constructor" ("type_binding" "type_constructor_path" "abstract_type"))
   ("type_constructor_path" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "labeled_argument" "constructor_declaration" "local_open_type" "polymorphic_variant_pattern" "type_binding" "_simple_type" "typed_expression" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("type_definition" ("_signature_item" "_structure_item" "compilation_unit" "attribute_payload" "signature" "structure"))
   ("type_parameter_constraint" ("object_expression" "_class_field_specification" "_class_field" "class_body_type"))
   ("type_variable" ("tag_specification" "type_constraint" "polymorphic_variant_type" "parameter" "parenthesized_type" "constrain_type" "aliased_type" "class_binding" "instance_variable_definition" "instantiated_class_type" "function_type" "hash_type" "_tuple_type" "class_type_binding" "constructor_declaration" "labeled_argument" "local_open_type" "type_binding" "_simple_type" "typed_expression" "field_pattern" "_type" "polymorphic_type" "instantiated_class" "object_type" "fun_expression" "object_expression" "typed_label" "constructed_type" "instance_variable_specification" "field_expression" "class_body_type" "attribute_payload" "class_function_type" "type_parameter_constraint" "typed_pattern" "coercion_expression" "tuple_type"))
   ("typed_class_expression" ("class_application" "_simple_class_expression"))
   ("typed_expression" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("typed_label" ("function_type"))
   ("typed_module_expression" ("module_application" "_simple_module_expression"))
   ("typed_pattern" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "effect_pattern" "constructor_pattern" "list_pattern" "_simple_pattern" "typed_pattern" "alias_pattern" "parameter"))
   ("unit" ("class_application" "bigarray_get_expression" "application_expression" "method_invocation" "labeled_argument" "assert_expression" "_signed_constant" "range_pattern" "field_get_expression" "lazy_expression" "string_get_expression" "hash_expression" "effect_pattern" "_simple_expression" "prefix_expression" "record_expression" "array_get_expression" "_simple_pattern" "toplevel_directive" "parameter" "_constant"))
   ("value_definition" ("let_class_expression" "let_expression" "_structure_item" "compilation_unit" "attribute_payload" "structure"))
   ("value_name" ("array_pattern" "tuple_pattern" "or_pattern" "cons_pattern" "external" "value_path" "parenthesized_pattern" "tag_pattern" "let_binding" "field_pattern" "_binding_pattern" "value_specification" "lazy_pattern" "local_open_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "list_pattern" "typed_pattern" "alias_pattern"))
   ("value_path" ("_simple_expression" "prefix_expression" "class_application" "record_expression" "application_expression" "array_get_expression" "method_invocation" "field_get_expression" "lazy_expression" "toplevel_directive" "string_get_expression" "hash_expression" "labeled_argument" "bigarray_get_expression" "assert_expression"))
   ("value_pattern" ("for_expression" "_simple_pattern" "alias_pattern" "parameter" "effect_pattern" "inheritance_definition"))
   ("value_specification" ("_signature_item" "attribute_payload" "signature"))
   ("variant_declaration" ("type_binding"))
   ("while_expression" ("_sequence_expression" "infix_expression" "let_expression" "if_expression" "parameter" "parenthesized_expression" "match_expression" "bigarray_get_expression" "packed_module" "sequence_expression" "let_module_expression" "array_expression" "let_open_expression" "instance_variable_definition" "cons_expression" "method_definition" "let_binding" "class_initializer" "try_expression" "do_clause" "else_clause" "_expression" "set_expression" "then_clause" "typed_expression" "while_expression" "expression_item" "match_case" "string_get_expression" "fun_expression" "list_expression" "guard" "for_expression" "field_expression" "array_get_expression" "local_open_expression" "sign_expression" "instance_variable_expression" "coercion_expression" "let_exception_expression" "product_expression"))
  ) 
)
;; END Inverse production rules for ocaml
;; START All node types in ocaml
(defconst combobulate-rules-ocaml-types 
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type" "abstract_type" "add_operator" "alias_pattern" "aliased_type" "and_operator" "application_expression" "array_binding_pattern" "array_expression" "array_get_expression" "array_pattern" "assert_expression" "assign_operator" "attribute" "attribute_id" "attribute_payload" "bigarray_get_expression" "boolean" "character" "character_content" "class_application" "class_binding" "class_body_type" "class_definition" "class_function" "class_function_type" "class_initializer" "class_name" "class_path" "class_type_binding" "class_type_definition" "class_type_name" "class_type_path" "coercion_expression" "comment" "compilation_unit" "concat_operator" "cons_expression" "cons_pattern" "constrain_module" "constrain_module_type" "constrain_type" "constructed_type" "constructor_declaration" "constructor_name" "constructor_path" "constructor_pattern" "conversion_specification" "directive" "do_clause" "effect_pattern" "else_clause" "escape_sequence" "exception_definition" "exception_pattern" "expression_item" "extended_module_path" "extension" "external" "field_declaration" "field_expression" "field_get_expression" "field_name" "field_path" "field_pattern" "floating_attribute" "for_expression" "fun_expression" "function_expression" "function_type" "functor" "functor_type" "guard" "hash_expression" "hash_operator" "hash_type" "if_expression" "include_module" "include_module_type" "indexing_operator" "indexing_operator_path" "infix_expression" "inheritance_definition" "inheritance_specification" "instance_variable_definition" "instance_variable_expression" "instance_variable_name" "instance_variable_specification" "instantiated_class" "instantiated_class_type" "item_attribute" "item_extension" "label_name" "labeled_argument" "lazy_expression" "lazy_pattern" "let_and_operator" "let_binding" "let_class_expression" "let_exception_expression" "let_expression" "let_module_expression" "let_open_class_expression" "let_open_class_type" "let_open_expression" "let_operator" "line_number_directive" "list_binding_pattern" "list_expression" "list_pattern" "local_open_expression" "local_open_pattern" "local_open_type" "match_case" "match_expression" "match_operator" "method_definition" "method_invocation" "method_name" "method_specification" "method_type" "module_application" "module_binding" "module_definition" "module_name" "module_parameter" "module_path" "module_type_constraint" "module_type_definition" "module_type_name" "module_type_of" "module_type_path" "mult_operator" "new_expression" "number" "object_copy_expression" "object_expression" "object_type" "ocamlyacc_value" "open_module" "or_operator" "or_pattern" "package_expression" "package_pattern" "package_type" "packed_module" "parameter" "parenthesized_class_expression" "parenthesized_expression" "parenthesized_module_expression" "parenthesized_module_type" "parenthesized_operator" "parenthesized_pattern" "parenthesized_type" "polymorphic_type" "polymorphic_variant_pattern" "polymorphic_variant_type" "pow_operator" "prefix_expression" "prefix_operator" "pretty_printing_indication" "product_expression" "quoted_extension" "quoted_item_extension" "quoted_string" "quoted_string_content" "range_pattern" "record_binding_pattern" "record_declaration" "record_expression" "record_pattern" "refutation_case" "rel_operator" "sequence_expression" "set_expression" "shebang" "sign_expression" "sign_operator" "signature" "signed_number" "string" "string_content" "string_get_expression" "structure" "tag" "tag_pattern" "tag_specification" "then_clause" "toplevel_directive" "try_expression" "tuple_pattern" "tuple_type" "type_binding" "type_constraint" "type_constructor" "type_constructor_path" "type_definition" "type_parameter_constraint" "type_variable" "typed_class_expression" "typed_expression" "typed_label" "typed_module_expression" "typed_pattern" "unit" "value_definition" "value_name" "value_path" "value_pattern" "value_specification" "variant_declaration" "while_expression") 
)
;; END All node types in ocaml
;; START All supertypes in ocaml
(defconst combobulate-rules-ocaml-supertypes 
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type") 
)
;; END All supertypes in ocaml

;; START Auto-generated list of all languages
(defconst combobulate-rules-languages 
 '(c css go html javascript json ocaml python toml tsx typescript yaml) 
 "A list of all the languages that have production rules.")
;; END Auto-generated list of all languages
(defconst combobulate-rules-alist 
 `((c ,combobulate-rules-c)
 (css ,combobulate-rules-css)
 (go ,combobulate-rules-go)
 (html ,combobulate-rules-html)
 (javascript ,combobulate-rules-javascript)
 (json ,combobulate-rules-json)
 (ocaml ,combobulate-rules-ocaml)
 (python ,combobulate-rules-python)
 (toml ,combobulate-rules-toml)
 (tsx ,combobulate-rules-tsx)
 (typescript ,combobulate-rules-typescript)
 (yaml ,combobulate-rules-yaml)
))

(defconst combobulate-rules-inverse-alist 
 `((c ,combobulate-rules-c-inverse)
 (css ,combobulate-rules-css-inverse)
 (go ,combobulate-rules-go-inverse)
 (html ,combobulate-rules-html-inverse)
 (javascript ,combobulate-rules-javascript-inverse)
 (json ,combobulate-rules-json-inverse)
 (ocaml ,combobulate-rules-ocaml-inverse)
 (python ,combobulate-rules-python-inverse)
 (toml ,combobulate-rules-toml-inverse)
 (tsx ,combobulate-rules-tsx-inverse)
 (typescript ,combobulate-rules-typescript-inverse)
 (yaml ,combobulate-rules-yaml-inverse)
))

(defconst combobulate-rules-types-alist 
 `((c ,combobulate-rules-c-types)
 (css ,combobulate-rules-css-types)
 (go ,combobulate-rules-go-types)
 (html ,combobulate-rules-html-types)
 (javascript ,combobulate-rules-javascript-types)
 (json ,combobulate-rules-json-types)
 (ocaml ,combobulate-rules-ocaml-types)
 (python ,combobulate-rules-python-types)
 (toml ,combobulate-rules-toml-types)
 (tsx ,combobulate-rules-tsx-types)
 (typescript ,combobulate-rules-typescript-types)
 (yaml ,combobulate-rules-yaml-types)
))

(defconst combobulate-rules-supertypes-alist 
 `((c ,combobulate-rules-c-supertypes)
 (css ,combobulate-rules-css-supertypes)
 (go ,combobulate-rules-go-supertypes)
 (html ,combobulate-rules-html-supertypes)
 (javascript ,combobulate-rules-javascript-supertypes)
 (json ,combobulate-rules-json-supertypes)
 (ocaml ,combobulate-rules-ocaml-supertypes)
 (python ,combobulate-rules-python-supertypes)
 (toml ,combobulate-rules-toml-supertypes)
 (tsx ,combobulate-rules-tsx-supertypes)
 (typescript ,combobulate-rules-typescript-supertypes)
 (yaml ,combobulate-rules-yaml-supertypes)
))

(provide 'combobulate-rules)
