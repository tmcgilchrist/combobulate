;; -*- lexical-binding: t -*-
;; This file is generated by build-relationships.py
;; Do not edit this file directly.

;; START Production rules for yaml
(defconst combobulate-rules-yaml
 '(("alias" (:*unnamed* ("alias_name")))
 ("alias_name" (:*unnamed* nil))
 ("anchor" (:*unnamed* ("anchor_name")))
 ("anchor_name" (:*unnamed* nil))
 ("block_mapping" (:*unnamed* ("block_mapping_pair")))
 ("block_mapping_pair" (:*unnamed* nil :key ("flow_node" "block_node") :value ("flow_node" "block_node")))
 ("block_node" (:*unnamed* ("block_sequence" "block_scalar" "block_mapping" "anchor" "tag")))
 ("block_scalar" (:*unnamed* nil))
 ("block_sequence" (:*unnamed* ("block_sequence_item")))
 ("block_sequence_item" (:*unnamed* ("flow_node" "block_node")))
 ("boolean_scalar" (:*unnamed* nil))
 ("comment" (:*unnamed* nil))
 ("directive_name" (:*unnamed* nil))
 ("directive_parameter" (:*unnamed* nil))
 ("document" (:*unnamed* ("flow_node" "block_node" "tag_directive" "reserved_directive" "yaml_directive")))
 ("double_quote_scalar" (:*unnamed* ("escape_sequence")))
 ("escape_sequence" (:*unnamed* nil))
 ("float_scalar" (:*unnamed* nil))
 ("flow_mapping" (:*unnamed* ("flow_node" "flow_pair")))
 ("flow_node" (:*unnamed* ("single_quote_scalar" "flow_sequence" "flow_mapping" "double_quote_scalar" "tag" "alias" "plain_scalar" "anchor")))
 ("flow_pair" (:*unnamed* nil :key ("flow_node") :value ("flow_node")))
 ("flow_sequence" (:*unnamed* ("flow_node" "flow_pair")))
 ("integer_scalar" (:*unnamed* nil))
 ("null_scalar" (:*unnamed* nil))
 ("plain_scalar" (:*unnamed* ("boolean_scalar" "integer_scalar" "null_scalar" "string_scalar" "float_scalar")))
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter")))
 ("single_quote_scalar" (:*unnamed* ("escape_sequence")))
 ("stream" (:*unnamed* ("document")))
 ("string_scalar" (:*unnamed* nil))
 ("tag" (:*unnamed* nil))
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix")))
 ("tag_handle" (:*unnamed* nil))
 ("tag_prefix" (:*unnamed* nil))
 ("yaml_directive" (:*unnamed* ("yaml_version")))
 ("yaml_version" (:*unnamed* nil))
))
;; END Production rules for yaml
;; START Inverse production rules for yaml
(defconst combobulate-rules-yaml-inverse
 '(("alias" ("flow_node"))
   ("alias_name" ("alias"))
   ("anchor" ("flow_node" "block_node"))
   ("anchor_name" ("anchor"))
   ("block_mapping" ("block_node"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("block_mapping_pair" "block_sequence_item" "document"))
   ("block_scalar" ("block_node"))
   ("block_sequence" ("block_node"))
   ("block_sequence_item" ("block_sequence"))
   ("boolean_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("double_quote_scalar" ("flow_node"))
   ("escape_sequence" ("double_quote_scalar" "single_quote_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("flow_mapping" ("flow_node"))
   ("flow_node" ("block_mapping_pair" "block_sequence_item" "flow_sequence" "document" "flow_mapping" "flow_pair"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("flow_sequence" ("flow_node"))
   ("integer_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("plain_scalar" ("flow_node"))
   ("reserved_directive" ("document"))
   ("single_quote_scalar" ("flow_node"))
   ("string_scalar" ("plain_scalar"))
   ("tag" ("flow_node" "block_node"))
   ("tag_directive" ("document"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_directive" ("document"))
   ("yaml_version" ("yaml_directive"))
  )
)
;; END Inverse production rules for yaml
;; START All node types in yaml
(defconst combobulate-rules-yaml-types
 '("alias" "alias_name" "anchor" "anchor_name" "block_mapping" "block_mapping_pair" "block_node" "block_scalar" "block_sequence" "block_sequence_item" "boolean_scalar" "comment" "directive_name" "directive_parameter" "document" "double_quote_scalar" "escape_sequence" "float_scalar" "flow_mapping" "flow_node" "flow_pair" "flow_sequence" "integer_scalar" "null_scalar" "plain_scalar" "reserved_directive" "single_quote_scalar" "stream" "string_scalar" "tag" "tag_directive" "tag_handle" "tag_prefix" "yaml_directive" "yaml_version")
)
;; END All node types in yaml
;; START All supertypes in yaml
(defconst combobulate-rules-yaml-supertypes
 nil
)
;; END All supertypes in yaml

;; START Production rules for tsx
(defconst combobulate-rules-tsx
 '(("_primary_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("accessibility_modifier" (:*unnamed* nil))
 ("ambient_declaration" (:*unnamed* ("property_identifier" "literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "statement_block" "type_identifier" "infer_type" "predefined_type" "union_type" "declaration")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern")))
 ("array_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("as_expression" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "expression" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("asserts" (:*unnamed* ("this" "identifier" "type_predicate")))
 ("asserts_annotation" (:*unnamed* ("asserts")))
 ("assignment_expression" (:*unnamed* nil :left ("array_pattern" "subscript_expression" "parenthesized_expression" "object_pattern" "undefined" "non_null_expression" "identifier" "member_expression") :right ("expression")))
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:*unnamed* nil :left ("identifier" "non_null_expression" "subscript_expression" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments")))
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "array_pattern" "identifier") :type ("type_annotation")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_body" (:*unnamed* ("index_signature" "method_definition" "class_static_block" "public_field_definition" "abstract_method_signature" "decorator" "method_signature")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause")))
 ("class_static_block" (:*unnamed* nil :body ("statement_block")))
 ("comment" (:*unnamed* nil))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("conditional_type" (:*unnamed* nil :alternative ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :consequence ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :left ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :right ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("constraint" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters")))
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :type_parameters ("type_parameters")))
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("debugger_statement" (:*unnamed* nil))
 ("declaration" (:*unnamed* ("function_declaration" "internal_module" "generator_function_declaration" "variable_declaration" "enum_declaration" "abstract_class_declaration" "lexical_declaration" "function_signature" "interface_declaration" "ambient_declaration" "type_alias_declaration" "class_declaration" "import_alias" "module")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("default_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("empty_statement" (:*unnamed* nil))
 ("enum_assignment" (:*unnamed* nil :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number")))
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier")))
 ("escape_sequence" (:*unnamed* nil))
 ("existential_type" (:*unnamed* nil))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("expression" "identifier" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression" (:*unnamed* ("glimmer_template" "internal_module" "assignment_expression" "new_expression" "jsx_self_closing_element" "update_expression" "ternary_expression" "instantiation_expression" "binary_expression" "augmented_assignment_expression" "jsx_element" "as_expression" "primary_expression" "yield_expression" "await_expression" "unary_expression" "satisfies_expression")))
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression")))
 ("extends_type_clause" (:*unnamed* nil :type ("generic_type" "type_identifier" "nested_type_identifier")))
 ("false" (:*unnamed* nil))
 ("finally_clause" (:*unnamed* nil :body ("statement_block")))
 ("flow_maybe_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("array_pattern" "subscript_expression" "parenthesized_expression" "object_pattern" "undefined" "non_null_expression" "identifier" "member_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression")))
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration")))
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter")))
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "type_predicate" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "asserts" "intersection_type" "readonly_type" "type_identifier" "infer_type" "predefined_type" "union_type") :type_parameters ("type_parameters")))
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments")))
 ("glimmer_closing_tag" (:*unnamed* nil))
 ("glimmer_opening_tag" (:*unnamed* nil))
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("hash_bang_line" (:*unnamed* nil))
 ("identifier" (:*unnamed* nil))
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("implements_clause" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("import" (:*unnamed* nil))
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier")))
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier")))
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string")))
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string")))
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :name ("identifier") :sign nil :type ("type_annotation" "opting_type_annotation" "omitting_type_annotation")))
 ("index_type_query" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("infer_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("instantiation_expression" (:*unnamed* ("expression") :function ("identifier" "import" "member_expression" "subscript_expression") :type_arguments ("type_arguments")))
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("intersection_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "jsx_element" "string" "jsx_self_closing_element")))
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression")))
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_self_closing_element" "jsx_text") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments")))
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments")))
 ("jsx_text" (:*unnamed* nil))
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("literal_type" (:*unnamed* ("undefined" "null" "unary_expression" "string" "number" "false" "true")))
 ("lookup_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("mapped_type_clause" (:*unnamed* nil :alias ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :name ("type_identifier") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("meta_property" (:*unnamed* nil))
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("identifier" "property_identifier" "member_expression")))
 ("nested_type_identifier" (:*unnamed* nil :module ("nested_identifier" "identifier") :name ("type_identifier")))
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments")))
 ("non_null_expression" (:*unnamed* ("expression")))
 ("null" (:*unnamed* nil))
 ("number" (:*unnamed* nil))
 ("object" (:*unnamed* ("spread_element" "pair" "method_definition" "shorthand_property_identifier")))
 ("object_assignment_pattern" (:*unnamed* nil :left ("object_pattern" "array_pattern" "shorthand_property_identifier_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "pair_pattern" "rest_pattern" "shorthand_property_identifier_pattern")))
 ("object_type" (:*unnamed* ("index_signature" "construct_signature" "export_statement" "property_signature" "call_signature" "method_signature")))
 ("omitting_type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("opting_type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("optional_chain" (:*unnamed* nil))
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("optional_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("override_modifier" (:*unnamed* nil))
 ("pair" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("pattern" "assignment_pattern")))
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation")))
 ("parenthesized_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("pattern" (:*unnamed* ("array_pattern" "subscript_expression" "object_pattern" "undefined" "non_null_expression" "rest_pattern" "identifier" "member_expression")))
 ("predefined_type" (:*unnamed* nil))
 ("primary_expression" (:*unnamed* ("regex" "generator_function" "null" "subscript_expression" "parenthesized_expression" "class" "meta_property" "undefined" "template_string" "super" "string" "arrow_function" "identifier" "object" "array" "member_expression" "false" "true" "this" "import" "number" "call_expression" "non_null_expression" "function")))
 ("private_property_identifier" (:*unnamed* nil))
 ("program" (:*unnamed* ("statement" "hash_bang_line")))
 ("property_identifier" (:*unnamed* nil))
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :type ("type_annotation")))
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :type ("type_annotation") :value ("expression")))
 ("readonly_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern")))
 ("regex_flags" (:*unnamed* nil))
 ("regex_pattern" (:*unnamed* nil))
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("rest_pattern" (:*unnamed* ("object_pattern" "array_pattern" "undefined" "identifier" "non_null_expression" "subscript_expression" "member_expression")))
 ("rest_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("return_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("satisfies_expression" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "expression" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression")))
 ("shorthand_property_identifier" (:*unnamed* nil))
 ("shorthand_property_identifier_pattern" (:*unnamed* nil))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement" (:*unnamed* ("break_statement" "if_statement" "do_statement" "while_statement" "export_statement" "empty_statement" "for_in_statement" "debugger_statement" "for_statement" "switch_statement" "return_statement" "statement_block" "expression_statement" "labeled_statement" "import_statement" "with_statement" "declaration" "try_statement" "throw_statement" "continue_statement")))
 ("statement_block" (:*unnamed* ("statement")))
 ("statement_identifier" (:*unnamed* nil))
 ("string" (:*unnamed* ("string_fragment" "escape_sequence")))
 ("string_fragment" (:*unnamed* nil))
 ("subscript_expression" (:*unnamed* nil :index ("expression" "predefined_type" "sequence_expression" "string" "number") :object ("expression") :optional_chain ("optional_chain")))
 ("super" (:*unnamed* nil))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression")))
 ("switch_default" (:*unnamed* nil :body ("statement")))
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression")))
 ("template_literal_type" (:*unnamed* ("template_type")))
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence")))
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression")))
 ("template_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("this" (:*unnamed* nil))
 ("this_type" (:*unnamed* nil))
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("true" (:*unnamed* nil))
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("tuple_type" (:*unnamed* ("literal_type" "parenthesized_type" "required_parameter" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "optional_parameter" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "rest_type" "type_identifier" "infer_type" "predefined_type" "union_type" "optional_type")))
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_arguments" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_identifier" (:*unnamed* nil))
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type")))
 ("type_parameters" (:*unnamed* ("type_parameter")))
 ("type_predicate" (:*unnamed* nil :name ("this" "identifier") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_predicate_annotation" (:*unnamed* ("type_predicate")))
 ("type_query" (:*unnamed* ("member_expression" "identifier" "subscript_expression" "call_expression" "instantiation_expression")))
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil))
 ("undefined" (:*unnamed* nil))
 ("union_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "array_pattern" "identifier") :type ("type_annotation") :value ("expression")))
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for tsx
;; START Inverse production rules for tsx
(defconst combobulate-rules-tsx-inverse
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("required_parameter" "property_signature" "abstract_method_signature" "optional_parameter" "public_field_definition" "method_definition" "method_signature"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("new_expression" "call_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("array_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("function_declaration" "generator_function" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "arrow_function" "method_definition" "function" "method_signature"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("primary_expression" "type_query" "decorator"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "pair_pattern" "enum_assignment" "method_definition" "method_signature"))
   ("conditional_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("ambient_declaration" "statement" "export_statement"))
   ("decorator" ("class_body" "required_parameter" "class" "abstract_class_declaration" "optional_parameter" "export_statement" "class_declaration"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("template_string" "string"))
   ("existential_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("computed_property_name" "required_parameter" "subscript_expression" "parenthesized_expression" "update_expression" "ternary_expression" "optional_parameter" "assignment_pattern" "array" "arguments" "instantiation_expression" "member_expression" "for_statement" "as_expression" "return_statement" "spread_element" "template_substitution" "yield_expression" "await_expression" "extends_clause" "variable_declarator" "satisfies_expression" "switch_case" "pair" "assignment_expression" "object_assignment_pattern" "export_statement" "arrow_function" "enum_assignment" "public_field_definition" "binary_expression" "augmented_assignment_expression" "sequence_expression" "call_expression" "expression_statement" "jsx_expression" "unary_expression" "non_null_expression" "for_in_statement" "throw_statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("function_declaration" "generator_function" "construct_signature" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "function_type" "arrow_function" "constructor_type" "method_definition" "function" "method_signature"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "extends_type_clause" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("namespace_import" "pattern" "generator_function" "required_parameter" "type_predicate" "function_signature" "jsx_namespace_name" "nested_identifier" "optional_parameter" "rest_pattern" "instantiation_expression" "member_expression" "import_specifier" "generator_function_declaration" "import_clause" "enum_declaration" "export_specifier" "variable_declarator" "import_require_clause" "module" "index_signature" "internal_module" "assignment_expression" "jsx_closing_element" "jsx_self_closing_element" "jsx_opening_element" "export_statement" "arrow_function" "namespace_export" "import_alias" "catch_clause" "decorator" "nested_type_identifier" "function_declaration" "augmented_assignment_expression" "asserts" "type_query" "primary_expression" "for_in_statement" "function"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("primary_expression" "instantiation_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("infer_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("intersection_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_element" "jsx_attribute"))
   ("jsx_expression" ("jsx_opening_element" "jsx_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_element" "jsx_attribute"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("literal_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("lookup_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("rest_pattern" "member_expression" "augmented_assignment_expression" "assignment_expression" "pattern" "type_query" "primary_expression" "jsx_closing_element" "jsx_self_closing_element" "instantiation_expression" "nested_identifier" "jsx_opening_element" "for_in_statement" "decorator"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("import_alias" "internal_module" "module" "nested_type_identifier"))
   ("nested_type_identifier" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "extends_type_clause" "generic_type" "flow_maybe_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("rest_pattern" "augmented_assignment_expression" "assignment_expression" "pattern" "primary_expression" "for_in_statement"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("pair" "literal_type" "property_signature" "primary_expression" "public_field_definition" "subscript_expression" "abstract_method_signature" "enum_body" "unary_expression" "pair_pattern" "enum_assignment" "method_definition" "method_signature"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("object_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "interface_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("required_parameter" "property_signature" "optional_parameter" "public_field_definition" "method_definition" "method_signature"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("augmented_assignment_expression" "assignment_expression" "switch_statement" "primary_expression" "do_statement" "if_statement" "while_statement" "with_statement" "for_in_statement"))
   ("parenthesized_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("pattern" ("array_pattern" "required_parameter" "optional_parameter" "assignment_pattern" "pair_pattern"))
   ("predefined_type" ("_primary_type" "subscript_expression" "index_type_query" "type_predicate" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("primary_expression" ("new_expression" "expression"))
   ("private_property_identifier" ("pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "pair_pattern" "enum_assignment" "method_definition" "member_expression" "method_signature"))
   ("property_identifier" ("member_expression" "pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "nested_identifier" "ambient_declaration" "pair_pattern" "enum_assignment" "method_definition" "jsx_attribute" "method_signature"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("rest_pattern" ("object_pattern" "pattern" "required_parameter"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("switch_case" "for_statement" "sequence_expression" "return_statement" "subscript_expression" "parenthesized_expression" "template_substitution" "expression_statement" "jsx_expression" "for_in_statement" "throw_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "jsx_expression" "array" "arguments"))
   ("statement" ("switch_case" "for_statement" "statement_block" "do_statement" "if_statement" "labeled_statement" "while_statement" "with_statement" "switch_default" "else_clause" "for_in_statement" "program"))
   ("statement_block" ("function_declaration" "internal_module" "generator_function" "generator_function_declaration" "class_static_block" "function" "finally_clause" "ambient_declaration" "statement" "arrow_function" "try_statement" "method_definition" "catch_clause" "module"))
   ("statement_identifier" ("labeled_statement" "break_statement" "continue_statement"))
   ("string" ("subscript_expression" "abstract_method_signature" "method_definition" "import_specifier" "export_specifier" "import_require_clause" "module" "pair" "internal_module" "literal_type" "property_signature" "namespace_export" "export_statement" "enum_assignment" "public_field_definition" "method_signature" "primary_expression" "enum_body" "import_statement" "pair_pattern" "jsx_attribute"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("rest_pattern" "augmented_assignment_expression" "assignment_expression" "pattern" "type_query" "primary_expression" "for_in_statement" "instantiation_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("template_string" ("primary_expression" "call_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("asserts" "required_parameter" "primary_expression" "type_predicate" "optional_parameter"))
   ("this_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("generator_function" "construct_signature" "required_parameter" "parenthesized_expression" "abstract_method_signature" "call_signature" "function_signature" "optional_parameter" "method_definition" "generator_function_declaration" "variable_declarator" "index_signature" "property_signature" "arrow_function" "public_field_definition" "catch_clause" "method_signature" "function_declaration" "function"))
   ("type_arguments" ("generic_type" "new_expression" "call_expression" "jsx_self_closing_element" "jsx_opening_element" "extends_clause" "instantiation_expression"))
   ("type_identifier" ("_primary_type" "type_predicate" "class" "abstract_class_declaration" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "class_declaration" "satisfies_expression" "type_parameter" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "interface_declaration" "constructor_type" "extends_type_clause" "nested_type_identifier" "generic_type" "flow_maybe_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("function_declaration" "generator_function" "construct_signature" "generator_function_declaration" "class" "call_signature" "abstract_method_signature" "abstract_class_declaration" "function_signature" "interface_declaration" "type_alias_declaration" "function_type" "arrow_function" "class_declaration" "constructor_type" "method_definition" "function" "method_signature"))
   ("type_predicate" ("type_predicate_annotation" "asserts" "function_type"))
   ("type_predicate_annotation" ("function_declaration" "generator_function" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "arrow_function" "method_definition" "function" "method_signature"))
   ("type_query" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("rest_pattern" "assignment_expression" "pattern" "literal_type" "primary_expression" "for_in_statement"))
   ("union_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  )
)
;; END Inverse production rules for tsx
;; START All node types in tsx
(defconst combobulate-rules-tsx-types
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression")
)
;; END All node types in tsx
;; START All supertypes in tsx
(defconst combobulate-rules-tsx-supertypes
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement")
)
;; END All supertypes in tsx

;; START Production rules for css
(defconst combobulate-rules-css
 '(("adjacent_sibling_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("arguments" (:*unnamed* ("integer_value" "child_selector" "important" "float_value" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "plain_value" "pseudo_class_selector" "binary_expression" "nesting_selector" "adjacent_sibling_selector" "class_selector" "color_value" "string_value" "parenthesized_value" "sibling_selector" "grid_value" "call_expression" "tag_name" "attribute_selector" "universal_selector")))
 ("at_keyword" (:*unnamed* nil))
 ("at_rule" (:*unnamed* ("keyword_query" "selector_query" "unary_query" "binary_query" "feature_query" "at_keyword" "parenthesized_query" "block")))
 ("attribute_name" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("attribute_selector" (:*unnamed* ("integer_value" "child_selector" "important" "float_value" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "plain_value" "pseudo_class_selector" "attribute_name" "binary_expression" "nesting_selector" "adjacent_sibling_selector" "class_selector" "color_value" "string_value" "parenthesized_value" "sibling_selector" "grid_value" "call_expression" "tag_name" "attribute_selector" "universal_selector")))
 ("binary_expression" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "plain_value" "binary_expression")))
 ("binary_query" (:*unnamed* ("feature_query" "keyword_query" "selector_query" "parenthesized_query" "unary_query" "binary_query")))
 ("block" (:*unnamed* ("rule_set" "keyframes_statement" "postcss_statement" "charset_statement" "supports_statement" "at_rule" "media_statement" "import_statement" "declaration" "namespace_statement")))
 ("call_expression" (:*unnamed* ("function_name" "arguments")))
 ("charset_statement" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "plain_value" "binary_expression")))
 ("child_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("class_name" (:*unnamed* nil))
 ("class_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector" "class_name")))
 ("color_value" (:*unnamed* nil))
 ("comment" (:*unnamed* nil))
 ("declaration" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "plain_value" "property_name" "binary_expression")))
 ("descendant_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("feature_name" (:*unnamed* nil))
 ("feature_query" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "feature_name" "plain_value" "binary_expression")))
 ("float_value" (:*unnamed* ("unit")))
 ("from" (:*unnamed* nil))
 ("function_name" (:*unnamed* nil))
 ("grid_value" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "plain_value" "binary_expression")))
 ("id_name" (:*unnamed* nil))
 ("id_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "id_name" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("import_statement" (:*unnamed* ("integer_value" "important" "float_value" "binary_query" "feature_query" "plain_value" "parenthesized_query" "binary_expression" "color_value" "keyword_query" "string_value" "selector_query" "parenthesized_value" "unary_query" "grid_value" "call_expression")))
 ("important" (:*unnamed* nil))
 ("integer_value" (:*unnamed* ("unit")))
 ("js_comment" (:*unnamed* nil))
 ("keyframe_block" (:*unnamed* ("integer_value" "block" "to" "from")))
 ("keyframe_block_list" (:*unnamed* ("keyframe_block")))
 ("keyframes_name" (:*unnamed* nil))
 ("keyframes_statement" (:*unnamed* ("keyframes_name" "keyframe_block_list" "at_keyword")))
 ("keyword_query" (:*unnamed* nil))
 ("media_statement" (:*unnamed* ("feature_query" "keyword_query" "selector_query" "parenthesized_query" "unary_query" "block" "binary_query")))
 ("namespace_name" (:*unnamed* nil))
 ("namespace_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("namespace_statement" (:*unnamed* ("call_expression" "string_value" "namespace_name")))
 ("nesting_selector" (:*unnamed* nil))
 ("parenthesized_query" (:*unnamed* ("feature_query" "keyword_query" "selector_query" "parenthesized_query" "unary_query" "binary_query")))
 ("parenthesized_value" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "plain_value" "binary_expression")))
 ("plain_value" (:*unnamed* nil))
 ("postcss_statement" (:*unnamed* ("integer_value" "color_value" "important" "string_value" "float_value" "parenthesized_value" "grid_value" "call_expression" "at_keyword" "plain_value" "binary_expression")))
 ("property_name" (:*unnamed* nil))
 ("pseudo_class_selector" (:*unnamed* ("child_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "arguments" "pseudo_class_selector" "nesting_selector" "adjacent_sibling_selector" "class_selector" "string_value" "sibling_selector" "tag_name" "attribute_selector" "universal_selector" "class_name")))
 ("pseudo_element_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "arguments" "pseudo_class_selector")))
 ("rule_set" (:*unnamed* ("selectors" "block")))
 ("selector_query" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("selectors" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("sibling_selector" (:*unnamed* ("nesting_selector" "adjacent_sibling_selector" "class_selector" "child_selector" "string_value" "sibling_selector" "tag_name" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "universal_selector" "pseudo_class_selector")))
 ("string_value" (:*unnamed* nil))
 ("stylesheet" (:*unnamed* ("rule_set" "keyframes_statement" "charset_statement" "supports_statement" "at_rule" "media_statement" "import_statement" "declaration" "namespace_statement")))
 ("supports_statement" (:*unnamed* ("feature_query" "keyword_query" "selector_query" "parenthesized_query" "unary_query" "block" "binary_query")))
 ("tag_name" (:*unnamed* nil))
 ("to" (:*unnamed* nil))
 ("unary_query" (:*unnamed* ("feature_query" "keyword_query" "selector_query" "parenthesized_query" "unary_query" "binary_query")))
 ("unit" (:*unnamed* nil))
 ("universal_selector" (:*unnamed* nil))
))
;; END Production rules for css
;; START Inverse production rules for css
(defconst combobulate-rules-css-inverse
 '(("adjacent_sibling_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("arguments" ("pseudo_element_selector" "call_expression" "pseudo_class_selector"))
   ("at_keyword" ("at_rule" "keyframes_statement" "postcss_statement"))
   ("at_rule" ("stylesheet" "block"))
   ("attribute_name" ("attribute_selector"))
   ("attribute_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("binary_expression" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("binary_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("block" ("supports_statement" "at_rule" "media_statement" "rule_set" "keyframe_block"))
   ("call_expression" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "namespace_statement" "arguments" "binary_expression"))
   ("charset_statement" ("stylesheet" "block"))
   ("child_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("class_name" ("class_selector" "pseudo_class_selector"))
   ("class_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("color_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("declaration" ("stylesheet" "block"))
   ("descendant_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("feature_name" ("feature_query"))
   ("feature_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("float_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("from" ("keyframe_block"))
   ("function_name" ("call_expression"))
   ("grid_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("id_name" ("id_selector"))
   ("id_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("import_statement" ("stylesheet" "block"))
   ("important" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("integer_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "keyframe_block" "arguments" "binary_expression"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("keyword_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("media_statement" ("stylesheet" "block"))
   ("namespace_name" ("namespace_statement"))
   ("namespace_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("namespace_statement" ("stylesheet" "block"))
   ("nesting_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("parenthesized_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("parenthesized_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("plain_value" ("parenthesized_value" "charset_statement" "grid_value" "postcss_statement" "feature_query" "import_statement" "attribute_selector" "declaration" "arguments" "binary_expression"))
   ("postcss_statement" ("block"))
   ("property_name" ("declaration"))
   ("pseudo_class_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("pseudo_element_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("rule_set" ("stylesheet" "block"))
   ("selector_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("selectors" ("rule_set"))
   ("sibling_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("string_value" ("charset_statement" "namespace_selector" "feature_query" "id_selector" "descendant_selector" "namespace_statement" "arguments" "adjacent_sibling_selector" "class_selector" "parenthesized_value" "postcss_statement" "attribute_selector" "declaration" "child_selector" "selectors" "pseudo_element_selector" "pseudo_class_selector" "attribute_name" "binary_expression" "selector_query" "sibling_selector" "grid_value" "import_statement"))
   ("supports_statement" ("stylesheet" "block"))
   ("tag_name" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
   ("to" ("keyframe_block"))
   ("unary_query" ("unary_query" "binary_query" "supports_statement" "at_rule" "media_statement" "import_statement" "parenthesized_query"))
   ("unit" ("float_value" "integer_value"))
   ("universal_selector" ("adjacent_sibling_selector" "child_selector" "class_selector" "selector_query" "selectors" "sibling_selector" "namespace_selector" "id_selector" "pseudo_element_selector" "descendant_selector" "attribute_selector" "arguments" "pseudo_class_selector" "attribute_name"))
  )
)
;; END Inverse production rules for css
;; START All node types in css
(defconst combobulate-rules-css-types
 '("adjacent_sibling_selector" "arguments" "at_keyword" "at_rule" "attribute_name" "attribute_selector" "binary_expression" "binary_query" "block" "call_expression" "charset_statement" "child_selector" "class_name" "class_selector" "color_value" "comment" "declaration" "descendant_selector" "feature_name" "feature_query" "float_value" "from" "function_name" "grid_value" "id_name" "id_selector" "import_statement" "important" "integer_value" "js_comment" "keyframe_block" "keyframe_block_list" "keyframes_name" "keyframes_statement" "keyword_query" "media_statement" "namespace_name" "namespace_selector" "namespace_statement" "nesting_selector" "parenthesized_query" "parenthesized_value" "plain_value" "postcss_statement" "property_name" "pseudo_class_selector" "pseudo_element_selector" "rule_set" "selector_query" "selectors" "sibling_selector" "string_value" "stylesheet" "supports_statement" "tag_name" "to" "unary_query" "unit" "universal_selector")
)
;; END All node types in css
;; START All supertypes in css
(defconst combobulate-rules-css-supertypes
 nil
)
;; END All supertypes in css

;; START Production rules for typescript
(defconst combobulate-rules-typescript
 '(("_primary_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("accessibility_modifier" (:*unnamed* nil))
 ("ambient_declaration" (:*unnamed* ("property_identifier" "literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "statement_block" "type_identifier" "infer_type" "predefined_type" "union_type" "declaration")))
 ("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern")))
 ("array_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("as_expression" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "expression" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("asserts" (:*unnamed* ("this" "identifier" "type_predicate")))
 ("asserts_annotation" (:*unnamed* ("asserts")))
 ("assignment_expression" (:*unnamed* nil :left ("array_pattern" "subscript_expression" "parenthesized_expression" "object_pattern" "undefined" "non_null_expression" "identifier" "member_expression") :right ("expression")))
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:*unnamed* nil :left ("identifier" "non_null_expression" "subscript_expression" "parenthesized_expression" "member_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments")))
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "array_pattern" "identifier") :type ("type_annotation")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_body" (:*unnamed* ("index_signature" "method_definition" "class_static_block" "public_field_definition" "abstract_method_signature" "decorator" "method_signature")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("class_heritage" (:*unnamed* ("extends_clause" "implements_clause")))
 ("class_static_block" (:*unnamed* nil :body ("statement_block")))
 ("comment" (:*unnamed* nil))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("conditional_type" (:*unnamed* nil :alternative ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :consequence ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :left ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :right ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("constraint" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters")))
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :type_parameters ("type_parameters")))
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("debugger_statement" (:*unnamed* nil))
 ("declaration" (:*unnamed* ("function_declaration" "internal_module" "generator_function_declaration" "variable_declaration" "enum_declaration" "abstract_class_declaration" "lexical_declaration" "function_signature" "interface_declaration" "ambient_declaration" "type_alias_declaration" "class_declaration" "import_alias" "module")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("default_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("empty_statement" (:*unnamed* nil))
 ("enum_assignment" (:*unnamed* nil :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number")))
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier")))
 ("escape_sequence" (:*unnamed* nil))
 ("existential_type" (:*unnamed* nil))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("expression" "identifier" "export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression" (:*unnamed* ("glimmer_template" "internal_module" "assignment_expression" "type_assertion" "new_expression" "update_expression" "ternary_expression" "instantiation_expression" "binary_expression" "augmented_assignment_expression" "as_expression" "primary_expression" "yield_expression" "await_expression" "unary_expression" "satisfies_expression")))
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression")))
 ("extends_type_clause" (:*unnamed* nil :type ("generic_type" "type_identifier" "nested_type_identifier")))
 ("false" (:*unnamed* nil))
 ("finally_clause" (:*unnamed* nil :body ("statement_block")))
 ("flow_maybe_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("array_pattern" "subscript_expression" "parenthesized_expression" "object_pattern" "undefined" "non_null_expression" "identifier" "member_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression")))
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration")))
 ("formal_parameters" (:*unnamed* ("optional_parameter" "required_parameter")))
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "type_predicate" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "asserts" "intersection_type" "readonly_type" "type_identifier" "infer_type" "predefined_type" "union_type") :type_parameters ("type_parameters")))
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments")))
 ("glimmer_closing_tag" (:*unnamed* nil))
 ("glimmer_opening_tag" (:*unnamed* nil))
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("hash_bang_line" (:*unnamed* nil))
 ("identifier" (:*unnamed* nil))
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("implements_clause" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("import" (:*unnamed* nil))
 ("import_alias" (:*unnamed* ("nested_identifier" "identifier")))
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier")))
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string")))
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string")))
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :name ("identifier") :sign nil :type ("type_annotation" "opting_type_annotation" "omitting_type_annotation")))
 ("index_type_query" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "predefined_type" "union_type")))
 ("infer_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("instantiation_expression" (:*unnamed* ("expression") :function ("identifier" "import" "member_expression" "subscript_expression") :type_arguments ("type_arguments")))
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters")))
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("intersection_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "jsx_element" "string" "jsx_self_closing_element")))
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression")))
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_self_closing_element" "jsx_text") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments")))
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression") :type_arguments ("type_arguments")))
 ("jsx_text" (:*unnamed* nil))
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("literal_type" (:*unnamed* ("undefined" "null" "unary_expression" "string" "number" "false" "true")))
 ("lookup_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("mapped_type_clause" (:*unnamed* nil :alias ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type") :name ("type_identifier") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("meta_property" (:*unnamed* nil))
 ("method_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :body ("statement_block") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("method_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters") :return_type ("type_annotation" "type_predicate_annotation" "asserts_annotation") :type_parameters ("type_parameters")))
 ("module" (:*unnamed* nil :body ("statement_block") :name ("nested_identifier" "identifier" "string")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("nested_identifier" (:*unnamed* ("identifier" "property_identifier" "member_expression")))
 ("nested_type_identifier" (:*unnamed* nil :module ("nested_identifier" "identifier") :name ("type_identifier")))
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments")))
 ("non_null_expression" (:*unnamed* ("expression")))
 ("null" (:*unnamed* nil))
 ("number" (:*unnamed* nil))
 ("object" (:*unnamed* ("spread_element" "pair" "method_definition" "shorthand_property_identifier")))
 ("object_assignment_pattern" (:*unnamed* nil :left ("object_pattern" "array_pattern" "shorthand_property_identifier_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "pair_pattern" "rest_pattern" "shorthand_property_identifier_pattern")))
 ("object_type" (:*unnamed* ("index_signature" "construct_signature" "export_statement" "property_signature" "call_signature" "method_signature")))
 ("omitting_type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("opting_type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("optional_chain" (:*unnamed* nil))
 ("optional_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("optional_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("override_modifier" (:*unnamed* nil))
 ("pair" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("pattern" "assignment_pattern")))
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation")))
 ("parenthesized_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("pattern" (:*unnamed* ("array_pattern" "subscript_expression" "object_pattern" "undefined" "non_null_expression" "rest_pattern" "identifier" "member_expression")))
 ("predefined_type" (:*unnamed* nil))
 ("primary_expression" (:*unnamed* ("regex" "generator_function" "null" "subscript_expression" "parenthesized_expression" "class" "meta_property" "undefined" "template_string" "super" "string" "arrow_function" "identifier" "object" "array" "member_expression" "false" "true" "this" "import" "number" "call_expression" "non_null_expression" "function")))
 ("private_property_identifier" (:*unnamed* nil))
 ("program" (:*unnamed* ("statement" "hash_bang_line")))
 ("property_identifier" (:*unnamed* nil))
 ("property_signature" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :type ("type_annotation")))
 ("public_field_definition" (:*unnamed* ("accessibility_modifier" "override_modifier") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :type ("type_annotation") :value ("expression")))
 ("readonly_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern")))
 ("regex_flags" (:*unnamed* nil))
 ("regex_pattern" (:*unnamed* nil))
 ("required_parameter" (:*unnamed* ("accessibility_modifier" "override_modifier") :decorator ("decorator") :name ("rest_pattern" "identifier") :pattern ("this" "pattern") :type ("type_annotation") :value ("expression")))
 ("rest_pattern" (:*unnamed* ("object_pattern" "array_pattern" "undefined" "identifier" "non_null_expression" "subscript_expression" "member_expression")))
 ("rest_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("return_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("satisfies_expression" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "expression" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression")))
 ("shorthand_property_identifier" (:*unnamed* nil))
 ("shorthand_property_identifier_pattern" (:*unnamed* nil))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement" (:*unnamed* ("break_statement" "if_statement" "do_statement" "while_statement" "export_statement" "empty_statement" "for_in_statement" "debugger_statement" "for_statement" "switch_statement" "return_statement" "statement_block" "expression_statement" "labeled_statement" "import_statement" "with_statement" "declaration" "try_statement" "throw_statement" "continue_statement")))
 ("statement_block" (:*unnamed* ("statement")))
 ("statement_identifier" (:*unnamed* nil))
 ("string" (:*unnamed* ("string_fragment" "escape_sequence")))
 ("string_fragment" (:*unnamed* nil))
 ("subscript_expression" (:*unnamed* nil :index ("expression" "predefined_type" "sequence_expression" "string" "number") :object ("expression") :optional_chain ("optional_chain")))
 ("super" (:*unnamed* nil))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression")))
 ("switch_default" (:*unnamed* nil :body ("statement")))
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression")))
 ("template_literal_type" (:*unnamed* ("template_type")))
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence")))
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression")))
 ("template_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("this" (:*unnamed* nil))
 ("this_type" (:*unnamed* nil))
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("true" (:*unnamed* nil))
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("tuple_type" (:*unnamed* ("literal_type" "parenthesized_type" "required_parameter" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "optional_parameter" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "rest_type" "type_identifier" "infer_type" "predefined_type" "union_type" "optional_type")))
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_annotation" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_arguments" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_assertion" (:*unnamed* ("expression" "type_arguments")))
 ("type_identifier" (:*unnamed* nil))
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type")))
 ("type_parameters" (:*unnamed* ("type_parameter")))
 ("type_predicate" (:*unnamed* nil :name ("this" "identifier") :type ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("type_predicate_annotation" (:*unnamed* ("type_predicate")))
 ("type_query" (:*unnamed* ("member_expression" "identifier" "subscript_expression" "call_expression" "instantiation_expression")))
 ("unary_expression" (:*unnamed* nil :argument ("expression" "number") :operator nil))
 ("undefined" (:*unnamed* nil))
 ("union_type" (:*unnamed* ("literal_type" "parenthesized_type" "this_type" "index_type_query" "array_type" "conditional_type" "existential_type" "template_literal_type" "lookup_type" "function_type" "constructor_type" "nested_type_identifier" "generic_type" "flow_maybe_type" "type_query" "object_type" "tuple_type" "readonly_type" "intersection_type" "type_identifier" "infer_type" "predefined_type" "union_type")))
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "array_pattern" "identifier") :type ("type_annotation") :value ("expression")))
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for typescript
;; START Inverse production rules for typescript
(defconst combobulate-rules-typescript-inverse
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("required_parameter" "property_signature" "abstract_method_signature" "optional_parameter" "public_field_definition" "method_definition" "method_signature"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("new_expression" "call_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("array_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("function_declaration" "generator_function" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "arrow_function" "method_definition" "function" "method_signature"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("primary_expression" "type_query" "decorator"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "pair_pattern" "enum_assignment" "method_definition" "method_signature"))
   ("conditional_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("ambient_declaration" "statement" "export_statement"))
   ("decorator" ("class_body" "required_parameter" "class" "abstract_class_declaration" "optional_parameter" "export_statement" "class_declaration"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("template_string" "string"))
   ("existential_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement" "object_type"))
   ("expression" ("computed_property_name" "required_parameter" "type_assertion" "subscript_expression" "parenthesized_expression" "update_expression" "ternary_expression" "optional_parameter" "assignment_pattern" "array" "arguments" "instantiation_expression" "member_expression" "for_statement" "as_expression" "return_statement" "spread_element" "template_substitution" "yield_expression" "await_expression" "extends_clause" "variable_declarator" "satisfies_expression" "switch_case" "pair" "assignment_expression" "object_assignment_pattern" "export_statement" "arrow_function" "enum_assignment" "public_field_definition" "binary_expression" "augmented_assignment_expression" "sequence_expression" "call_expression" "expression_statement" "jsx_expression" "unary_expression" "non_null_expression" "for_in_statement" "throw_statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("primary_expression" "literal_type"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("function_declaration" "generator_function" "construct_signature" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "function_type" "arrow_function" "constructor_type" "method_definition" "function" "method_signature"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "extends_type_clause" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("namespace_import" "pattern" "generator_function" "required_parameter" "type_predicate" "function_signature" "jsx_namespace_name" "nested_identifier" "optional_parameter" "rest_pattern" "instantiation_expression" "member_expression" "import_specifier" "generator_function_declaration" "import_clause" "enum_declaration" "export_specifier" "variable_declarator" "import_require_clause" "module" "index_signature" "internal_module" "assignment_expression" "jsx_closing_element" "jsx_self_closing_element" "jsx_opening_element" "export_statement" "arrow_function" "namespace_export" "import_alias" "catch_clause" "decorator" "nested_type_identifier" "function_declaration" "augmented_assignment_expression" "asserts" "type_query" "primary_expression" "for_in_statement" "function"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("primary_expression" "instantiation_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("infer_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("instantiation_expression" ("expression" "type_query"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("intersection_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_element" "jsx_attribute"))
   ("jsx_expression" ("jsx_opening_element" "jsx_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_element" "jsx_attribute"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("literal_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("lookup_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("rest_pattern" "member_expression" "augmented_assignment_expression" "assignment_expression" "pattern" "type_query" "primary_expression" "jsx_closing_element" "jsx_self_closing_element" "instantiation_expression" "nested_identifier" "jsx_opening_element" "for_in_statement" "decorator"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("import_alias" "internal_module" "module" "nested_type_identifier"))
   ("nested_type_identifier" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "extends_type_clause" "generic_type" "flow_maybe_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("rest_pattern" "augmented_assignment_expression" "assignment_expression" "pattern" "primary_expression" "for_in_statement"))
   ("null" ("primary_expression" "literal_type"))
   ("number" ("pair" "literal_type" "property_signature" "primary_expression" "public_field_definition" "subscript_expression" "abstract_method_signature" "enum_body" "unary_expression" "pair_pattern" "enum_assignment" "method_definition" "method_signature"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("object_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "interface_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("subscript_expression" "member_expression"))
   ("optional_parameter" ("formal_parameters" "tuple_type"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("required_parameter" "property_signature" "optional_parameter" "public_field_definition" "method_definition" "method_signature"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("augmented_assignment_expression" "assignment_expression" "switch_statement" "primary_expression" "do_statement" "if_statement" "while_statement" "with_statement" "for_in_statement"))
   ("parenthesized_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("pattern" ("array_pattern" "required_parameter" "optional_parameter" "assignment_pattern" "pair_pattern"))
   ("predefined_type" ("_primary_type" "subscript_expression" "index_type_query" "type_predicate" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("primary_expression" ("new_expression" "expression"))
   ("private_property_identifier" ("pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "pair_pattern" "enum_assignment" "method_definition" "member_expression" "method_signature"))
   ("property_identifier" ("member_expression" "pair" "property_signature" "public_field_definition" "abstract_method_signature" "enum_body" "nested_identifier" "ambient_declaration" "pair_pattern" "enum_assignment" "method_definition" "jsx_attribute" "method_signature"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("type_predicate" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("formal_parameters" "tuple_type"))
   ("rest_pattern" ("object_pattern" "pattern" "required_parameter"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("switch_case" "for_statement" "sequence_expression" "return_statement" "subscript_expression" "parenthesized_expression" "template_substitution" "expression_statement" "jsx_expression" "for_in_statement" "throw_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "jsx_expression" "array" "arguments"))
   ("statement" ("switch_case" "for_statement" "statement_block" "do_statement" "if_statement" "labeled_statement" "while_statement" "with_statement" "switch_default" "else_clause" "for_in_statement" "program"))
   ("statement_block" ("function_declaration" "internal_module" "generator_function" "generator_function_declaration" "class_static_block" "function" "finally_clause" "ambient_declaration" "statement" "arrow_function" "try_statement" "method_definition" "catch_clause" "module"))
   ("statement_identifier" ("labeled_statement" "break_statement" "continue_statement"))
   ("string" ("subscript_expression" "abstract_method_signature" "method_definition" "import_specifier" "export_specifier" "import_require_clause" "module" "pair" "internal_module" "literal_type" "property_signature" "namespace_export" "export_statement" "enum_assignment" "public_field_definition" "method_signature" "primary_expression" "enum_body" "import_statement" "pair_pattern" "jsx_attribute"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("rest_pattern" "augmented_assignment_expression" "assignment_expression" "pattern" "type_query" "primary_expression" "for_in_statement" "instantiation_expression"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("template_string" ("primary_expression" "call_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("asserts" "required_parameter" "primary_expression" "type_predicate" "optional_parameter"))
   ("this_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression" "literal_type"))
   ("try_statement" ("statement"))
   ("tuple_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("generator_function" "construct_signature" "required_parameter" "parenthesized_expression" "abstract_method_signature" "call_signature" "function_signature" "optional_parameter" "method_definition" "generator_function_declaration" "variable_declarator" "index_signature" "property_signature" "arrow_function" "public_field_definition" "catch_clause" "method_signature" "function_declaration" "function"))
   ("type_arguments" ("generic_type" "type_assertion" "new_expression" "call_expression" "jsx_self_closing_element" "jsx_opening_element" "extends_clause" "instantiation_expression"))
   ("type_assertion" ("expression"))
   ("type_identifier" ("_primary_type" "type_predicate" "class" "abstract_class_declaration" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "class_declaration" "satisfies_expression" "type_parameter" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "interface_declaration" "constructor_type" "extends_type_clause" "nested_type_identifier" "generic_type" "flow_maybe_type" "implements_clause" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("function_declaration" "generator_function" "construct_signature" "generator_function_declaration" "class" "call_signature" "abstract_method_signature" "abstract_class_declaration" "function_signature" "interface_declaration" "type_alias_declaration" "function_type" "arrow_function" "class_declaration" "constructor_type" "method_definition" "function" "method_signature"))
   ("type_predicate" ("type_predicate_annotation" "asserts" "function_type"))
   ("type_predicate_annotation" ("function_declaration" "generator_function" "generator_function_declaration" "abstract_method_signature" "call_signature" "function_signature" "arrow_function" "method_definition" "function" "method_signature"))
   ("type_query" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("unary_expression" ("expression" "literal_type"))
   ("undefined" ("rest_pattern" "assignment_expression" "pattern" "literal_type" "primary_expression" "for_in_statement"))
   ("union_type" ("_primary_type" "type_predicate" "index_type_query" "array_type" "default_type" "as_expression" "optional_type" "satisfies_expression" "type_arguments" "index_signature" "parenthesized_type" "opting_type_annotation" "template_type" "conditional_type" "lookup_type" "function_type" "type_alias_declaration" "constructor_type" "implements_clause" "flow_maybe_type" "readonly_type" "tuple_type" "intersection_type" "rest_type" "infer_type" "ambient_declaration" "mapped_type_clause" "union_type" "constraint" "type_annotation" "omitting_type_annotation"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  )
)
;; END Inverse production rules for typescript
;; START All node types in typescript
(defconst combobulate-rules-typescript-types
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_assertion" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression")
)
;; END All node types in typescript
;; START All supertypes in typescript
(defconst combobulate-rules-typescript-supertypes
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement")
)
;; END All supertypes in typescript

;; START Production rules for javascript
(defconst combobulate-rules-javascript
 '(("arguments" (:*unnamed* ("expression" "spread_element")))
 ("array" (:*unnamed* ("expression" "spread_element")))
 ("array_pattern" (:*unnamed* ("pattern" "assignment_pattern")))
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters")))
 ("assignment_expression" (:*unnamed* nil :left ("object_pattern" "array_pattern" "undefined" "identifier" "subscript_expression" "parenthesized_expression" "member_expression") :right ("expression")))
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression")))
 ("augmented_assignment_expression" (:*unnamed* nil :left ("identifier" "parenthesized_expression" "member_expression" "subscript_expression") :operator nil :right ("expression")))
 ("await_expression" (:*unnamed* ("expression")))
 ("binary_expression" (:*unnamed* nil :left ("expression" "private_property_identifier") :operator nil :right ("expression")))
 ("break_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :optional_chain ("optional_chain")))
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("object_pattern" "array_pattern" "identifier")))
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_body" (:*unnamed* nil :member ("method_definition" "field_definition" "class_static_block") :template ("glimmer_template")))
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier")))
 ("class_heritage" (:*unnamed* ("expression")))
 ("class_static_block" (:*unnamed* nil :body ("statement_block")))
 ("comment" (:*unnamed* nil))
 ("computed_property_name" (:*unnamed* ("expression")))
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("debugger_statement" (:*unnamed* nil))
 ("declaration" (:*unnamed* ("function_declaration" "generator_function_declaration" "variable_declaration" "class_declaration" "lexical_declaration")))
 ("decorator" (:*unnamed* ("identifier" "call_expression" "member_expression")))
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("empty_statement" (:*unnamed* nil))
 ("escape_sequence" (:*unnamed* nil))
 ("export_clause" (:*unnamed* ("export_specifier")))
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string")))
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression")))
 ("expression" (:*unnamed* ("glimmer_template" "augmented_assignment_expression" "assignment_expression" "jsx_element" "new_expression" "primary_expression" "yield_expression" "jsx_self_closing_element" "await_expression" "update_expression" "ternary_expression" "unary_expression" "binary_expression")))
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("false" (:*unnamed* nil))
 ("field_definition" (:*unnamed* nil :decorator ("decorator") :property ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("finally_clause" (:*unnamed* nil :body ("statement_block")))
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("object_pattern" "array_pattern" "undefined" "identifier" "subscript_expression" "parenthesized_expression" "member_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression")))
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("empty_statement" "expression_statement") :increment ("expression" "sequence_expression") :initializer ("empty_statement" "lexical_declaration" "expression_statement" "variable_declaration")))
 ("formal_parameters" (:*unnamed* ("pattern" "assignment_pattern")))
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters")))
 ("glimmer_closing_tag" (:*unnamed* nil))
 ("glimmer_opening_tag" (:*unnamed* nil))
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag")))
 ("hash_bang_line" (:*unnamed* nil))
 ("identifier" (:*unnamed* nil))
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("import" (:*unnamed* nil))
 ("import_clause" (:*unnamed* ("namespace_import" "named_imports" "identifier")))
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string")))
 ("import_statement" (:*unnamed* ("import_clause") :source ("string")))
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "jsx_element" "string" "jsx_self_closing_element")))
 ("jsx_closing_element" (:*unnamed* nil :name ("jsx_namespace_name" "identifier" "member_expression")))
 ("jsx_element" (:*unnamed* ("jsx_expression" "jsx_element" "jsx_self_closing_element" "jsx_text") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element")))
 ("jsx_expression" (:*unnamed* ("expression" "spread_element" "sequence_expression")))
 ("jsx_namespace_name" (:*unnamed* ("identifier")))
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression")))
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_expression" "jsx_attribute") :name ("jsx_namespace_name" "identifier" "member_expression")))
 ("jsx_text" (:*unnamed* nil))
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier")))
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil))
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("property_identifier" "private_property_identifier")))
 ("meta_property" (:*unnamed* nil))
 ("method_definition" (:*unnamed* nil :body ("statement_block") :decorator ("decorator") :name ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :parameters ("formal_parameters")))
 ("named_imports" (:*unnamed* ("import_specifier")))
 ("namespace_export" (:*unnamed* ("identifier" "string")))
 ("namespace_import" (:*unnamed* ("identifier")))
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("new_expression" "primary_expression")))
 ("null" (:*unnamed* nil))
 ("number" (:*unnamed* nil))
 ("object" (:*unnamed* ("spread_element" "pair" "method_definition" "shorthand_property_identifier")))
 ("object_assignment_pattern" (:*unnamed* nil :left ("object_pattern" "array_pattern" "shorthand_property_identifier_pattern") :right ("expression")))
 ("object_pattern" (:*unnamed* ("object_assignment_pattern" "pair_pattern" "rest_pattern" "shorthand_property_identifier_pattern")))
 ("optional_chain" (:*unnamed* nil))
 ("pair" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("expression")))
 ("pair_pattern" (:*unnamed* nil :key ("property_identifier" "computed_property_name" "private_property_identifier" "string" "number") :value ("pattern" "assignment_pattern")))
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression")))
 ("pattern" (:*unnamed* ("object_pattern" "array_pattern" "undefined" "identifier" "rest_pattern" "subscript_expression" "member_expression")))
 ("primary_expression" (:*unnamed* ("regex" "generator_function" "null" "subscript_expression" "parenthesized_expression" "class" "meta_property" "undefined" "template_string" "super" "string" "arrow_function" "identifier" "object" "array" "member_expression" "false" "true" "this" "import" "number" "call_expression" "function")))
 ("private_property_identifier" (:*unnamed* nil))
 ("program" (:*unnamed* ("statement" "hash_bang_line")))
 ("property_identifier" (:*unnamed* nil))
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern")))
 ("regex_flags" (:*unnamed* nil))
 ("regex_pattern" (:*unnamed* nil))
 ("rest_pattern" (:*unnamed* ("object_pattern" "array_pattern" "undefined" "identifier" "subscript_expression" "member_expression")))
 ("return_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression")))
 ("shorthand_property_identifier" (:*unnamed* nil))
 ("shorthand_property_identifier_pattern" (:*unnamed* nil))
 ("spread_element" (:*unnamed* ("expression")))
 ("statement" (:*unnamed* ("break_statement" "if_statement" "do_statement" "while_statement" "export_statement" "empty_statement" "for_in_statement" "debugger_statement" "for_statement" "switch_statement" "return_statement" "statement_block" "expression_statement" "labeled_statement" "import_statement" "with_statement" "declaration" "try_statement" "throw_statement" "continue_statement")))
 ("statement_block" (:*unnamed* ("statement")))
 ("statement_identifier" (:*unnamed* nil))
 ("string" (:*unnamed* ("string_fragment" "escape_sequence")))
 ("string_fragment" (:*unnamed* nil))
 ("subscript_expression" (:*unnamed* nil :index ("expression" "sequence_expression") :object ("expression") :optional_chain ("optional_chain")))
 ("super" (:*unnamed* nil))
 ("switch_body" (:*unnamed* ("switch_case" "switch_default")))
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression")))
 ("switch_default" (:*unnamed* nil :body ("statement")))
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression")))
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence")))
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression")))
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression")))
 ("this" (:*unnamed* nil))
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression")))
 ("true" (:*unnamed* nil))
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause")))
 ("unary_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("undefined" (:*unnamed* nil))
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("variable_declaration" (:*unnamed* ("variable_declarator")))
 ("variable_declarator" (:*unnamed* nil :name ("object_pattern" "array_pattern" "identifier") :value ("expression")))
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression")))
 ("yield_expression" (:*unnamed* ("expression")))
))
;; END Production rules for javascript
;; START Inverse production rules for javascript
(defconst combobulate-rules-javascript-inverse
 '(("arguments" ("new_expression" "call_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("arrow_function" ("primary_expression"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("formal_parameters" "pair_pattern" "array_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("primary_expression" "decorator"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class_declaration" "class"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class_declaration" "class"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("pair_pattern" "method_definition" "pair" "field_definition"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("statement" "export_statement"))
   ("decorator" ("class" "field_definition" "export_statement" "class_declaration" "method_definition"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("escape_sequence" ("template_string" "string"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement"))
   ("expression" ("computed_property_name" "subscript_expression" "parenthesized_expression" "update_expression" "ternary_expression" "assignment_pattern" "array" "arguments" "member_expression" "for_statement" "return_statement" "spread_element" "template_substitution" "yield_expression" "await_expression" "variable_declarator" "switch_case" "pair" "assignment_expression" "object_assignment_pattern" "export_statement" "arrow_function" "binary_expression" "class_heritage" "augmented_assignment_expression" "sequence_expression" "call_expression" "expression_statement" "jsx_expression" "unary_expression" "for_in_statement" "field_definition" "throw_statement"))
   ("expression_statement" ("for_statement" "statement"))
   ("false" ("primary_expression"))
   ("field_definition" ("class_body"))
   ("finally_clause" ("try_statement"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("function_declaration" "generator_function_declaration" "generator_function" "arrow_function" "method_definition" "function"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression" "class_body"))
   ("hash_bang_line" ("program"))
   ("identifier" ("namespace_import" "pattern" "generator_function" "class" "jsx_namespace_name" "rest_pattern" "member_expression" "import_specifier" "generator_function_declaration" "import_clause" "export_specifier" "class_declaration" "variable_declarator" "assignment_expression" "jsx_closing_element" "jsx_self_closing_element" "jsx_opening_element" "namespace_export" "arrow_function" "catch_clause" "decorator" "function_declaration" "augmented_assignment_expression" "primary_expression" "for_in_statement" "function"))
   ("if_statement" ("statement"))
   ("import" ("primary_expression"))
   ("import_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("expression" "jsx_element" "jsx_attribute"))
   ("jsx_expression" ("jsx_opening_element" "jsx_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_closing_element" "jsx_attribute" "jsx_self_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("expression" "jsx_element" "jsx_attribute"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("declaration" "for_statement"))
   ("member_expression" ("rest_pattern" "member_expression" "augmented_assignment_expression" "assignment_expression" "pattern" "primary_expression" "jsx_closing_element" "jsx_self_closing_element" "jsx_opening_element" "for_in_statement" "decorator"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("object" "class_body"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("new_expression" ("new_expression" "expression"))
   ("null" ("primary_expression"))
   ("number" ("pair" "primary_expression" "field_definition" "pair_pattern" "method_definition"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("rest_pattern" "assignment_expression" "pattern" "object_assignment_pattern" "for_in_statement" "variable_declarator" "catch_clause"))
   ("optional_chain" ("subscript_expression" "call_expression" "member_expression"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("augmented_assignment_expression" "assignment_expression" "switch_statement" "primary_expression" "do_statement" "if_statement" "while_statement" "with_statement" "for_in_statement"))
   ("pattern" ("formal_parameters" "pair_pattern" "array_pattern" "assignment_pattern"))
   ("primary_expression" ("new_expression" "expression"))
   ("private_property_identifier" ("pair" "binary_expression" "field_definition" "pair_pattern" "method_definition" "member_expression"))
   ("property_identifier" ("jsx_attribute" "pair" "field_definition" "pair_pattern" "method_definition" "member_expression"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("rest_pattern" ("object_pattern" "pattern"))
   ("return_statement" ("statement"))
   ("sequence_expression" ("switch_case" "for_statement" "sequence_expression" "return_statement" "subscript_expression" "parenthesized_expression" "template_substitution" "expression_statement" "jsx_expression" "for_in_statement" "throw_statement"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "jsx_expression" "array" "arguments"))
   ("statement" ("switch_case" "for_statement" "statement_block" "do_statement" "if_statement" "labeled_statement" "while_statement" "with_statement" "switch_default" "else_clause" "for_in_statement" "program"))
   ("statement_block" ("function_declaration" "generator_function" "generator_function_declaration" "class_static_block" "function" "finally_clause" "statement" "arrow_function" "try_statement" "method_definition" "catch_clause"))
   ("statement_identifier" ("labeled_statement" "break_statement" "continue_statement"))
   ("string" ("import_specifier" "pair_pattern" "pair" "namespace_export" "primary_expression" "method_definition" "import_statement" "export_statement" "export_specifier" "field_definition" "jsx_attribute"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("rest_pattern" "augmented_assignment_expression" "assignment_expression" "pattern" "primary_expression" "for_in_statement"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_string" ("primary_expression" "call_expression"))
   ("template_substitution" ("template_string"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression"))
   ("try_statement" ("statement"))
   ("unary_expression" ("expression"))
   ("undefined" ("assignment_expression" "pattern" "primary_expression" "rest_pattern" "for_in_statement"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("declaration" "for_statement"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  )
)
;; END Inverse production rules for javascript
;; START All node types in javascript
(defconst combobulate-rules-javascript-types
 '("arguments" "array" "array_pattern" "arrow_function" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "continue_statement" "debugger_statement" "declaration" "decorator" "do_statement" "else_clause" "empty_statement" "escape_sequence" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "false" "field_definition" "finally_clause" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "generator_function" "generator_function_declaration" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "import" "import_clause" "import_specifier" "import_statement" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "member_expression" "meta_property" "method_definition" "named_imports" "namespace_export" "namespace_import" "new_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "optional_chain" "pair" "pair_pattern" "parenthesized_expression" "pattern" "primary_expression" "private_property_identifier" "program" "property_identifier" "regex" "regex_flags" "regex_pattern" "rest_pattern" "return_statement" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_string" "template_substitution" "ternary_expression" "this" "throw_statement" "true" "try_statement" "unary_expression" "undefined" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression")
)
;; END All node types in javascript
;; START All supertypes in javascript
(defconst combobulate-rules-javascript-supertypes
 '("declaration" "expression" "pattern" "primary_expression" "statement")
)
;; END All supertypes in javascript

;; START Production rules for go
(defconst combobulate-rules-go
 '(("_expression" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("_simple_statement" (:*unnamed* ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement")))
 ("_simple_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("_statement" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement")))
 ("_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("argument_list" (:*unnamed* ("composite_literal" "qualified_type" "slice_expression" "parenthesized_expression" "channel_type" "array_type" "true" "false" "func_literal" "map_type" "selector_expression" "type_identifier" "negated_type" "imaginary_literal" "raw_string_literal" "iota" "interpreted_string_literal" "int_literal" "parenthesized_type" "interface_type" "type_assertion_expression" "index_expression" "type_conversion_expression" "struct_type" "function_type" "identifier" "rune_literal" "binary_expression" "generic_type" "call_expression" "slice_type" "float_literal" "variadic_argument" "union_type" "unary_expression" "nil" "pointer_type")))
 ("array_type" (:*unnamed* nil :element ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :length ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("assignment_statement" (:*unnamed* nil :left ("expression_list") :operator nil :right ("expression_list")))
 ("binary_expression" (:*unnamed* nil :left ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :operator nil :right ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("blank_identifier" (:*unnamed* nil))
 ("block" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement")))
 ("break_statement" (:*unnamed* ("label_name")))
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :type_arguments ("type_arguments")))
 ("channel_type" (:*unnamed* nil :value ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("comment" (:*unnamed* nil))
 ("communication_case" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement") :communication ("receive_statement" "send_statement")))
 ("composite_literal" (:*unnamed* nil :body ("literal_value") :type ("qualified_type" "map_type" "generic_type" "implicit_length_array_type" "slice_type" "struct_type" "type_identifier" "array_type")))
 ("const_declaration" (:*unnamed* ("const_spec")))
 ("const_spec" (:*unnamed* nil :name ("identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :value ("expression_list")))
 ("continue_statement" (:*unnamed* ("label_name")))
 ("dec_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("default_case" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement")))
 ("defer_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("dot" (:*unnamed* nil))
 ("empty_statement" (:*unnamed* nil))
 ("escape_sequence" (:*unnamed* nil))
 ("expression_case" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement") :value ("expression_list")))
 ("expression_list" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("expression_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("expression_switch_statement" (:*unnamed* ("expression_case" "default_case") :initializer ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement") :value ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("fallthrough_statement" (:*unnamed* nil))
 ("false" (:*unnamed* nil))
 ("field_declaration" (:*unnamed* nil :name ("field_identifier") :tag ("raw_string_literal" "interpreted_string_literal") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("field_declaration_list" (:*unnamed* ("field_declaration")))
 ("field_identifier" (:*unnamed* nil))
 ("float_literal" (:*unnamed* nil))
 ("for_clause" (:*unnamed* nil :condition ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :initializer ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement") :update ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement")))
 ("for_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "for_clause" "range_clause" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :body ("block")))
 ("func_literal" (:*unnamed* nil :body ("block") :parameters ("parameter_list") :result ("qualified_type" "map_type" "generic_type" "interface_type" "parameter_list" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("function_declaration" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameter_list") :result ("qualified_type" "map_type" "generic_type" "interface_type" "parameter_list" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :type_parameters ("type_parameter_list")))
 ("function_type" (:*unnamed* nil :parameters ("parameter_list") :result ("qualified_type" "map_type" "generic_type" "interface_type" "parameter_list" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("generic_type" (:*unnamed* nil :type ("qualified_type" "negated_type" "union_type" "type_identifier") :type_arguments ("type_arguments")))
 ("go_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("goto_statement" (:*unnamed* ("label_name")))
 ("identifier" (:*unnamed* nil))
 ("if_statement" (:*unnamed* nil :alternative ("if_statement" "block") :condition ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :consequence ("block") :initializer ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement")))
 ("imaginary_literal" (:*unnamed* nil))
 ("implicit_length_array_type" (:*unnamed* nil :element ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("import_declaration" (:*unnamed* ("import_spec" "import_spec_list")))
 ("import_spec" (:*unnamed* nil :name ("blank_identifier" "dot" "package_identifier") :path ("raw_string_literal" "interpreted_string_literal")))
 ("import_spec_list" (:*unnamed* ("import_spec")))
 ("inc_statement" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("index_expression" (:*unnamed* nil :index ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("int_literal" (:*unnamed* nil))
 ("interface_type" (:*unnamed* ("constraint_elem" "method_spec" "struct_elem")))
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence")))
 ("iota" (:*unnamed* nil))
 ("keyed_element" (:*unnamed* ("literal_element")))
 ("label_name" (:*unnamed* nil))
 ("labeled_statement" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement") :label ("label_name")))
 ("literal_element" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "literal_value" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("literal_value" (:*unnamed* ("keyed_element" "literal_element")))
 ("map_type" (:*unnamed* nil :key ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :value ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("method_declaration" (:*unnamed* nil :body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("qualified_type" "map_type" "generic_type" "interface_type" "parameter_list" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("method_spec" (:*unnamed* nil :name ("field_identifier") :parameters ("parameter_list") :result ("qualified_type" "map_type" "generic_type" "interface_type" "parameter_list" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("negated_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("nil" (:*unnamed* nil))
 ("package_clause" (:*unnamed* ("package_identifier")))
 ("package_identifier" (:*unnamed* nil))
 ("parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("parameter_list" (:*unnamed* ("variadic_parameter_declaration" "parameter_declaration")))
 ("parenthesized_expression" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("parenthesized_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("pointer_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("qualified_type" (:*unnamed* nil :name ("type_identifier") :package ("package_identifier")))
 ("range_clause" (:*unnamed* nil :left ("expression_list") :right ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("raw_string_literal" (:*unnamed* nil))
 ("receive_statement" (:*unnamed* nil :left ("expression_list") :right ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("return_statement" (:*unnamed* ("expression_list")))
 ("rune_literal" (:*unnamed* nil))
 ("select_statement" (:*unnamed* ("communication_case" "default_case")))
 ("selector_expression" (:*unnamed* nil :field ("field_identifier") :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("send_statement" (:*unnamed* nil :channel ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :value ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("short_var_declaration" (:*unnamed* nil :left ("expression_list") :right ("expression_list")))
 ("slice_expression" (:*unnamed* nil :capacity ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :end ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :start ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("slice_type" (:*unnamed* nil :element ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("source_file" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "method_declaration" "break_statement" "if_statement" "import_declaration" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "function_declaration" "return_statement" "type_declaration" "defer_statement" "package_clause" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement")))
 ("struct_elem" (:*unnamed* ("struct_term")))
 ("struct_term" (:*unnamed* ("struct_type")))
 ("struct_type" (:*unnamed* ("field_declaration_list")))
 ("true" (:*unnamed* nil))
 ("type_alias" (:*unnamed* nil :name ("type_identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("type_arguments" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("type_assertion_expression" (:*unnamed* nil :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("type_case" (:*unnamed* ("short_var_declaration" "type_switch_statement" "continue_statement" "break_statement" "if_statement" "empty_statement" "goto_statement" "go_statement" "dec_statement" "send_statement" "for_statement" "expression_switch_statement" "return_statement" "type_declaration" "defer_statement" "inc_statement" "expression_statement" "labeled_statement" "select_statement" "fallthrough_statement" "var_declaration" "block" "const_declaration" "assignment_statement") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("type_conversion_expression" (:*unnamed* nil :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("type_declaration" (:*unnamed* ("type_spec" "type_alias")))
 ("type_identifier" (:*unnamed* nil))
 ("type_parameter_list" (:*unnamed* ("parameter_declaration")))
 ("type_spec" (:*unnamed* nil :name ("type_identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :type_parameters ("type_parameter_list")))
 ("type_switch_statement" (:*unnamed* ("type_case" "default_case") :alias ("expression_list") :initializer ("short_var_declaration" "dec_statement" "send_statement" "expression_statement" "inc_statement" "assignment_statement") :value ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("unary_expression" (:*unnamed* nil :operand ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal") :operator nil))
 ("union_type" (:*unnamed* ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
 ("var_declaration" (:*unnamed* ("var_spec")))
 ("var_spec" (:*unnamed* nil :name ("identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type") :value ("expression_list")))
 ("variadic_argument" (:*unnamed* ("composite_literal" "int_literal" "slice_expression" "type_assertion_expression" "index_expression" "parenthesized_expression" "type_conversion_expression" "nil" "identifier" "rune_literal" "true" "false" "func_literal" "binary_expression" "selector_expression" "call_expression" "float_literal" "imaginary_literal" "unary_expression" "raw_string_literal" "iota" "interpreted_string_literal")))
 ("variadic_parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("qualified_type" "map_type" "generic_type" "parenthesized_type" "interface_type" "channel_type" "slice_type" "struct_type" "type_identifier" "array_type" "negated_type" "union_type" "function_type" "pointer_type")))
))
;; END Production rules for go
;; START Inverse production rules for go
(defconst combobulate-rules-go-inverse
 '(("argument_list" ("call_expression"))
   ("array_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("assignment_statement" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("binary_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("blank_identifier" ("import_spec"))
   ("block" ("func_literal" "for_statement" "function_declaration" "method_declaration" "type_case" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("break_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("call_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("channel_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("communication_case" ("select_statement"))
   ("composite_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("const_declaration" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("const_spec" ("const_declaration"))
   ("constraint_elem" ("interface_type"))
   ("continue_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("dec_statement" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("default_case" ("type_switch_statement" "select_statement" "expression_switch_statement"))
   ("defer_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("dot" ("import_spec"))
   ("empty_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("expression_case" ("expression_switch_statement"))
   ("expression_list" ("receive_statement" "short_var_declaration" "type_switch_statement" "range_clause" "const_spec" "return_statement" "expression_case" "var_spec" "assignment_statement"))
   ("expression_statement" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("expression_switch_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("fallthrough_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("false" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("field_declaration" ("field_declaration_list"))
   ("field_declaration_list" ("struct_type"))
   ("field_identifier" ("selector_expression" "method_spec" "method_declaration" "field_declaration"))
   ("float_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("for_clause" ("for_statement"))
   ("for_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("func_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("function_declaration" ("source_file"))
   ("function_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("generic_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("go_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("goto_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("identifier" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "parameter_declaration" "for_statement" "const_spec" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "var_spec" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "function_declaration" "for_clause" "expression_switch_statement" "range_clause" "send_statement" "defer_statement" "variadic_parameter_declaration" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("if_statement" ("type_case" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("imaginary_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("implicit_length_array_type" ("composite_literal"))
   ("import_declaration" ("source_file"))
   ("import_spec" ("import_spec_list" "import_declaration"))
   ("import_spec_list" ("import_declaration"))
   ("inc_statement" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("index_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("int_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("interface_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("interpreted_string_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "field_declaration" "selector_expression" "import_spec" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("iota" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("keyed_element" ("literal_value"))
   ("label_name" ("labeled_statement" "goto_statement" "break_statement" "continue_statement"))
   ("labeled_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("literal_element" ("keyed_element" "literal_value"))
   ("literal_value" ("composite_literal" "literal_element"))
   ("map_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("method_declaration" ("source_file"))
   ("method_spec" ("interface_type"))
   ("negated_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "generic_type" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("nil" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("package_clause" ("source_file"))
   ("package_identifier" ("import_spec" "qualified_type" "package_clause"))
   ("parameter_declaration" ("parameter_list" "type_parameter_list"))
   ("parameter_list" ("func_literal" "function_declaration" "method_declaration" "method_spec" "function_type"))
   ("parenthesized_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("parenthesized_type" ("channel_type" "array_type" "argument_list" "parameter_declaration" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("pointer_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("qualified_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "generic_type" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("range_clause" ("for_statement"))
   ("raw_string_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "field_declaration" "selector_expression" "import_spec" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("receive_statement" ("communication_case"))
   ("return_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("rune_literal" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("select_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("selector_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("send_statement" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("short_var_declaration" ("type_switch_statement" "type_case" "for_clause" "expression_switch_statement" "_simple_statement" "_statement" "expression_case" "if_statement" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("slice_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("slice_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("struct_elem" ("interface_type"))
   ("struct_term" ("struct_elem"))
   ("struct_type" ("composite_literal" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "struct_term" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("true" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("type_alias" ("type_declaration"))
   ("type_arguments" ("generic_type" "call_expression"))
   ("type_assertion_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("type_case" ("type_switch_statement"))
   ("type_conversion_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("type_declaration" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("type_identifier" ("composite_literal" "qualified_type" "method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "generic_type" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("type_parameter_list" ("type_spec" "function_declaration"))
   ("type_spec" ("type_declaration"))
   ("type_switch_statement" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("unary_expression" ("slice_expression" "parenthesized_expression" "if_statement" "array_type" "argument_list" "for_statement" "selector_expression" "literal_element" "type_switch_statement" "type_assertion_expression" "index_expression" "type_conversion_expression" "_expression" "go_statement" "binary_expression" "receive_statement" "dec_statement" "send_statement" "for_clause" "expression_switch_statement" "range_clause" "defer_statement" "call_expression" "inc_statement" "variadic_argument" "expression_statement" "unary_expression" "expression_list"))
   ("union_type" ("method_declaration" "channel_type" "array_type" "argument_list" "parameter_declaration" "func_literal" "map_type" "const_spec" "field_declaration" "implicit_length_array_type" "type_spec" "negated_type" "type_alias" "type_arguments" "type_case" "parenthesized_type" "type_assertion_expression" "type_conversion_expression" "var_spec" "_type" "method_spec" "function_type" "_simple_type" "function_declaration" "generic_type" "variadic_parameter_declaration" "slice_type" "union_type" "pointer_type"))
   ("var_declaration" ("type_case" "_statement" "expression_case" "labeled_statement" "default_case" "communication_case" "block" "source_file"))
   ("var_spec" ("var_declaration"))
   ("variadic_argument" ("argument_list"))
   ("variadic_parameter_declaration" ("parameter_list"))
  )
)
;; END Inverse production rules for go
;; START All node types in go
(defconst combobulate-rules-go-types
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type" "argument_list" "array_type" "assignment_statement" "binary_expression" "blank_identifier" "block" "break_statement" "call_expression" "channel_type" "comment" "communication_case" "composite_literal" "const_declaration" "const_spec" "constraint_elem" "continue_statement" "dec_statement" "default_case" "defer_statement" "dot" "empty_statement" "escape_sequence" "expression_case" "expression_list" "expression_statement" "expression_switch_statement" "fallthrough_statement" "false" "field_declaration" "field_declaration_list" "field_identifier" "float_literal" "for_clause" "for_statement" "func_literal" "function_declaration" "function_type" "generic_type" "go_statement" "goto_statement" "identifier" "if_statement" "imaginary_literal" "implicit_length_array_type" "import_declaration" "import_spec" "import_spec_list" "inc_statement" "index_expression" "int_literal" "interface_type" "interpreted_string_literal" "iota" "keyed_element" "label_name" "labeled_statement" "literal_element" "literal_value" "map_type" "method_declaration" "method_spec" "negated_type" "nil" "package_clause" "package_identifier" "parameter_declaration" "parameter_list" "parenthesized_expression" "parenthesized_type" "pointer_type" "qualified_type" "range_clause" "raw_string_literal" "receive_statement" "return_statement" "rune_literal" "select_statement" "selector_expression" "send_statement" "short_var_declaration" "slice_expression" "slice_type" "source_file" "struct_elem" "struct_term" "struct_type" "true" "type_alias" "type_arguments" "type_assertion_expression" "type_case" "type_conversion_expression" "type_declaration" "type_identifier" "type_parameter_list" "type_spec" "type_switch_statement" "unary_expression" "union_type" "var_declaration" "var_spec" "variadic_argument" "variadic_parameter_declaration")
)
;; END All node types in go
;; START All supertypes in go
(defconst combobulate-rules-go-supertypes
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type")
)
;; END All supertypes in go

;; START Production rules for python
(defconst combobulate-rules-python
 '(("_compound_statement" (:*unnamed* ("for_statement" "match_statement" "if_statement" "decorated_definition" "while_statement" "with_statement" "try_statement" "class_definition" "function_definition")))
 ("_simple_statement" (:*unnamed* ("type_alias_statement" "nonlocal_statement" "break_statement" "pass_statement" "global_statement" "import_from_statement" "raise_statement" "return_statement" "future_import_statement" "delete_statement" "expression_statement" "print_statement" "import_statement" "exec_statement" "assert_statement" "continue_statement")))
 ("aliased_import" (:*unnamed* nil :alias ("identifier") :name ("dotted_name")))
 ("argument_list" (:*unnamed* ("expression" "keyword_argument" "list_splat" "parenthesized_expression" "dictionary_splat")))
 ("as_pattern" (:*unnamed* ("expression" "identifier" "case_pattern") :alias ("as_pattern_target")))
 ("assert_statement" (:*unnamed* ("expression")))
 ("assignment" (:*unnamed* nil :left ("pattern" "pattern_list") :right ("expression" "assignment" "augmented_assignment" "pattern_list" "expression_list" "yield") :type ("type")))
 ("attribute" (:*unnamed* nil :attribute ("identifier") :object ("primary_expression")))
 ("augmented_assignment" (:*unnamed* nil :left ("pattern" "pattern_list") :operator nil :right ("expression" "assignment" "augmented_assignment" "pattern_list" "expression_list" "yield")))
 ("await" (:*unnamed* ("primary_expression")))
 ("binary_operator" (:*unnamed* nil :left ("primary_expression") :operator nil :right ("primary_expression")))
 ("block" (:*unnamed* ("type_alias_statement" "assert_statement" "nonlocal_statement" "match_statement" "break_statement" "pass_statement" "if_statement" "while_statement" "global_statement" "function_definition" "import_from_statement" "raise_statement" "for_statement" "return_statement" "future_import_statement" "decorated_definition" "delete_statement" "expression_statement" "with_statement" "print_statement" "import_statement" "exec_statement" "try_statement" "class_definition" "continue_statement") :alternative ("case_clause")))
 ("boolean_operator" (:*unnamed* nil :left ("expression") :operator nil :right ("expression")))
 ("break_statement" (:*unnamed* nil))
 ("call" (:*unnamed* nil :arguments ("generator_expression" "argument_list") :function ("primary_expression")))
 ("case_clause" (:*unnamed* ("case_pattern") :consequence ("block") :guard ("if_clause")))
 ("case_pattern" (:*unnamed* ("concatenated_string" "dotted_name" "as_pattern" "string" "float" "class_pattern" "true" "false" "integer" "tuple_pattern" "keyword_pattern" "complex_pattern" "dict_pattern" "list_pattern" "splat_pattern" "none" "union_pattern")))
 ("chevron" (:*unnamed* ("expression")))
 ("class_definition" (:*unnamed* nil :body ("block") :name ("identifier") :superclasses ("argument_list") :type_parameters ("type_parameter")))
 ("class_pattern" (:*unnamed* ("case_pattern" "dotted_name")))
 ("comment" (:*unnamed* nil))
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil))
 ("complex_pattern" (:*unnamed* ("float" "integer")))
 ("concatenated_string" (:*unnamed* ("string")))
 ("conditional_expression" (:*unnamed* ("expression")))
 ("constrained_type" (:*unnamed* ("type")))
 ("continue_statement" (:*unnamed* nil))
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("class_definition" "function_definition")))
 ("decorator" (:*unnamed* ("expression")))
 ("default_parameter" (:*unnamed* nil :name ("identifier" "tuple_pattern") :value ("expression")))
 ("delete_statement" (:*unnamed* ("expression" "expression_list")))
 ("dict_pattern" (:*unnamed* ("splat_pattern") :key ("integer" "concatenated_string" "tuple_pattern" "dotted_name" "complex_pattern" "dict_pattern" "list_pattern" "splat_pattern" "string" "none" "float" "true" "union_pattern" "class_pattern" "false") :value ("case_pattern")))
 ("dictionary" (:*unnamed* ("pair" "dictionary_splat")))
 ("dictionary_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("pair")))
 ("dictionary_splat" (:*unnamed* ("expression")))
 ("dictionary_splat_pattern" (:*unnamed* ("subscript" "identifier" "attribute")))
 ("dotted_name" (:*unnamed* ("identifier")))
 ("elif_clause" (:*unnamed* nil :condition ("expression") :consequence ("block")))
 ("ellipsis" (:*unnamed* nil))
 ("else_clause" (:*unnamed* nil :body ("block")))
 ("escape_interpolation" (:*unnamed* nil))
 ("escape_sequence" (:*unnamed* nil))
 ("except_clause" (:*unnamed* ("expression" "block")))
 ("except_group_clause" (:*unnamed* ("expression" "block")))
 ("exec_statement" (:*unnamed* ("expression") :code ("identifier" "string")))
 ("expression" (:*unnamed* ("boolean_operator" "named_expression" "lambda" "not_operator" "primary_expression" "conditional_expression" "as_pattern" "comparison_operator")))
 ("expression_list" (:*unnamed* ("expression")))
 ("expression_statement" (:*unnamed* ("expression" "assignment" "augmented_assignment" "yield")))
 ("false" (:*unnamed* nil))
 ("finally_clause" (:*unnamed* ("block")))
 ("float" (:*unnamed* nil))
 ("for_in_clause" (:*unnamed* nil :left ("pattern" "pattern_list") :right ("expression")))
 ("for_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :left ("pattern" "pattern_list") :right ("expression" "expression_list")))
 ("format_expression" (:*unnamed* nil :expression ("expression" "expression_list" "yield" "pattern_list") :format_specifier ("format_specifier") :type_conversion ("type_conversion")))
 ("format_specifier" (:*unnamed* ("format_expression")))
 ("function_definition" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type") :type_parameters ("type_parameter")))
 ("future_import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name")))
 ("generator_expression" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("generic_type" (:*unnamed* ("identifier" "type_parameter")))
 ("global_statement" (:*unnamed* ("identifier")))
 ("identifier" (:*unnamed* nil))
 ("if_clause" (:*unnamed* ("expression")))
 ("if_statement" (:*unnamed* nil :alternative ("elif_clause" "else_clause") :condition ("expression") :consequence ("block")))
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("dotted_name" "relative_import") :name ("aliased_import" "dotted_name")))
 ("import_prefix" (:*unnamed* nil))
 ("import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name")))
 ("integer" (:*unnamed* nil))
 ("interpolation" (:*unnamed* nil :expression ("expression" "expression_list" "yield" "pattern_list") :format_specifier ("format_specifier") :type_conversion ("type_conversion")))
 ("keyword_argument" (:*unnamed* nil :name ("identifier") :value ("expression")))
 ("keyword_pattern" (:*unnamed* ("concatenated_string" "dotted_name" "string" "identifier" "float" "class_pattern" "true" "false" "integer" "tuple_pattern" "complex_pattern" "dict_pattern" "list_pattern" "splat_pattern" "none" "union_pattern")))
 ("keyword_separator" (:*unnamed* nil))
 ("lambda" (:*unnamed* nil :body ("expression") :parameters ("lambda_parameters")))
 ("lambda_parameters" (:*unnamed* ("parameter")))
 ("line_continuation" (:*unnamed* nil))
 ("list" (:*unnamed* ("expression" "list_splat" "yield" "parenthesized_list_splat")))
 ("list_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("list_pattern" (:*unnamed* ("case_pattern" "pattern")))
 ("list_splat" (:*unnamed* ("expression" "identifier" "subscript" "attribute")))
 ("list_splat_pattern" (:*unnamed* ("subscript" "identifier" "attribute")))
 ("match_statement" (:*unnamed* nil :body ("block") :subject ("expression")))
 ("member_type" (:*unnamed* ("identifier" "type")))
 ("module" (:*unnamed* ("type_alias_statement" "assert_statement" "nonlocal_statement" "match_statement" "break_statement" "pass_statement" "if_statement" "while_statement" "global_statement" "function_definition" "import_from_statement" "raise_statement" "for_statement" "return_statement" "future_import_statement" "decorated_definition" "delete_statement" "expression_statement" "with_statement" "print_statement" "import_statement" "exec_statement" "try_statement" "class_definition" "continue_statement")))
 ("named_expression" (:*unnamed* nil :name ("identifier") :value ("expression")))
 ("none" (:*unnamed* nil))
 ("nonlocal_statement" (:*unnamed* ("identifier")))
 ("not_operator" (:*unnamed* nil :argument ("expression")))
 ("pair" (:*unnamed* nil :key ("expression") :value ("expression")))
 ("parameter" (:*unnamed* ("keyword_separator" "tuple_pattern" "dictionary_splat_pattern" "typed_parameter" "list_splat_pattern" "typed_default_parameter" "default_parameter" "identifier" "positional_separator")))
 ("parameters" (:*unnamed* ("parameter")))
 ("parenthesized_expression" (:*unnamed* ("expression" "parenthesized_expression" "list_splat" "yield")))
 ("parenthesized_list_splat" (:*unnamed* ("parenthesized_expression" "list_splat")))
 ("pass_statement" (:*unnamed* nil))
 ("pattern" (:*unnamed* ("subscript" "list_pattern" "tuple_pattern" "identifier" "list_splat_pattern" "attribute")))
 ("pattern_list" (:*unnamed* ("pattern")))
 ("positional_separator" (:*unnamed* nil))
 ("primary_expression" (:*unnamed* ("concatenated_string" "list" "parenthesized_expression" "set_comprehension" "dictionary_comprehension" "generator_expression" "string" "identifier" "float" "false" "true" "integer" "call" "list_splat" "tuple" "set" "dictionary" "none" "unary_operator" "subscript" "await" "binary_operator" "list_comprehension" "ellipsis" "attribute")))
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression")))
 ("raise_statement" (:*unnamed* ("expression" "expression_list") :cause ("expression")))
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name")))
 ("return_statement" (:*unnamed* ("expression" "expression_list")))
 ("set" (:*unnamed* ("expression" "list_splat" "yield" "parenthesized_list_splat")))
 ("set_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression")))
 ("slice" (:*unnamed* ("expression")))
 ("splat_pattern" (:*unnamed* ("identifier")))
 ("splat_type" (:*unnamed* ("identifier")))
 ("string" (:*unnamed* ("string_start" "interpolation" "string_end" "string_content")))
 ("string_content" (:*unnamed* ("escape_sequence" "escape_interpolation")))
 ("string_end" (:*unnamed* nil))
 ("string_start" (:*unnamed* nil))
 ("subscript" (:*unnamed* nil :subscript ("expression" "slice") :value ("primary_expression")))
 ("true" (:*unnamed* nil))
 ("try_statement" (:*unnamed* ("else_clause" "except_group_clause" "except_clause" "finally_clause") :body ("block")))
 ("tuple" (:*unnamed* ("expression" "list_splat" "yield" "parenthesized_list_splat")))
 ("tuple_pattern" (:*unnamed* ("case_pattern" "pattern")))
 ("type" (:*unnamed* ("expression" "splat_type" "member_type" "generic_type" "union_type" "constrained_type")))
 ("type_alias_statement" (:*unnamed* ("type")))
 ("type_conversion" (:*unnamed* nil))
 ("type_parameter" (:*unnamed* ("type")))
 ("typed_default_parameter" (:*unnamed* nil :name ("identifier") :type ("type") :value ("expression")))
 ("typed_parameter" (:*unnamed* ("identifier" "dictionary_splat_pattern" "list_splat_pattern") :type ("type")))
 ("unary_operator" (:*unnamed* nil :argument ("primary_expression") :operator nil))
 ("union_pattern" (:*unnamed* ("integer" "concatenated_string" "tuple_pattern" "dotted_name" "complex_pattern" "dict_pattern" "list_pattern" "splat_pattern" "string" "none" "float" "true" "union_pattern" "class_pattern" "false")))
 ("union_type" (:*unnamed* ("type")))
 ("while_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :condition ("expression")))
 ("wildcard_import" (:*unnamed* nil))
 ("with_clause" (:*unnamed* ("with_item")))
 ("with_item" (:*unnamed* nil :value ("expression")))
 ("with_statement" (:*unnamed* ("with_clause") :body ("block")))
 ("yield" (:*unnamed* ("expression" "expression_list")))
))
;; END Production rules for python
;; START Inverse production rules for python
(defconst combobulate-rules-python-inverse
 '(("aliased_import" ("future_import_statement" "import_statement" "import_from_statement"))
   ("argument_list" ("call" "class_definition"))
   ("as_pattern" ("expression" "case_pattern"))
   ("as_pattern_target" ("as_pattern"))
   ("assert_statement" ("block" "_simple_statement" "module"))
   ("assignment" ("expression_statement" "assignment" "augmented_assignment"))
   ("attribute" ("dictionary_splat_pattern" "pattern" "list_splat" "primary_expression" "list_splat_pattern"))
   ("augmented_assignment" ("expression_statement" "assignment" "augmented_assignment"))
   ("await" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("block" ("for_statement" "except_clause" "match_statement" "finally_clause" "elif_clause" "if_statement" "case_clause" "except_group_clause" "while_statement" "with_statement" "else_clause" "try_statement" "class_definition" "function_definition"))
   ("boolean_operator" ("expression"))
   ("break_statement" ("block" "_simple_statement" "module"))
   ("call" ("primary_expression"))
   ("case_clause" ("block"))
   ("case_pattern" ("tuple_pattern" "dict_pattern" "as_pattern" "case_clause" "list_pattern" "class_pattern"))
   ("chevron" ("print_statement"))
   ("class_definition" ("module" "decorated_definition" "block" "_compound_statement"))
   ("class_pattern" ("case_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))
   ("comparison_operator" ("expression"))
   ("complex_pattern" ("case_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))
   ("concatenated_string" ("primary_expression" "keyword_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("conditional_expression" ("expression"))
   ("constrained_type" ("type"))
   ("continue_statement" ("block" "_simple_statement" "module"))
   ("decorated_definition" ("module" "block" "_compound_statement"))
   ("decorator" ("decorated_definition"))
   ("default_parameter" ("parameter"))
   ("delete_statement" ("block" "_simple_statement" "module"))
   ("dict_pattern" ("case_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))
   ("dictionary" ("primary_expression"))
   ("dictionary_comprehension" ("primary_expression"))
   ("dictionary_splat" ("dictionary" "argument_list"))
   ("dictionary_splat_pattern" ("parameter" "typed_parameter"))
   ("dotted_name" ("future_import_statement" "keyword_pattern" "relative_import" "dict_pattern" "aliased_import" "import_statement" "case_pattern" "union_pattern" "class_pattern" "import_from_statement"))
   ("elif_clause" ("if_statement"))
   ("ellipsis" ("primary_expression"))
   ("else_clause" ("if_statement" "try_statement" "for_statement" "while_statement"))
   ("escape_interpolation" ("string_content"))
   ("escape_sequence" ("string_content"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("exec_statement" ("block" "_simple_statement" "module"))
   ("expression" ("match_statement" "parenthesized_expression" "typed_default_parameter" "interpolation" "as_pattern" "elif_clause" "if_statement" "format_expression" "chevron" "with_item" "argument_list" "for_statement" "assignment" "not_operator" "list_splat" "except_clause" "return_statement" "keyword_argument" "print_statement" "subscript" "tuple" "for_in_clause" "lambda" "pair" "augmented_assignment" "list" "dictionary_splat" "set_comprehension" "while_statement" "generator_expression" "type" "decorator" "boolean_operator" "named_expression" "raise_statement" "set" "slice" "conditional_expression" "default_parameter" "delete_statement" "except_group_clause" "expression_statement" "exec_statement" "if_clause" "assert_statement" "expression_list" "list_comprehension" "yield"))
   ("expression_list" ("raise_statement" "for_statement" "assignment" "augmented_assignment" "return_statement" "interpolation" "delete_statement" "format_expression" "yield"))
   ("expression_statement" ("block" "_simple_statement" "module"))
   ("false" ("primary_expression" "keyword_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("finally_clause" ("try_statement"))
   ("float" ("primary_expression" "keyword_pattern" "complex_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("for_in_clause" ("set_comprehension" "dictionary_comprehension" "generator_expression" "list_comprehension"))
   ("for_statement" ("module" "block" "_compound_statement"))
   ("format_expression" ("format_specifier"))
   ("format_specifier" ("interpolation" "format_expression"))
   ("function_definition" ("module" "decorated_definition" "block" "_compound_statement"))
   ("future_import_statement" ("block" "_simple_statement" "module"))
   ("generator_expression" ("primary_expression" "call"))
   ("generic_type" ("type"))
   ("global_statement" ("block" "_simple_statement" "module"))
   ("identifier" ("splat_type" "dictionary_splat_pattern" "pattern" "parameter" "typed_default_parameter" "as_pattern" "global_statement" "aliased_import" "function_definition" "list_splat" "keyword_argument" "attribute" "nonlocal_statement" "dotted_name" "list_splat_pattern" "member_type" "named_expression" "generic_type" "typed_parameter" "primary_expression" "keyword_pattern" "default_parameter" "splat_pattern" "exec_statement" "class_definition"))
   ("if_clause" ("set_comprehension" "dictionary_comprehension" "case_clause" "generator_expression" "list_comprehension"))
   ("if_statement" ("module" "block" "_compound_statement"))
   ("import_from_statement" ("block" "_simple_statement" "module"))
   ("import_prefix" ("relative_import"))
   ("import_statement" ("block" "_simple_statement" "module"))
   ("integer" ("primary_expression" "keyword_pattern" "complex_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("interpolation" ("string"))
   ("keyword_argument" ("argument_list"))
   ("keyword_pattern" ("case_pattern"))
   ("keyword_separator" ("parameter"))
   ("lambda" ("expression"))
   ("lambda_parameters" ("lambda"))
   ("list" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("list_pattern" ("pattern" "keyword_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("list_splat" ("tuple" "set" "primary_expression" "list" "parenthesized_expression" "parenthesized_list_splat" "argument_list"))
   ("list_splat_pattern" ("pattern" "parameter" "typed_parameter"))
   ("match_statement" ("module" "block" "_compound_statement"))
   ("member_type" ("type"))
   ("named_expression" ("expression"))
   ("none" ("primary_expression" "keyword_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("nonlocal_statement" ("block" "_simple_statement" "module"))
   ("not_operator" ("expression"))
   ("pair" ("dictionary_comprehension" "dictionary"))
   ("parameter" ("parameters" "lambda_parameters"))
   ("parameters" ("function_definition"))
   ("parenthesized_expression" ("primary_expression" "parenthesized_expression" "argument_list" "parenthesized_list_splat"))
   ("parenthesized_list_splat" ("list" "tuple" "set"))
   ("pass_statement" ("block" "_simple_statement" "module"))
   ("pattern" ("for_statement" "assignment" "augmented_assignment" "tuple_pattern" "pattern_list" "list_pattern" "for_in_clause"))
   ("pattern_list" ("for_statement" "assignment" "augmented_assignment" "interpolation" "format_expression" "for_in_clause"))
   ("positional_separator" ("parameter"))
   ("primary_expression" ("call" "expression" "await" "subscript" "binary_operator" "comparison_operator" "unary_operator" "attribute"))
   ("print_statement" ("block" "_simple_statement" "module"))
   ("raise_statement" ("block" "_simple_statement" "module"))
   ("relative_import" ("import_from_statement"))
   ("return_statement" ("block" "_simple_statement" "module"))
   ("set" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("slice" ("subscript"))
   ("splat_pattern" ("case_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))
   ("splat_type" ("type"))
   ("string" ("concatenated_string" "primary_expression" "keyword_pattern" "dict_pattern" "exec_statement" "case_pattern" "union_pattern"))
   ("string_content" ("string"))
   ("string_end" ("string"))
   ("string_start" ("string"))
   ("subscript" ("dictionary_splat_pattern" "pattern" "list_splat" "primary_expression" "list_splat_pattern"))
   ("true" ("primary_expression" "keyword_pattern" "dict_pattern" "case_pattern" "union_pattern"))
   ("try_statement" ("module" "block" "_compound_statement"))
   ("tuple" ("primary_expression"))
   ("tuple_pattern" ("pattern" "parameter" "keyword_pattern" "dict_pattern" "default_parameter" "case_pattern" "union_pattern"))
   ("type" ("type_alias_statement" "assignment" "type_parameter" "typed_parameter" "typed_default_parameter" "member_type" "union_type" "constrained_type" "function_definition"))
   ("type_alias_statement" ("block" "_simple_statement" "module"))
   ("type_conversion" ("interpolation" "format_expression"))
   ("type_parameter" ("class_definition" "generic_type" "function_definition"))
   ("typed_default_parameter" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("unary_operator" ("primary_expression"))
   ("union_pattern" ("case_pattern" "union_pattern" "dict_pattern" "keyword_pattern"))
   ("union_type" ("type"))
   ("while_statement" ("module" "block" "_compound_statement"))
   ("wildcard_import" ("import_from_statement"))
   ("with_clause" ("with_statement"))
   ("with_item" ("with_clause"))
   ("with_statement" ("module" "block" "_compound_statement"))
   ("yield" ("assignment" "augmented_assignment" "set" "list" "parenthesized_expression" "interpolation" "expression_statement" "format_expression" "tuple"))
  )
)
;; END Inverse production rules for python
;; START All node types in python
(defconst combobulate-rules-python-types
 '("_compound_statement" "_simple_statement" "aliased_import" "argument_list" "as_pattern" "as_pattern_target" "assert_statement" "assignment" "attribute" "augmented_assignment" "await" "binary_operator" "block" "boolean_operator" "break_statement" "call" "case_clause" "case_pattern" "chevron" "class_definition" "class_pattern" "comment" "comparison_operator" "complex_pattern" "concatenated_string" "conditional_expression" "constrained_type" "continue_statement" "decorated_definition" "decorator" "default_parameter" "delete_statement" "dict_pattern" "dictionary" "dictionary_comprehension" "dictionary_splat" "dictionary_splat_pattern" "dotted_name" "elif_clause" "ellipsis" "else_clause" "escape_interpolation" "escape_sequence" "except_clause" "except_group_clause" "exec_statement" "expression" "expression_list" "expression_statement" "false" "finally_clause" "float" "for_in_clause" "for_statement" "format_expression" "format_specifier" "function_definition" "future_import_statement" "generator_expression" "generic_type" "global_statement" "identifier" "if_clause" "if_statement" "import_from_statement" "import_prefix" "import_statement" "integer" "interpolation" "keyword_argument" "keyword_pattern" "keyword_separator" "lambda" "lambda_parameters" "line_continuation" "list" "list_comprehension" "list_pattern" "list_splat" "list_splat_pattern" "match_statement" "member_type" "module" "named_expression" "none" "nonlocal_statement" "not_operator" "pair" "parameter" "parameters" "parenthesized_expression" "parenthesized_list_splat" "pass_statement" "pattern" "pattern_list" "positional_separator" "primary_expression" "print_statement" "raise_statement" "relative_import" "return_statement" "set" "set_comprehension" "slice" "splat_pattern" "splat_type" "string" "string_content" "string_end" "string_start" "subscript" "true" "try_statement" "tuple" "tuple_pattern" "type" "type_alias_statement" "type_conversion" "type_parameter" "typed_default_parameter" "typed_parameter" "unary_operator" "union_pattern" "union_type" "while_statement" "wildcard_import" "with_clause" "with_item" "with_statement" "yield")
)
;; END All node types in python
;; START All supertypes in python
(defconst combobulate-rules-python-supertypes
 '("_compound_statement" "_simple_statement" "expression" "parameter" "pattern" "primary_expression")
)
;; END All supertypes in python

;; START Production rules for c
(defconst combobulate-rules-c
 '(("_abstract_declarator" (:*unnamed* ("abstract_pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator")))
 ("_declarator" (:*unnamed* ("attributed_declarator" "parenthesized_declarator" "function_declarator" "identifier" "pointer_declarator" "array_declarator")))
 ("_field_declarator" (:*unnamed* ("attributed_declarator" "field_identifier" "parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator")))
 ("_type_declarator" (:*unnamed* ("attributed_declarator" "parenthesized_declarator" "function_declarator" "pointer_declarator" "primitive_type" "type_identifier" "array_declarator")))
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator") :size ("expression")))
 ("abstract_function_declarator" (:*unnamed* nil :declarator ("abstract_pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator") :parameters ("parameter_list")))
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_parenthesized_declarator" "ms_call_modifier" "abstract_pointer_declarator" "abstract_function_declarator" "abstract_array_declarator")))
 ("abstract_pointer_declarator" (:*unnamed* ("ms_pointer_modifier" "type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator")))
 ("alignas_qualifier" (:*unnamed* ("expression" "type_descriptor")))
 ("alignof_expression" (:*unnamed* nil :type ("type_descriptor")))
 ("argument_list" (:*unnamed* ("expression" "compound_statement" "preproc_defined")))
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("array_declarator" "field_identifier" "pointer_declarator" "primitive_type" "type_identifier" "attributed_declarator" "parenthesized_declarator" "identifier" "function_declarator") :size ("expression")))
 ("assignment_expression" (:*unnamed* nil :left ("pointer_expression" "identifier" "subscript_expression" "parenthesized_expression" "call_expression" "field_expression") :operator nil :right ("expression")))
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier")))
 ("attribute_declaration" (:*unnamed* ("attribute")))
 ("attribute_specifier" (:*unnamed* ("argument_list")))
 ("attributed_declarator" (:*unnamed* ("array_declarator" "field_identifier" "attribute_declaration" "pointer_declarator" "primitive_type" "type_identifier" "attributed_declarator" "parenthesized_declarator" "identifier" "function_declarator")))
 ("attributed_statement" (:*unnamed* ("statement" "attribute_declaration")))
 ("binary_expression" (:*unnamed* nil :left ("expression" "preproc_defined") :operator nil :right ("expression" "preproc_defined")))
 ("bitfield_clause" (:*unnamed* ("expression")))
 ("break_statement" (:*unnamed* nil))
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("expression")))
 ("case_statement" (:*unnamed* ("break_statement" "do_statement" "if_statement" "while_statement" "goto_statement" "attributed_statement" "for_statement" "switch_statement" "seh_leave_statement" "return_statement" "expression_statement" "labeled_statement" "type_definition" "declaration" "compound_statement" "seh_try_statement" "continue_statement") :value ("expression")))
 ("cast_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression")))
 ("char_literal" (:*unnamed* ("escape_sequence" "character")))
 ("character" (:*unnamed* nil))
 ("comma_expression" (:*unnamed* nil :left ("expression") :right ("expression" "comma_expression")))
 ("comment" (:*unnamed* nil))
 ("compound_literal_expression" (:*unnamed* nil :type ("type_descriptor") :value ("initializer_list")))
 ("compound_statement" (:*unnamed* ("preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def")))
 ("concatenated_string" (:*unnamed* ("identifier" "string_literal")))
 ("conditional_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression" "comma_expression")))
 ("continue_statement" (:*unnamed* nil))
 ("declaration" (:*unnamed* ("type_qualifier" "storage_class_specifier" "attribute_declaration" "ms_declspec_modifier" "attribute_specifier") :declarator ("array_declarator" "pointer_declarator" "init_declarator" "attributed_declarator" "ms_call_modifier" "gnu_asm_expression" "parenthesized_declarator" "identifier" "function_declarator") :type ("type_specifier")))
 ("declaration_list" (:*unnamed* ("preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def")))
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
 ("else_clause" (:*unnamed* ("statement")))
 ("enum_specifier" (:*unnamed* ("attribute_specifier") :body ("enumerator_list") :name ("type_identifier") :underlying_type ("primitive_type")))
 ("enumerator" (:*unnamed* nil :name ("identifier") :value ("expression")))
 ("enumerator_list" (:*unnamed* ("enumerator" "preproc_ifdef" "preproc_call" "preproc_if")))
 ("escape_sequence" (:*unnamed* nil))
 ("expression" (:*unnamed* ("extension_expression" "concatenated_string" "pointer_expression" "null" "assignment_expression" "sizeof_expression" "subscript_expression" "parenthesized_expression" "generic_expression" "char_literal" "number_literal" "update_expression" "identifier" "false" "true" "binary_expression" "alignof_expression" "call_expression" "conditional_expression" "offsetof_expression" "compound_literal_expression" "unary_expression" "gnu_asm_expression" "cast_expression" "field_expression" "string_literal")))
 ("expression_statement" (:*unnamed* ("expression" "comma_expression")))
 ("extension_expression" (:*unnamed* ("expression")))
 ("false" (:*unnamed* nil))
 ("field_declaration" (:*unnamed* ("type_qualifier" "storage_class_specifier" "attribute_declaration" "ms_declspec_modifier" "bitfield_clause" "attribute_specifier") :declarator ("attributed_declarator" "field_identifier" "parenthesized_declarator" "function_declarator" "pointer_declarator" "array_declarator") :type ("type_specifier")))
 ("field_declaration_list" (:*unnamed* ("preproc_ifdef" "field_declaration" "preproc_call" "preproc_if" "preproc_function_def" "preproc_def")))
 ("field_designator" (:*unnamed* ("field_identifier")))
 ("field_expression" (:*unnamed* nil :argument ("expression") :field ("field_identifier") :operator nil))
 ("field_identifier" (:*unnamed* nil))
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("expression" "comma_expression") :initializer ("declaration" "expression" "comma_expression") :update ("expression" "comma_expression")))
 ("function_declarator" (:*unnamed* ("identifier" "call_expression" "gnu_asm_expression" "attribute_specifier") :declarator ("array_declarator" "field_identifier" "pointer_declarator" "primitive_type" "type_identifier" "attributed_declarator" "parenthesized_declarator" "identifier" "function_declarator") :parameters ("parameter_list")))
 ("function_definition" (:*unnamed* ("type_qualifier" "storage_class_specifier" "ms_call_modifier" "attribute_declaration" "declaration" "ms_declspec_modifier" "attribute_specifier") :body ("compound_statement") :declarator ("attributed_declarator" "parenthesized_declarator" "function_declarator" "identifier" "pointer_declarator" "array_declarator") :type ("type_specifier")))
 ("generic_expression" (:*unnamed* ("expression" "type_descriptor")))
 ("gnu_asm_clobber_list" (:*unnamed* nil :register ("concatenated_string" "string_literal")))
 ("gnu_asm_expression" (:*unnamed* ("gnu_asm_qualifier") :assembly_code ("concatenated_string" "string_literal") :clobbers ("gnu_asm_clobber_list") :goto_labels ("gnu_asm_goto_list") :input_operands ("gnu_asm_input_operand_list") :output_operands ("gnu_asm_output_operand_list")))
 ("gnu_asm_goto_list" (:*unnamed* nil :label ("identifier")))
 ("gnu_asm_input_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression")))
 ("gnu_asm_input_operand_list" (:*unnamed* nil :operand ("gnu_asm_input_operand")))
 ("gnu_asm_output_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression")))
 ("gnu_asm_output_operand_list" (:*unnamed* nil :operand ("gnu_asm_output_operand")))
 ("gnu_asm_qualifier" (:*unnamed* nil))
 ("goto_statement" (:*unnamed* nil :label ("statement_identifier")))
 ("identifier" (:*unnamed* nil))
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement")))
 ("init_declarator" (:*unnamed* nil :declarator ("attributed_declarator" "parenthesized_declarator" "function_declarator" "identifier" "pointer_declarator" "array_declarator") :value ("expression" "initializer_list")))
 ("initializer_list" (:*unnamed* ("expression" "initializer_pair" "initializer_list")))
 ("initializer_pair" (:*unnamed* nil :designator ("subscript_designator" "subscript_range_designator" "field_designator" "field_identifier") :value ("expression" "initializer_list")))
 ("labeled_statement" (:*unnamed* ("declaration" "statement") :label ("statement_identifier")))
 ("linkage_specification" (:*unnamed* nil :body ("declaration" "function_definition" "declaration_list") :value ("string_literal")))
 ("macro_type_specifier" (:*unnamed* nil :name ("identifier") :type ("type_descriptor")))
 ("ms_based_modifier" (:*unnamed* ("argument_list")))
 ("ms_call_modifier" (:*unnamed* nil))
 ("ms_declspec_modifier" (:*unnamed* ("identifier")))
 ("ms_pointer_modifier" (:*unnamed* ("ms_unaligned_ptr_modifier" "ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unsigned_ptr_modifier")))
 ("ms_restrict_modifier" (:*unnamed* nil))
 ("ms_signed_ptr_modifier" (:*unnamed* nil))
 ("ms_unaligned_ptr_modifier" (:*unnamed* nil))
 ("ms_unsigned_ptr_modifier" (:*unnamed* nil))
 ("null" (:*unnamed* nil))
 ("number_literal" (:*unnamed* nil))
 ("offsetof_expression" (:*unnamed* nil :member ("field_identifier") :type ("type_descriptor")))
 ("parameter_declaration" (:*unnamed* ("type_qualifier" "storage_class_specifier" "attribute_declaration" "ms_declspec_modifier" "attribute_specifier") :declarator ("array_declarator" "function_declarator" "abstract_pointer_declarator" "pointer_declarator" "abstract_parenthesized_declarator" "attributed_declarator" "parenthesized_declarator" "abstract_function_declarator" "identifier" "abstract_array_declarator") :type ("type_specifier")))
 ("parameter_list" (:*unnamed* ("variadic_parameter" "compound_statement" "identifier" "parameter_declaration")))
 ("parenthesized_declarator" (:*unnamed* ("array_declarator" "field_identifier" "pointer_declarator" "primitive_type" "type_identifier" "attributed_declarator" "ms_call_modifier" "parenthesized_declarator" "identifier" "function_declarator")))
 ("parenthesized_expression" (:*unnamed* ("expression" "compound_statement" "comma_expression" "preproc_defined")))
 ("pointer_declarator" (:*unnamed* ("ms_based_modifier" "ms_pointer_modifier" "type_qualifier") :declarator ("array_declarator" "field_identifier" "pointer_declarator" "primitive_type" "type_identifier" "attributed_declarator" "parenthesized_declarator" "identifier" "function_declarator")))
 ("pointer_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("preproc_arg" (:*unnamed* nil))
 ("preproc_call" (:*unnamed* nil :argument ("preproc_arg") :directive ("preproc_directive")))
 ("preproc_def" (:*unnamed* nil :name ("identifier") :value ("preproc_arg")))
 ("preproc_defined" (:*unnamed* ("identifier")))
 ("preproc_directive" (:*unnamed* nil))
 ("preproc_elif" (:*unnamed* ("field_declaration" "preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "enumerator" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :condition ("parenthesized_expression" "call_expression" "char_literal" "number_literal" "preproc_defined" "unary_expression" "identifier" "binary_expression")))
 ("preproc_elifdef" (:*unnamed* ("field_declaration" "preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "enumerator" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :name ("identifier")))
 ("preproc_else" (:*unnamed* ("field_declaration" "preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "enumerator" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def")))
 ("preproc_function_def" (:*unnamed* nil :name ("identifier") :parameters ("preproc_params") :value ("preproc_arg")))
 ("preproc_if" (:*unnamed* ("field_declaration" "preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "enumerator" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :condition ("parenthesized_expression" "call_expression" "char_literal" "number_literal" "preproc_defined" "unary_expression" "identifier" "binary_expression")))
 ("preproc_ifdef" (:*unnamed* ("field_declaration" "preproc_if" "preproc_function_def" "linkage_specification" "preproc_include" "type_specifier" "enumerator" "preproc_ifdef" "preproc_call" "type_definition" "declaration" "statement" "function_definition" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :name ("identifier")))
 ("preproc_include" (:*unnamed* nil :path ("identifier" "call_expression" "system_lib_string" "string_literal")))
 ("preproc_params" (:*unnamed* ("identifier")))
 ("primitive_type" (:*unnamed* nil))
 ("return_statement" (:*unnamed* ("expression" "comma_expression")))
 ("seh_except_clause" (:*unnamed* nil :body ("compound_statement") :filter ("parenthesized_expression")))
 ("seh_finally_clause" (:*unnamed* nil :body ("compound_statement")))
 ("seh_leave_statement" (:*unnamed* nil))
 ("seh_try_statement" (:*unnamed* ("seh_except_clause" "seh_finally_clause") :body ("compound_statement")))
 ("sized_type_specifier" (:*unnamed* ("type_qualifier") :type ("primitive_type" "type_identifier")))
 ("sizeof_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression")))
 ("statement" (:*unnamed* ("break_statement" "do_statement" "if_statement" "while_statement" "goto_statement" "case_statement" "attributed_statement" "for_statement" "switch_statement" "seh_leave_statement" "return_statement" "expression_statement" "labeled_statement" "compound_statement" "seh_try_statement" "continue_statement")))
 ("statement_identifier" (:*unnamed* nil))
 ("storage_class_specifier" (:*unnamed* nil))
 ("string_content" (:*unnamed* nil))
 ("string_literal" (:*unnamed* ("escape_sequence" "string_content")))
 ("struct_specifier" (:*unnamed* ("ms_declspec_modifier" "attribute_specifier") :body ("field_declaration_list") :name ("type_identifier")))
 ("subscript_designator" (:*unnamed* ("expression")))
 ("subscript_expression" (:*unnamed* nil :argument ("expression") :index ("expression")))
 ("subscript_range_designator" (:*unnamed* nil :end ("expression") :start ("expression")))
 ("switch_statement" (:*unnamed* nil :body ("compound_statement") :condition ("parenthesized_expression")))
 ("system_lib_string" (:*unnamed* nil))
 ("translation_unit" (:*unnamed* ("linkage_specification" "preproc_include" "break_statement" "if_statement" "do_statement" "while_statement" "preproc_call" "preproc_if" "preproc_ifdef" "case_statement" "goto_statement" "attributed_statement" "function_definition" "for_statement" "switch_statement" "return_statement" "preproc_function_def" "type_specifier" "expression_statement" "labeled_statement" "type_definition" "declaration" "compound_statement" "continue_statement" "preproc_def")))
 ("true" (:*unnamed* nil))
 ("type_definition" (:*unnamed* ("type_qualifier" "attribute_specifier") :declarator ("attributed_declarator" "parenthesized_declarator" "function_declarator" "pointer_declarator" "primitive_type" "type_identifier" "array_declarator") :type ("type_specifier")))
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_array_declarator") :type ("type_specifier")))
 ("type_identifier" (:*unnamed* nil))
 ("type_qualifier" (:*unnamed* ("alignas_qualifier")))
 ("type_specifier" (:*unnamed* ("sized_type_specifier" "macro_type_specifier" "struct_specifier" "primitive_type" "union_specifier" "enum_specifier" "type_identifier")))
 ("unary_expression" (:*unnamed* nil :argument ("expression" "preproc_defined") :operator nil))
 ("union_specifier" (:*unnamed* ("ms_declspec_modifier" "attribute_specifier") :body ("field_declaration_list") :name ("type_identifier")))
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil))
 ("variadic_parameter" (:*unnamed* nil))
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression")))
))
;; END Production rules for c
;; START Inverse production rules for c
(defconst combobulate-rules-c-inverse
 '(("abstract_array_declarator" ("_abstract_declarator" "abstract_pointer_declarator" "type_descriptor" "abstract_parenthesized_declarator" "abstract_function_declarator" "parameter_declaration" "abstract_array_declarator"))
   ("abstract_function_declarator" ("_abstract_declarator" "abstract_pointer_declarator" "type_descriptor" "abstract_parenthesized_declarator" "abstract_function_declarator" "parameter_declaration" "abstract_array_declarator"))
   ("abstract_parenthesized_declarator" ("_abstract_declarator" "abstract_pointer_declarator" "type_descriptor" "abstract_parenthesized_declarator" "abstract_function_declarator" "parameter_declaration" "abstract_array_declarator"))
   ("abstract_pointer_declarator" ("_abstract_declarator" "abstract_pointer_declarator" "type_descriptor" "abstract_parenthesized_declarator" "abstract_function_declarator" "parameter_declaration" "abstract_array_declarator"))
   ("alignas_qualifier" ("type_qualifier"))
   ("alignof_expression" ("expression"))
   ("argument_list" ("ms_based_modifier" "attribute_specifier" "call_expression" "attribute"))
   ("array_declarator" ("field_declaration" "_type_declarator" "pointer_declarator" "type_definition" "init_declarator" "parameter_declaration" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "declaration" "function_declarator" "_declarator" "function_definition" "array_declarator"))
   ("assignment_expression" ("expression"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("field_declaration" "attributed_declarator" "declaration" "attributed_statement" "function_definition" "parameter_declaration"))
   ("attribute_specifier" ("field_declaration" "struct_specifier" "union_specifier" "enum_specifier" "parameter_declaration" "type_definition" "declaration" "function_definition" "function_declarator"))
   ("attributed_declarator" ("field_declaration" "_type_declarator" "pointer_declarator" "type_definition" "init_declarator" "parameter_declaration" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "declaration" "function_declarator" "_declarator" "function_definition" "array_declarator"))
   ("attributed_statement" ("case_statement" "translation_unit" "statement"))
   ("binary_expression" ("preproc_if" "expression" "preproc_elif"))
   ("bitfield_clause" ("field_declaration"))
   ("break_statement" ("case_statement" "translation_unit" "statement"))
   ("call_expression" ("assignment_expression" "preproc_include" "expression" "preproc_elif" "preproc_if" "function_declarator"))
   ("case_statement" ("translation_unit" "statement"))
   ("cast_expression" ("expression"))
   ("char_literal" ("preproc_if" "expression" "preproc_elif"))
   ("character" ("char_literal"))
   ("comma_expression" ("for_statement" "return_statement" "parenthesized_expression" "conditional_expression" "expression_statement" "comma_expression"))
   ("compound_literal_expression" ("expression"))
   ("compound_statement" ("seh_except_clause" "translation_unit" "seh_finally_clause" "switch_statement" "parameter_list" "parenthesized_expression" "argument_list" "case_statement" "seh_try_statement" "statement" "function_definition"))
   ("concatenated_string" ("expression" "gnu_asm_clobber_list" "gnu_asm_expression"))
   ("conditional_expression" ("expression"))
   ("continue_statement" ("case_statement" "translation_unit" "statement"))
   ("declaration" ("for_statement" "translation_unit" "compound_statement" "linkage_specification" "preproc_elifdef" "preproc_ifdef" "labeled_statement" "preproc_elif" "preproc_if" "case_statement" "preproc_else" "function_definition" "declaration_list"))
   ("declaration_list" ("linkage_specification"))
   ("do_statement" ("case_statement" "translation_unit" "statement"))
   ("else_clause" ("if_statement"))
   ("enum_specifier" ("type_specifier"))
   ("enumerator" ("preproc_elifdef" "preproc_ifdef" "enumerator_list" "preproc_elif" "preproc_if" "preproc_else"))
   ("enumerator_list" ("enum_specifier"))
   ("escape_sequence" ("char_literal" "string_literal"))
   ("expression" ("gnu_asm_input_operand" "pointer_expression" "subscript_expression" "parenthesized_expression" "bitfield_clause" "update_expression" "alignas_qualifier" "case_statement" "argument_list" "array_declarator" "for_statement" "return_statement" "gnu_asm_output_operand" "init_declarator" "enumerator" "extension_expression" "comma_expression" "subscript_designator" "assignment_expression" "sizeof_expression" "generic_expression" "initializer_pair" "binary_expression" "initializer_list" "call_expression" "conditional_expression" "subscript_range_designator" "expression_statement" "unary_expression" "cast_expression" "field_expression" "abstract_array_declarator"))
   ("expression_statement" ("case_statement" "translation_unit" "statement"))
   ("extension_expression" ("expression"))
   ("false" ("expression"))
   ("field_declaration" ("field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "preproc_else"))
   ("field_declaration_list" ("struct_specifier" "union_specifier"))
   ("field_designator" ("initializer_pair"))
   ("field_expression" ("expression" "assignment_expression"))
   ("field_identifier" ("field_designator" "field_declaration" "pointer_declarator" "initializer_pair" "attributed_declarator" "_field_declarator" "offsetof_expression" "parenthesized_declarator" "function_declarator" "field_expression" "array_declarator"))
   ("for_statement" ("case_statement" "translation_unit" "statement"))
   ("function_declarator" ("field_declaration" "_type_declarator" "pointer_declarator" "type_definition" "init_declarator" "parameter_declaration" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "declaration" "function_declarator" "_declarator" "function_definition" "array_declarator"))
   ("function_definition" ("translation_unit" "linkage_specification" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "compound_statement" "preproc_else" "declaration_list"))
   ("generic_expression" ("expression"))
   ("gnu_asm_clobber_list" ("gnu_asm_expression"))
   ("gnu_asm_expression" ("declaration" "expression" "function_declarator"))
   ("gnu_asm_goto_list" ("gnu_asm_expression"))
   ("gnu_asm_input_operand" ("gnu_asm_input_operand_list"))
   ("gnu_asm_input_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_output_operand" ("gnu_asm_output_operand_list"))
   ("gnu_asm_output_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_qualifier" ("gnu_asm_expression"))
   ("goto_statement" ("case_statement" "translation_unit" "statement"))
   ("identifier" ("gnu_asm_input_operand" "macro_type_specifier" "pointer_declarator" "preproc_params" "expression" "attributed_declarator" "parameter_declaration" "array_declarator" "function_definition" "ms_declspec_modifier" "gnu_asm_output_operand" "init_declarator" "enumerator" "preproc_elif" "declaration" "_declarator" "function_declarator" "attribute" "preproc_def" "concatenated_string" "assignment_expression" "parameter_list" "preproc_include" "preproc_elifdef" "preproc_defined" "parenthesized_declarator" "preproc_if" "preproc_function_def" "gnu_asm_goto_list" "preproc_ifdef"))
   ("if_statement" ("case_statement" "translation_unit" "statement"))
   ("init_declarator" ("declaration"))
   ("initializer_list" ("initializer_pair" "initializer_list" "compound_literal_expression" "init_declarator"))
   ("initializer_pair" ("initializer_list"))
   ("labeled_statement" ("case_statement" "translation_unit" "statement"))
   ("linkage_specification" ("translation_unit" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "compound_statement" "preproc_else" "declaration_list"))
   ("macro_type_specifier" ("type_specifier"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_call_modifier" ("declaration" "abstract_parenthesized_declarator" "function_definition" "parenthesized_declarator"))
   ("ms_declspec_modifier" ("field_declaration" "struct_specifier" "union_specifier" "declaration" "function_definition" "parameter_declaration"))
   ("ms_pointer_modifier" ("abstract_pointer_declarator" "pointer_declarator"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("null" ("expression"))
   ("number_literal" ("preproc_if" "expression" "preproc_elif"))
   ("offsetof_expression" ("expression"))
   ("parameter_declaration" ("parameter_list"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator"))
   ("parenthesized_declarator" ("field_declaration" "_type_declarator" "pointer_declarator" "type_definition" "init_declarator" "parameter_declaration" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "declaration" "function_declarator" "_declarator" "function_definition" "array_declarator"))
   ("parenthesized_expression" ("assignment_expression" "switch_statement" "do_statement" "expression" "if_statement" "while_statement" "preproc_elif" "preproc_if" "seh_except_clause"))
   ("pointer_declarator" ("field_declaration" "_type_declarator" "pointer_declarator" "type_definition" "init_declarator" "parameter_declaration" "attributed_declarator" "_field_declarator" "parenthesized_declarator" "declaration" "function_declarator" "_declarator" "function_definition" "array_declarator"))
   ("pointer_expression" ("expression" "assignment_expression"))
   ("preproc_arg" ("preproc_function_def" "preproc_call" "preproc_def"))
   ("preproc_call" ("translation_unit" "field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_else" "preproc_elif" "preproc_if" "compound_statement" "enumerator_list" "declaration_list"))
   ("preproc_def" ("translation_unit" "field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "compound_statement" "preproc_else" "declaration_list"))
   ("preproc_defined" ("parenthesized_expression" "preproc_elif" "unary_expression" "argument_list" "preproc_if" "binary_expression"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_elifdef" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_elifdef" ("preproc_elifdef" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_else" ("preproc_elifdef" "preproc_elif" "preproc_ifdef" "preproc_if"))
   ("preproc_function_def" ("translation_unit" "field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "compound_statement" "preproc_else" "declaration_list"))
   ("preproc_if" ("translation_unit" "field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_else" "preproc_elif" "preproc_if" "compound_statement" "enumerator_list" "declaration_list"))
   ("preproc_ifdef" ("translation_unit" "field_declaration_list" "preproc_elifdef" "preproc_ifdef" "preproc_else" "preproc_elif" "preproc_if" "compound_statement" "enumerator_list" "declaration_list"))
   ("preproc_include" ("translation_unit" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "compound_statement" "preproc_else" "declaration_list"))
   ("preproc_params" ("preproc_function_def"))
   ("primitive_type" ("sized_type_specifier" "_type_declarator" "pointer_declarator" "enum_specifier" "type_specifier" "attributed_declarator" "type_definition" "parenthesized_declarator" "function_declarator" "array_declarator"))
   ("return_statement" ("case_statement" "translation_unit" "statement"))
   ("seh_except_clause" ("seh_try_statement"))
   ("seh_finally_clause" ("seh_try_statement"))
   ("seh_leave_statement" ("case_statement" "statement"))
   ("seh_try_statement" ("case_statement" "statement"))
   ("sized_type_specifier" ("type_specifier"))
   ("sizeof_expression" ("expression"))
   ("statement" ("for_statement" "preproc_if" "preproc_elifdef" "do_statement" "if_statement" "labeled_statement" "preproc_ifdef" "while_statement" "preproc_elif" "else_clause" "compound_statement" "preproc_else" "attributed_statement" "declaration_list"))
   ("statement_identifier" ("labeled_statement" "goto_statement"))
   ("storage_class_specifier" ("declaration" "field_declaration" "function_definition" "parameter_declaration"))
   ("string_content" ("string_literal"))
   ("string_literal" ("gnu_asm_input_operand" "concatenated_string" "linkage_specification" "gnu_asm_output_operand" "preproc_include" "expression" "gnu_asm_expression" "gnu_asm_clobber_list"))
   ("struct_specifier" ("type_specifier"))
   ("subscript_designator" ("initializer_pair"))
   ("subscript_expression" ("expression" "assignment_expression"))
   ("subscript_range_designator" ("initializer_pair"))
   ("switch_statement" ("case_statement" "translation_unit" "statement"))
   ("system_lib_string" ("preproc_include"))
   ("true" ("expression"))
   ("type_definition" ("translation_unit" "compound_statement" "preproc_elifdef" "preproc_ifdef" "preproc_elif" "preproc_if" "case_statement" "preproc_else" "declaration_list"))
   ("type_descriptor" ("macro_type_specifier" "alignof_expression" "sizeof_expression" "generic_expression" "alignas_qualifier" "offsetof_expression" "compound_literal_expression" "cast_expression"))
   ("type_identifier" ("sized_type_specifier" "_type_declarator" "pointer_declarator" "struct_specifier" "enum_specifier" "type_specifier" "union_specifier" "attributed_declarator" "type_definition" "parenthesized_declarator" "function_declarator" "array_declarator"))
   ("type_qualifier" ("sized_type_specifier" "abstract_array_declarator" "field_declaration" "abstract_pointer_declarator" "pointer_declarator" "type_descriptor" "parameter_declaration" "type_definition" "declaration" "function_definition" "array_declarator"))
   ("type_specifier" ("translation_unit" "field_declaration" "preproc_if" "type_descriptor" "preproc_elifdef" "parameter_declaration" "preproc_ifdef" "preproc_elif" "type_definition" "declaration" "compound_statement" "preproc_else" "function_definition" "declaration_list"))
   ("unary_expression" ("preproc_if" "expression" "preproc_elif"))
   ("union_specifier" ("type_specifier"))
   ("update_expression" ("expression"))
   ("variadic_parameter" ("parameter_list"))
   ("while_statement" ("case_statement" "translation_unit" "statement"))
  )
)
;; END Inverse production rules for c
;; START All node types in c
(defconst combobulate-rules-c-types
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator" "alignas_qualifier" "alignof_expression" "argument_list" "array_declarator" "assignment_expression" "attribute" "attribute_declaration" "attribute_specifier" "attributed_declarator" "attributed_statement" "binary_expression" "bitfield_clause" "break_statement" "call_expression" "case_statement" "cast_expression" "char_literal" "character" "comma_expression" "comment" "compound_literal_expression" "compound_statement" "concatenated_string" "conditional_expression" "continue_statement" "declaration" "declaration_list" "do_statement" "else_clause" "enum_specifier" "enumerator" "enumerator_list" "escape_sequence" "expression" "expression_statement" "extension_expression" "false" "field_declaration" "field_declaration_list" "field_designator" "field_expression" "field_identifier" "for_statement" "function_declarator" "function_definition" "generic_expression" "gnu_asm_clobber_list" "gnu_asm_expression" "gnu_asm_goto_list" "gnu_asm_input_operand" "gnu_asm_input_operand_list" "gnu_asm_output_operand" "gnu_asm_output_operand_list" "gnu_asm_qualifier" "goto_statement" "identifier" "if_statement" "init_declarator" "initializer_list" "initializer_pair" "labeled_statement" "linkage_specification" "macro_type_specifier" "ms_based_modifier" "ms_call_modifier" "ms_declspec_modifier" "ms_pointer_modifier" "ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_unsigned_ptr_modifier" "null" "number_literal" "offsetof_expression" "parameter_declaration" "parameter_list" "parenthesized_declarator" "parenthesized_expression" "pointer_declarator" "pointer_expression" "preproc_arg" "preproc_call" "preproc_def" "preproc_defined" "preproc_directive" "preproc_elif" "preproc_elifdef" "preproc_else" "preproc_function_def" "preproc_if" "preproc_ifdef" "preproc_include" "preproc_params" "primitive_type" "return_statement" "seh_except_clause" "seh_finally_clause" "seh_leave_statement" "seh_try_statement" "sized_type_specifier" "sizeof_expression" "statement" "statement_identifier" "storage_class_specifier" "string_content" "string_literal" "struct_specifier" "subscript_designator" "subscript_expression" "subscript_range_designator" "switch_statement" "system_lib_string" "translation_unit" "true" "type_definition" "type_descriptor" "type_identifier" "type_qualifier" "type_specifier" "unary_expression" "union_specifier" "update_expression" "variadic_parameter" "while_statement")
)
;; END All node types in c
;; START All supertypes in c
(defconst combobulate-rules-c-supertypes
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "expression" "statement" "type_specifier")
)
;; END All supertypes in c

;; START Production rules for html
(defconst combobulate-rules-html
 '(("attribute" (:*unnamed* ("attribute_value" "quoted_attribute_value" "attribute_name")))
 ("attribute_name" (:*unnamed* nil))
 ("attribute_value" (:*unnamed* nil))
 ("comment" (:*unnamed* nil))
 ("doctype" (:*unnamed* nil))
 ("document" (:*unnamed* ("doctype" "erroneous_end_tag" "text" "script_element" "style_element" "element" "entity")))
 ("element" (:*unnamed* ("script_element" "style_element" "element" "doctype" "erroneous_end_tag" "self_closing_tag" "start_tag" "text" "end_tag" "entity")))
 ("end_tag" (:*unnamed* ("tag_name")))
 ("entity" (:*unnamed* nil))
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name")))
 ("erroneous_end_tag_name" (:*unnamed* nil))
 ("quoted_attribute_value" (:*unnamed* ("attribute_value")))
 ("raw_text" (:*unnamed* nil))
 ("script_element" (:*unnamed* ("end_tag" "start_tag" "raw_text")))
 ("self_closing_tag" (:*unnamed* ("tag_name" "attribute")))
 ("start_tag" (:*unnamed* ("tag_name" "attribute")))
 ("style_element" (:*unnamed* ("end_tag" "start_tag" "raw_text")))
 ("tag_name" (:*unnamed* nil))
 ("text" (:*unnamed* nil))
))
;; END Production rules for html
;; START Inverse production rules for html
(defconst combobulate-rules-html-inverse
 '(("attribute" ("start_tag" "self_closing_tag"))
   ("attribute_name" ("attribute"))
   ("attribute_value" ("quoted_attribute_value" "attribute"))
   ("doctype" ("element" "document"))
   ("element" ("element" "document"))
   ("end_tag" ("script_element" "style_element" "element"))
   ("entity" ("element" "document"))
   ("erroneous_end_tag" ("element" "document"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("quoted_attribute_value" ("attribute"))
   ("raw_text" ("script_element" "style_element"))
   ("script_element" ("element" "document"))
   ("self_closing_tag" ("element"))
   ("start_tag" ("script_element" "style_element" "element"))
   ("style_element" ("element" "document"))
   ("tag_name" ("start_tag" "end_tag" "self_closing_tag"))
   ("text" ("element" "document"))
  )
)
;; END Inverse production rules for html
;; START All node types in html
(defconst combobulate-rules-html-types
 '("attribute" "attribute_name" "attribute_value" "comment" "doctype" "document" "element" "end_tag" "entity" "erroneous_end_tag" "erroneous_end_tag_name" "quoted_attribute_value" "raw_text" "script_element" "self_closing_tag" "start_tag" "style_element" "tag_name" "text")
)
;; END All node types in html
;; START All supertypes in html
(defconst combobulate-rules-html-supertypes
 nil
)
;; END All supertypes in html

;; START Production rules for toml
(defconst combobulate-rules-toml
 '(("array" (:*unnamed* ("offset_date_time" "integer" "boolean" "local_time" "local_date" "local_date_time" "inline_table" "string" "float" "array")))
 ("bare_key" (:*unnamed* nil))
 ("boolean" (:*unnamed* nil))
 ("comment" (:*unnamed* nil))
 ("document" (:*unnamed* ("table_array_element" "pair" "table")))
 ("dotted_key" (:*unnamed* ("bare_key" "dotted_key" "quoted_key")))
 ("escape_sequence" (:*unnamed* nil))
 ("float" (:*unnamed* nil))
 ("inline_table" (:*unnamed* ("pair")))
 ("integer" (:*unnamed* nil))
 ("local_date" (:*unnamed* nil))
 ("local_date_time" (:*unnamed* nil))
 ("local_time" (:*unnamed* nil))
 ("offset_date_time" (:*unnamed* nil))
 ("pair" (:*unnamed* ("offset_date_time" "integer" "boolean" "dotted_key" "local_time" "bare_key" "local_date" "local_date_time" "inline_table" "string" "float" "array" "quoted_key")))
 ("quoted_key" (:*unnamed* ("escape_sequence")))
 ("string" (:*unnamed* ("escape_sequence")))
 ("table" (:*unnamed* ("pair" "bare_key" "dotted_key" "quoted_key")))
 ("table_array_element" (:*unnamed* ("pair" "bare_key" "dotted_key" "quoted_key")))
))
;; END Production rules for toml
;; START Inverse production rules for toml
(defconst combobulate-rules-toml-inverse
 '(("array" ("pair" "array"))
   ("bare_key" ("table_array_element" "pair" "dotted_key" "table"))
   ("boolean" ("pair" "array"))
   ("dotted_key" ("table_array_element" "pair" "dotted_key" "table"))
   ("escape_sequence" ("string" "quoted_key"))
   ("float" ("pair" "array"))
   ("inline_table" ("pair" "array"))
   ("integer" ("pair" "array"))
   ("local_date" ("pair" "array"))
   ("local_date_time" ("pair" "array"))
   ("local_time" ("pair" "array"))
   ("offset_date_time" ("pair" "array"))
   ("pair" ("inline_table" "table_array_element" "table" "document"))
   ("quoted_key" ("table_array_element" "pair" "dotted_key" "table"))
   ("string" ("pair" "array"))
   ("table" ("document"))
   ("table_array_element" ("document"))
  )
)
;; END Inverse production rules for toml
;; START All node types in toml
(defconst combobulate-rules-toml-types
 '("array" "bare_key" "boolean" "comment" "document" "dotted_key" "escape_sequence" "float" "inline_table" "integer" "local_date" "local_date_time" "local_time" "offset_date_time" "pair" "quoted_key" "string" "table" "table_array_element")
)
;; END All node types in toml
;; START All supertypes in toml
(defconst combobulate-rules-toml-supertypes
 nil
)
;; END All supertypes in toml

;; START Production rules for json
(defconst combobulate-rules-json
 '(("_value" (:*unnamed* ("array" "false" "null" "string" "object" "number" "true")))
 ("array" (:*unnamed* ("array" "false" "null" "string" "object" "number" "true")))
 ("comment" (:*unnamed* nil))
 ("document" (:*unnamed* ("array" "false" "null" "string" "object" "number" "true")))
 ("escape_sequence" (:*unnamed* nil))
 ("false" (:*unnamed* nil))
 ("null" (:*unnamed* nil))
 ("number" (:*unnamed* nil))
 ("object" (:*unnamed* ("pair")))
 ("pair" (:*unnamed* nil :key ("string") :value ("array" "false" "null" "string" "object" "number" "true")))
 ("string" (:*unnamed* ("string_content")))
 ("string_content" (:*unnamed* ("escape_sequence")))
 ("true" (:*unnamed* nil))
))
;; END Production rules for json
;; START Inverse production rules for json
(defconst combobulate-rules-json-inverse
 '(("array" ("pair" "_value" "array" "document"))
   ("escape_sequence" ("string_content"))
   ("false" ("pair" "_value" "array" "document"))
   ("null" ("pair" "_value" "array" "document"))
   ("number" ("pair" "_value" "array" "document"))
   ("object" ("pair" "_value" "array" "document"))
   ("pair" ("object"))
   ("string" ("pair" "_value" "array" "document"))
   ("string_content" ("string"))
   ("true" ("pair" "_value" "array" "document"))
  )
)
;; END Inverse production rules for json
;; START All node types in json
(defconst combobulate-rules-json-types
 '("_value" "array" "comment" "document" "escape_sequence" "false" "null" "number" "object" "pair" "string" "string_content" "true")
)
;; END All node types in json
;; START All supertypes in json
(defconst combobulate-rules-json-supertypes
 '("_value")
)
;; END All supertypes in json

;; START Production rules for ocaml
(defconst combobulate-rules-ocaml
 '(("_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("_class_expression" (:*unnamed* ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("_class_field" (:*unnamed* ("class_initializer" "quoted_item_extension" "instance_variable_definition" "item_extension" "method_definition" "inheritance_definition" "type_parameter_constraint")))
 ("_class_field_specification" (:*unnamed* ("method_specification" "quoted_item_extension" "inheritance_specification" "item_extension" "instance_variable_specification" "type_parameter_constraint")))
 ("_class_type" (:*unnamed* ("class_function_type")))
 ("_constant" (:*unnamed* ("unit" "boolean" "string" "quoted_string" "number" "character")))
 ("_effect_pattern" (:*unnamed* ("constructor_pattern" "lazy_pattern" "tag_pattern")))
 ("_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("_infix_operator" (:*unnamed* ("mult_operator" "or_operator" "assign_operator" "and_operator" "concat_operator" "add_operator" "pow_operator" "rel_operator")))
 ("_module_expression" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("_parameter" (:*unnamed* ("parameter" "abstract_type")))
 ("_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "effect_pattern" "lazy_pattern")))
 ("_polymorphic_type" (:*unnamed* ("polymorphic_type")))
 ("_sequence_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("_signature_item" (:*unnamed* ("class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "include_module_type" "item_extension" "class_definition" "value_specification" "exception_definition")))
 ("_signed_constant" (:*unnamed* ("signed_number" "unit" "boolean" "string" "quoted_string" "number" "character")))
 ("_simple_class_expression" (:*unnamed* ("typed_class_expression" "extension" "quoted_extension" "class_path" "object_expression" "parenthesized_class_expression" "instantiated_class")))
 ("_simple_class_type" (:*unnamed* ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("_simple_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("_simple_module_expression" (:*unnamed* ("packed_module" "typed_module_expression" "extension" "parenthesized_module_expression" "quoted_extension")))
 ("_simple_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "boolean" "quoted_string" "constructor_path" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "extension" "number" "quoted_extension" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern")))
 ("_simple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("_structure_item" (:*unnamed* ("include_module" "class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "value_definition" "item_extension" "class_definition" "exception_definition")))
 ("_tuple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("abstract_type" (:*unnamed* ("type_constructor")))
 ("add_operator" (:*unnamed* nil))
 ("alias_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "value_pattern" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("aliased_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("and_operator" (:*unnamed* nil))
 ("application_expression" (:*unnamed* nil :argument ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "labeled_argument" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :function ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("array_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("array_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("array_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("array_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("assert_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "attribute_id" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("assign_operator" (:*unnamed* nil))
 ("attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("attribute_id" (:*unnamed* nil))
 ("attribute_payload" (:*unnamed* ("class_type_definition" "type_constructor_path" "expression_item" "cons_pattern" "open_module" "tag_pattern" "polymorphic_variant_type" "type_variable" "guard" "exception_pattern" "exception_definition" "local_open_type" "tuple_pattern" "module_definition" "object_type" "quoted_extension" "quoted_item_extension" "aliased_type" "include_module_type" "module_type_definition" "include_module" "parenthesized_type" "constructor_pattern" "range_pattern" "package_type" "effect_pattern" "external" "function_type" "value_definition" "item_extension" "lazy_pattern" "value_specification" "extension" "toplevel_directive" "alias_pattern" "constructed_type" "tuple_type" "or_pattern" "floating_attribute" "type_definition" "class_definition" "hash_type")))
 ("bigarray_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("boolean" (:*unnamed* nil))
 ("character" (:*unnamed* ("character_content")))
 ("character_content" (:*unnamed* ("escape_sequence")))
 ("class_application" (:*unnamed* nil :argument ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "labeled_argument" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :class ("typed_class_expression" "extension" "quoted_extension" "class_path" "object_expression" "parenthesized_class_expression" "instantiated_class")))
 ("class_binding" (:*unnamed* ("item_attribute" "class_function_type" "parameter" "type_variable" "abstract_type") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression") :name ("class_name")))
 ("class_body_type" (:*unnamed* ("method_specification" "type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "item_extension" "local_open_type" "extension" "object_type" "constructed_type" "inheritance_specification" "tuple_type" "quoted_extension" "floating_attribute" "quoted_item_extension" "aliased_type" "instance_variable_specification" "hash_type" "type_parameter_constraint")))
 ("class_definition" (:*unnamed* ("attribute_id" "class_binding")))
 ("class_function" (:*unnamed* ("parameter" "abstract_type") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("class_function_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "label_name" "polymorphic_variant_type" "package_type" "type_variable" "class_function_type" "hash_type" "local_open_type")))
 ("class_initializer" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "item_attribute" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("class_name" (:*unnamed* nil))
 ("class_path" (:*unnamed* ("module_path" "class_name")))
 ("class_type_binding" (:*unnamed* ("item_attribute" "type_variable") :body ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type") :name ("class_type_name")))
 ("class_type_definition" (:*unnamed* ("attribute_id" "class_type_binding")))
 ("class_type_name" (:*unnamed* nil))
 ("class_type_path" (:*unnamed* ("extended_module_path" "class_type_name")))
 ("coercion_expression" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type")))
 ("comment" (:*unnamed* nil))
 ("compilation_unit" (:*unnamed* ("include_module" "class_type_definition" "expression_item" "shebang" "open_module" "external" "value_definition" "item_extension" "exception_definition" "toplevel_directive" "module_definition" "floating_attribute" "quoted_item_extension" "type_definition" "class_definition" "module_type_definition")))
 ("concat_operator" (:*unnamed* nil))
 ("cons_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("cons_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("constrain_module" (:*unnamed* ("extended_module_path" "module_path")))
 ("constrain_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("constrain_type" (:*unnamed* ("type_constraint" "type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("constructed_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("constructor_declaration" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "constructor_path" "constructor_name" "record_declaration" "type_variable" "hash_type" "local_open_type")))
 ("constructor_name" (:*unnamed* nil))
 ("constructor_path" (:*unnamed* ("constructor_name" "module_path")))
 ("constructor_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "constructor_path" "effect_pattern" "abstract_type" "lazy_pattern") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("conversion_specification" (:*unnamed* nil))
 ("directive" (:*unnamed* nil))
 ("do_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("effect_pattern" (:*unnamed* nil :continuation ("array_pattern" "local_open_pattern" "boolean" "quoted_string" "constructor_path" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "extension" "number" "quoted_extension" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern") :effect ("constructor_pattern" "lazy_pattern" "tag_pattern")))
 ("else_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("escape_sequence" (:*unnamed* nil))
 ("exception_definition" (:*unnamed* ("attribute_id" "item_attribute" "constructor_declaration")))
 ("exception_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "attribute_id" "effect_pattern" "lazy_pattern")))
 ("expression_item" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "item_attribute" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("extended_module_path" (:*unnamed* ("extended_module_path" "module_name")))
 ("extension" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("external" (:*unnamed* ("polymorphic_type" "attribute_id" "item_attribute" "string" "parenthesized_operator" "value_name")))
 ("field_declaration" (:*unnamed* ("polymorphic_type" "field_name")))
 ("field_expression" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("field_path")))
 ("field_get_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "field_path" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("field_name" (:*unnamed* nil))
 ("field_path" (:*unnamed* ("module_path" "field_name")))
 ("field_pattern" (:*unnamed* ("type_constructor_path" "field_path" "parenthesized_type" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "polymorphic_variant_type" "package_type" "effect_pattern" "type_variable" "function_type" "exception_pattern" "lazy_pattern" "local_open_type" "tuple_pattern" "extension" "alias_pattern" "object_type" "constructed_type" "tuple_type" "quoted_extension" "or_pattern" "aliased_type" "hash_type") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("floating_attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("for_expression" (:*unnamed* ("do_clause" "attribute_id") :from ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("parenthesized_operator" "value_pattern") :to ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("fun_expression" (:*unnamed* ("type_constructor_path" "parameter" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "attribute_id" "type_variable" "abstract_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("function_expression" (:*unnamed* ("attribute_id" "match_case")))
 ("function_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "typed_label" "hash_type" "local_open_type")))
 ("functor" (:*unnamed* ("module_parameter") :body ("module_path" "functor" "module_application" "structure")))
 ("functor_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_parameter" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("guard" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("hash_expression" (:*unnamed* nil :left ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :operator ("hash_operator") :right ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("hash_operator" (:*unnamed* nil))
 ("hash_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_type_path" "hash_type" "local_open_type")))
 ("if_expression" (:*unnamed* ("else_clause" "attribute_id" "then_clause") :condition ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("include_module" (:*unnamed* ("attribute_id" "item_attribute" "module_application" "module_path" "functor" "structure")))
 ("include_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "attribute_id" "item_attribute" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("indexing_operator" (:*unnamed* nil))
 ("indexing_operator_path" (:*unnamed* ("indexing_operator" "module_path")))
 ("infix_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :operator ("mult_operator" "or_operator" "assign_operator" "and_operator" "concat_operator" "add_operator" "pow_operator" "rel_operator") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("inheritance_definition" (:*unnamed* ("item_attribute" "let_open_class_expression" "parenthesized_operator" "class_application" "class_function" "let_class_expression" "value_pattern")))
 ("inheritance_specification" (:*unnamed* ("item_attribute" "extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("instance_variable_definition" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("instance_variable_name")))
 ("instance_variable_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "instance_variable_name" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("instance_variable_name" (:*unnamed* nil))
 ("instance_variable_specification" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "local_open_type" "instance_variable_name" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "aliased_type" "hash_type")))
 ("instantiated_class" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_path" "hash_type" "local_open_type")))
 ("instantiated_class_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_type_path" "hash_type" "local_open_type")))
 ("item_attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("item_extension" (:*unnamed* ("attribute_id" "item_attribute" "attribute_payload")))
 ("label_name" (:*unnamed* nil))
 ("labeled_argument" (:*unnamed* ("prefix_expression" "type_constructor_path" "boolean" "local_open_expression" "parenthesized_expression" "polymorphic_variant_type" "constructor_path" "type_variable" "array_get_expression" "local_open_type" "record_expression" "object_type" "number" "quoted_extension" "label_name" "tag" "field_get_expression" "aliased_type" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "package_expression" "parenthesized_type" "quoted_string" "new_expression" "bigarray_get_expression" "package_type" "hash_expression" "function_type" "string" "object_expression" "extension" "constructed_type" "tuple_type" "value_path" "character" "method_invocation" "unit" "list_expression" "ocamlyacc_value" "hash_type" "array_expression")))
 ("lazy_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "attribute_id" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("lazy_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "attribute_id" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("let_and_operator" (:*unnamed* nil))
 ("let_binding" (:*unnamed* ("polymorphic_type" "item_attribute" "parameter" "abstract_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("let_class_expression" (:*unnamed* ("value_definition") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("let_exception_expression" (:*unnamed* ("exception_definition") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "value_definition" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_module_expression" (:*unnamed* ("module_definition") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_open_class_expression" (:*unnamed* ("open_module") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("let_open_class_type" (:*unnamed* ("open_module") :body ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("let_open_expression" (:*unnamed* ("open_module") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_operator" (:*unnamed* nil))
 ("line_number_directive" (:*unnamed* nil))
 ("list_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("list_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("list_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("local_open_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "package_expression" "lazy_expression" "while_expression" "object_copy_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "module_path" "assert_expression" "function_expression" "sequence_expression" "record_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "list_expression" "fun_expression" "match_expression" "array_expression")))
 ("local_open_pattern" (:*unnamed* ("array_binding_pattern" "array_pattern" "local_open_pattern" "list_binding_pattern" "cons_pattern" "record_binding_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "module_path" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("local_open_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "extended_module_path" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("match_case" (:*unnamed* ("guard") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "refutation_case" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :pattern ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "effect_pattern" "lazy_pattern")))
 ("match_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "match_case" "product_expression" "for_expression" "let_exception_expression" "match_operator" "fun_expression" "match_expression")))
 ("match_operator" (:*unnamed* nil))
 ("method_definition" (:*unnamed* ("polymorphic_type" "item_attribute" "parameter" "abstract_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("method_name")))
 ("method_invocation" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "method_name" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("method_name" (:*unnamed* nil))
 ("method_specification" (:*unnamed* ("polymorphic_type" "item_attribute" "method_name")))
 ("method_type" (:*unnamed* ("polymorphic_type" "method_name")))
 ("module_application" (:*unnamed* nil :argument ("packed_module" "typed_module_expression" "extension" "parenthesized_module_expression" "quoted_extension") :functor ("module_path" "functor" "module_application" "structure")))
 ("module_binding" (:*unnamed* ("extension" "quoted_extension" "signature" "module_parameter" "item_attribute" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :body ("module_path" "functor" "module_application" "structure") :name ("module_name")))
 ("module_definition" (:*unnamed* ("attribute_id" "module_binding")))
 ("module_name" (:*unnamed* nil))
 ("module_parameter" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :name ("module_name")))
 ("module_path" (:*unnamed* ("module_name" "module_path")))
 ("module_type_constraint" (:*unnamed* ("constrain_module" "extension" "constrain_type" "quoted_extension" "constrain_module_type" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("module_type_definition" (:*unnamed* ("attribute_id" "item_attribute") :body ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :name ("module_type_name")))
 ("module_type_name" (:*unnamed* nil))
 ("module_type_of" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("module_type_path" (:*unnamed* ("extended_module_path" "module_type_name")))
 ("mult_operator" (:*unnamed* nil))
 ("new_expression" (:*unnamed* ("class_path" "attribute_id")))
 ("number" (:*unnamed* nil))
 ("object_copy_expression" (:*unnamed* ("instance_variable_expression")))
 ("object_expression" (:*unnamed* ("type_constructor_path" "cons_pattern" "tag_pattern" "polymorphic_variant_type" "instance_variable_definition" "type_variable" "method_definition" "exception_pattern" "local_open_type" "tuple_pattern" "object_type" "quoted_extension" "quoted_item_extension" "aliased_type" "type_parameter_constraint" "parenthesized_type" "constructor_pattern" "range_pattern" "package_type" "attribute_id" "effect_pattern" "inheritance_definition" "function_type" "item_extension" "lazy_pattern" "extension" "alias_pattern" "constructed_type" "tuple_type" "or_pattern" "floating_attribute" "class_initializer" "hash_type")))
 ("object_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "method_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("ocamlyacc_value" (:*unnamed* nil))
 ("open_module" (:*unnamed* ("attribute_id" "item_attribute" "module_application" "module_path" "functor" "structure")))
 ("or_operator" (:*unnamed* nil))
 ("or_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("package_expression" (:*unnamed* ("module_application" "extension" "quoted_extension" "functor" "signature" "module_type_path" "attribute_id" "module_type_constraint" "module_path" "module_type_of" "functor_type" "parenthesized_module_type" "structure")))
 ("package_pattern" (:*unnamed* ("extension" "module_name" "quoted_extension" "signature" "attribute_id" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("package_type" (:*unnamed* ("extension" "quoted_extension" "signature" "attribute_id" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("packed_module" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "signature" "let_expression" "try_expression" "module_type_constraint" "let_module_expression" "cons_expression" "module_type_of" "assert_expression" "module_type_path" "function_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "quoted_extension" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression" "functor_type" "parenthesized_module_type")))
 ("parameter" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "label_name" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type") :pattern ("array_pattern" "local_open_pattern" "boolean" "cons_pattern" "quoted_string" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "exception_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "number" "quoted_extension" "or_pattern" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern")))
 ("parenthesized_class_expression" (:*unnamed* ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("parenthesized_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("parenthesized_module_expression" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("parenthesized_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("parenthesized_operator" (:*unnamed* ("indexing_operator" "mult_operator" "or_operator" "assign_operator" "hash_operator" "let_operator" "and_operator" "concat_operator" "prefix_operator" "let_and_operator" "match_operator" "add_operator" "pow_operator" "rel_operator")))
 ("parenthesized_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("parenthesized_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("polymorphic_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "abstract_type" "hash_type" "local_open_type")))
 ("polymorphic_variant_pattern" (:*unnamed* ("type_constructor_path")))
 ("polymorphic_variant_type" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "local_open_type" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "tag" "aliased_type" "tag_specification" "hash_type")))
 ("pow_operator" (:*unnamed* nil))
 ("prefix_expression" (:*unnamed* nil :operator ("prefix_operator") :right ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("prefix_operator" (:*unnamed* nil))
 ("pretty_printing_indication" (:*unnamed* nil))
 ("product_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("quoted_extension" (:*unnamed* ("attribute_id" "quoted_string_content")))
 ("quoted_item_extension" (:*unnamed* ("attribute_id" "item_attribute" "quoted_string_content")))
 ("quoted_string" (:*unnamed* ("quoted_string_content")))
 ("quoted_string_content" (:*unnamed* ("conversion_specification" "pretty_printing_indication")))
 ("range_pattern" (:*unnamed* ("signed_number" "unit" "boolean" "string" "quoted_string" "number" "character")))
 ("record_binding_pattern" (:*unnamed* ("field_pattern")))
 ("record_declaration" (:*unnamed* ("field_declaration")))
 ("record_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "field_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("record_pattern" (:*unnamed* ("field_pattern")))
 ("refutation_case" (:*unnamed* nil))
 ("rel_operator" (:*unnamed* nil))
 ("sequence_expression" (:*unnamed* ("attribute_id") :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("set_expression" (:*unnamed* ("instance_variable_name" "string_get_expression" "field_get_expression" "array_get_expression" "bigarray_get_expression") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("shebang" (:*unnamed* nil))
 ("sign_expression" (:*unnamed* nil :operator ("sign_operator") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("sign_operator" (:*unnamed* nil))
 ("signature" (:*unnamed* ("class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "include_module_type" "item_extension" "class_definition" "value_specification" "exception_definition")))
 ("signed_number" (:*unnamed* nil))
 ("string" (:*unnamed* ("string_content")))
 ("string_content" (:*unnamed* ("conversion_specification" "escape_sequence" "pretty_printing_indication")))
 ("string_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("structure" (:*unnamed* ("include_module" "class_type_definition" "expression_item" "toplevel_directive" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "value_definition" "item_extension" "class_definition" "exception_definition")))
 ("tag" (:*unnamed* nil))
 ("tag_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "tag" "effect_pattern" "lazy_pattern") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("tag_specification" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "tag" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("then_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("toplevel_directive" (:*unnamed* ("boolean" "quoted_string" "number" "value_path" "character" "directive" "unit" "module_path" "string")))
 ("try_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "match_case" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("tuple_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("tuple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("type_binding" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "type_constraint" "local_open_type" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "aliased_type" "hash_type") :body ("variant_declaration" "record_declaration") :name ("type_constructor_path" "type_constructor")))
 ("type_constraint" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("type_constructor" (:*unnamed* nil))
 ("type_constructor_path" (:*unnamed* ("extended_module_path" "type_constructor")))
 ("type_definition" (:*unnamed* ("attribute_id" "type_binding")))
 ("type_parameter_constraint" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("type_variable" (:*unnamed* nil))
 ("typed_class_expression" (:*unnamed* ("let_open_class_expression" "class_function_type" "class_application" "class_function" "let_class_expression")))
 ("typed_expression" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type")))
 ("typed_label" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "label_name" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("typed_module_expression" (:*unnamed* ("module_application" "extension" "quoted_extension" "functor" "signature" "module_type_path" "module_type_constraint" "module_path" "module_type_of" "functor_type" "parenthesized_module_type" "structure")))
 ("typed_pattern" (:*unnamed* ("type_constructor_path" "parenthesized_type" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "polymorphic_variant_type" "package_type" "effect_pattern" "type_variable" "function_type" "exception_pattern" "lazy_pattern" "local_open_type" "tuple_pattern" "extension" "alias_pattern" "object_type" "constructed_type" "tuple_type" "quoted_extension" "or_pattern" "aliased_type" "hash_type") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("unit" (:*unnamed* nil))
 ("value_definition" (:*unnamed* ("attribute_id" "let_operator" "let_binding" "let_and_operator")))
 ("value_name" (:*unnamed* nil))
 ("value_path" (:*unnamed* ("parenthesized_operator" "value_name" "module_path")))
 ("value_pattern" (:*unnamed* nil))
 ("value_specification" (:*unnamed* ("polymorphic_type" "attribute_id" "item_attribute" "parenthesized_operator" "value_name")))
 ("variant_declaration" (:*unnamed* ("constructor_declaration")))
 ("while_expression" (:*unnamed* ("do_clause" "attribute_id") :condition ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
))
;; END Production rules for ocaml
;; START Inverse production rules for ocaml
(defconst combobulate-rules-ocaml-inverse
 '(("abstract_type" ("polymorphic_type" "class_binding" "constructor_pattern" "method_definition" "_parameter" "fun_expression" "let_binding" "class_function"))
   ("add_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("alias_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("aliased_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("and_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("application_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("array_binding_pattern" ("local_open_pattern"))
   ("array_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("array_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("array_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("assert_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("assign_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("attribute_id" ("class_type_definition" "open_module" "parenthesized_expression" "try_expression" "package_pattern" "exception_pattern" "exception_definition" "module_definition" "quoted_extension" "quoted_item_extension" "include_module_type" "fun_expression" "match_expression" "module_type_definition" "attribute" "include_module" "if_expression" "package_expression" "new_expression" "lazy_expression" "while_expression" "package_type" "item_attribute" "external" "value_definition" "object_expression" "item_extension" "assert_expression" "lazy_pattern" "value_specification" "function_expression" "sequence_expression" "extension" "floating_attribute" "for_expression" "type_definition" "class_definition"))
   ("attribute_payload" ("extension" "floating_attribute" "item_attribute" "item_extension" "attribute"))
   ("bigarray_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("boolean" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("character" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("character_content" ("character"))
   ("class_application" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("class_binding" ("class_definition"))
   ("class_body_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("class_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("class_function" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("class_function_type" ("_class_type" "typed_class_expression" "class_binding" "class_function_type"))
   ("class_initializer" ("_class_field" "object_expression"))
   ("class_name" ("class_path" "class_binding"))
   ("class_path" ("new_expression" "class_application" "_simple_class_expression" "instantiated_class"))
   ("class_type_binding" ("class_type_definition"))
   ("class_type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("class_type_name" ("class_type_path" "class_type_binding"))
   ("class_type_path" ("instantiated_class_type" "_simple_class_type" "inheritance_specification" "let_open_class_type" "hash_type" "class_type_binding"))
   ("coercion_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("concat_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("cons_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("cons_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("constrain_module" ("module_type_constraint"))
   ("constrain_module_type" ("module_type_constraint"))
   ("constrain_type" ("module_type_constraint"))
   ("constructed_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("constructor_declaration" ("variant_declaration" "exception_definition"))
   ("constructor_name" ("constructor_path" "constructor_declaration"))
   ("constructor_path" ("prefix_expression" "array_pattern" "local_open_pattern" "parameter" "cons_pattern" "class_application" "tag_pattern" "parenthesized_pattern" "array_get_expression" "tuple_pattern" "record_expression" "list_pattern" "field_pattern" "field_get_expression" "labeled_argument" "_simple_pattern" "string_get_expression" "array_binding_pattern" "application_expression" "list_binding_pattern" "constructor_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "lazy_pattern" "constructor_declaration" "alias_pattern" "_simple_expression" "or_pattern" "method_invocation" "typed_pattern" "let_binding" "_binding_pattern"))
   ("constructor_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("conversion_specification" ("string_content" "quoted_string_content"))
   ("directive" ("toplevel_directive"))
   ("do_clause" ("for_expression" "while_expression"))
   ("effect_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "attribute_payload" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern"))
   ("else_clause" ("if_expression"))
   ("escape_sequence" ("character_content" "string_content"))
   ("exception_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "let_exception_expression" "structure"))
   ("exception_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "attribute_payload" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern"))
   ("expression_item" ("attribute_payload" "compilation_unit" "structure"))
   ("extended_module_path" ("constrain_module" "type_constructor_path" "extended_module_path" "class_type_path" "module_type_path" "local_open_type"))
   ("extension" ("parameter" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "module_application" "list_pattern" "let_open_class_type" "fun_expression" "string_get_expression" "application_expression" "package_expression" "bigarray_get_expression" "lazy_expression" "_type" "effect_pattern" "assert_expression" "tuple_type" "tag_specification" "let_binding" "prefix_expression" "array_pattern" "_simple_class_type" "instance_variable_definition" "type_constraint" "record_expression" "module_binding" "constrain_module_type" "_tuple_type" "labeled_argument" "aliased_type" "include_module_type" "_simple_pattern" "array_binding_pattern" "attribute_payload" "instantiated_class_type" "package_type" "module_type_constraint" "hash_expression" "constructed_type" "inheritance_specification" "_simple_module_expression" "functor_type" "local_open_pattern" "class_application" "field_expression" "package_pattern" "array_get_expression" "local_open_type" "object_type" "_module_type" "class_type_binding" "module_type_definition" "parenthesized_type" "instantiated_class" "_simple_class_expression" "object_expression" "lazy_pattern" "constructor_declaration" "typed_module_expression" "method_invocation" "module_parameter" "instance_variable_specification" "hash_type" "constrain_type" "cons_pattern" "typed_label" "tuple_pattern" "field_pattern" "field_get_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "type_binding" "list_binding_pattern" "constructor_pattern" "packed_module" "function_type" "_simple_type" "class_body_type" "polymorphic_type" "alias_pattern" "_simple_expression" "or_pattern" "class_function_type" "typed_pattern" "parenthesized_module_type" "_binding_pattern"))
   ("external" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("field_declaration" ("record_declaration"))
   ("field_expression" ("record_expression"))
   ("field_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("field_name" ("field_path" "field_declaration"))
   ("field_path" ("field_pattern" "field_expression" "field_get_expression"))
   ("field_pattern" ("record_binding_pattern" "record_pattern"))
   ("floating_attribute" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "object_expression" "class_body_type" "structure"))
   ("for_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("fun_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("function_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("function_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("functor" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("functor_type" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("guard" ("attribute_payload" "match_case"))
   ("hash_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("hash_operator" ("parenthesized_operator" "hash_expression"))
   ("hash_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("if_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("include_module" ("attribute_payload" "_structure_item" "compilation_unit" "structure"))
   ("include_module_type" ("attribute_payload" "_signature_item" "signature"))
   ("indexing_operator" ("parenthesized_operator" "indexing_operator_path"))
   ("indexing_operator_path" ("array_get_expression" "string_get_expression" "bigarray_get_expression"))
   ("infix_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("inheritance_definition" ("_class_field" "object_expression"))
   ("inheritance_specification" ("class_body_type" "_class_field_specification"))
   ("instance_variable_definition" ("_class_field" "object_expression"))
   ("instance_variable_expression" ("object_copy_expression"))
   ("instance_variable_name" ("instance_variable_specification" "set_expression" "instance_variable_expression" "instance_variable_definition"))
   ("instance_variable_specification" ("class_body_type" "_class_field_specification"))
   ("instantiated_class" ("class_application" "_simple_class_expression"))
   ("instantiated_class_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("item_attribute" ("method_specification" "expression_item" "open_module" "class_binding" "instance_variable_definition" "method_definition" "exception_definition" "module_binding" "quoted_item_extension" "include_module_type" "class_type_binding" "module_type_definition" "include_module" "type_parameter_constraint" "type_binding" "external" "item_extension" "value_specification" "inheritance_specification" "class_initializer" "let_binding" "instance_variable_specification" "inheritance_definition"))
   ("item_extension" ("_class_field" "attribute_payload" "compilation_unit" "_signature_item" "signature" "structure" "_structure_item" "object_expression" "class_body_type" "_class_field_specification"))
   ("label_name" ("typed_label" "parameter" "labeled_argument" "class_function_type"))
   ("labeled_argument" ("class_application" "application_expression"))
   ("lazy_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("lazy_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("let_and_operator" ("parenthesized_operator" "value_definition"))
   ("let_binding" ("value_definition"))
   ("let_class_expression" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("let_exception_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_module_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_open_class_expression" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("let_open_class_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("let_open_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_operator" ("parenthesized_operator" "value_definition"))
   ("list_binding_pattern" ("local_open_pattern"))
   ("list_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("list_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("local_open_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("local_open_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("local_open_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("match_case" ("function_expression" "try_expression" "match_expression"))
   ("match_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("match_operator" ("parenthesized_operator" "match_expression"))
   ("method_definition" ("_class_field" "object_expression"))
   ("method_invocation" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("method_name" ("method_specification" "method_type" "method_definition" "method_invocation"))
   ("method_specification" ("class_body_type" "_class_field_specification"))
   ("method_type" ("object_type"))
   ("module_application" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("module_binding" ("module_definition"))
   ("module_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "let_module_expression" "structure"))
   ("module_name" ("module_binding" "module_parameter" "extended_module_path" "module_path" "package_pattern"))
   ("module_parameter" ("module_binding" "functor" "functor_type"))
   ("module_path" ("local_open_pattern" "field_path" "open_module" "local_open_expression" "constructor_path" "module_type_of" "module_application" "module_binding" "include_module" "constrain_module" "package_expression" "functor" "_module_expression" "indexing_operator_path" "module_path" "class_path" "toplevel_directive" "typed_module_expression" "value_path" "parenthesized_module_expression"))
   ("module_type_constraint" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("module_type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("module_type_name" ("module_type_path" "module_type_definition"))
   ("module_type_of" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("module_type_path" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("mult_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("new_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("number" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("object_copy_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("object_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "_simple_class_expression" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("object_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("ocamlyacc_value" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("open_module" ("attribute_payload" "let_open_class_expression" "compilation_unit" "_signature_item" "let_open_expression" "signature" "_structure_item" "let_open_class_type" "structure"))
   ("or_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("or_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("package_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("package_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("package_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("packed_module" ("_simple_module_expression" "module_application"))
   ("parameter" ("class_binding" "method_definition" "_parameter" "fun_expression" "let_binding" "class_function"))
   ("parenthesized_class_expression" ("class_application" "_simple_class_expression"))
   ("parenthesized_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("parenthesized_module_expression" ("_simple_module_expression" "module_application"))
   ("parenthesized_module_type" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("parenthesized_operator" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "external" "lazy_pattern" "value_specification" "alias_pattern" "or_pattern" "value_path" "for_expression" "typed_pattern" "let_binding" "inheritance_definition" "_binding_pattern"))
   ("parenthesized_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("parenthesized_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("polymorphic_type" ("method_specification" "field_declaration" "method_type" "_polymorphic_type" "external" "value_specification" "let_binding" "method_definition"))
   ("polymorphic_variant_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("polymorphic_variant_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("pow_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("prefix_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("prefix_operator" ("parenthesized_operator" "prefix_expression"))
   ("pretty_printing_indication" ("string_content" "quoted_string_content"))
   ("product_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("quoted_extension" ("parameter" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "module_application" "list_pattern" "let_open_class_type" "fun_expression" "string_get_expression" "application_expression" "package_expression" "bigarray_get_expression" "lazy_expression" "_type" "effect_pattern" "assert_expression" "tuple_type" "tag_specification" "let_binding" "prefix_expression" "array_pattern" "_simple_class_type" "instance_variable_definition" "type_constraint" "record_expression" "module_binding" "constrain_module_type" "_tuple_type" "labeled_argument" "aliased_type" "include_module_type" "_simple_pattern" "array_binding_pattern" "attribute_payload" "instantiated_class_type" "package_type" "module_type_constraint" "hash_expression" "constructed_type" "inheritance_specification" "_simple_module_expression" "functor_type" "local_open_pattern" "class_application" "field_expression" "package_pattern" "array_get_expression" "local_open_type" "object_type" "_module_type" "class_type_binding" "module_type_definition" "parenthesized_type" "instantiated_class" "_simple_class_expression" "object_expression" "lazy_pattern" "constructor_declaration" "typed_module_expression" "method_invocation" "module_parameter" "instance_variable_specification" "hash_type" "constrain_type" "cons_pattern" "typed_label" "tuple_pattern" "field_pattern" "field_get_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "type_binding" "list_binding_pattern" "constructor_pattern" "packed_module" "function_type" "_simple_type" "class_body_type" "polymorphic_type" "alias_pattern" "_simple_expression" "or_pattern" "class_function_type" "typed_pattern" "parenthesized_module_type" "_binding_pattern"))
   ("quoted_item_extension" ("_class_field" "attribute_payload" "compilation_unit" "_signature_item" "signature" "structure" "_structure_item" "object_expression" "class_body_type" "_class_field_specification"))
   ("quoted_string" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("quoted_string_content" ("quoted_string" "quoted_item_extension" "quoted_extension"))
   ("range_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("record_binding_pattern" ("local_open_pattern"))
   ("record_declaration" ("type_binding" "constructor_declaration"))
   ("record_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("record_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("refutation_case" ("match_case"))
   ("rel_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("sequence_expression" ("expression_item" "parameter" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "match_case" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "let_expression" "do_clause" "sequence_expression" "let_open_expression" "class_initializer" "for_expression" "let_binding"))
   ("set_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("shebang" ("compilation_unit"))
   ("sign_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("sign_operator" ("sign_expression"))
   ("signature" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("signed_number" ("parameter" "range_pattern" "effect_pattern" "_simple_pattern" "_signed_constant"))
   ("string" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "external" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("string_content" ("string"))
   ("string_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("structure" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("tag" ("prefix_expression" "array_pattern" "local_open_pattern" "parameter" "cons_pattern" "class_application" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "array_get_expression" "tuple_pattern" "record_expression" "list_pattern" "field_pattern" "field_get_expression" "labeled_argument" "_simple_pattern" "string_get_expression" "array_binding_pattern" "application_expression" "list_binding_pattern" "constructor_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "lazy_pattern" "alias_pattern" "_simple_expression" "or_pattern" "method_invocation" "tag_specification" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tag_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tag_specification" ("polymorphic_variant_type"))
   ("then_clause" ("if_expression"))
   ("toplevel_directive" ("attribute_payload" "compilation_unit" "structure"))
   ("try_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("tuple_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tuple_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("type_binding" ("type_definition"))
   ("type_constraint" ("type_binding" "constrain_type"))
   ("type_constructor" ("type_constructor_path" "type_binding" "abstract_type"))
   ("type_constructor_path" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "polymorphic_variant_pattern" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("type_parameter_constraint" ("_class_field" "object_expression" "class_body_type" "_class_field_specification"))
   ("type_variable" ("parameter" "constrain_type" "class_binding" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "class_type_binding" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("typed_class_expression" ("class_application" "_simple_class_expression"))
   ("typed_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("typed_label" ("function_type"))
   ("typed_module_expression" ("_simple_module_expression" "module_application"))
   ("typed_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("unit" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("value_definition" ("attribute_payload" "compilation_unit" "let_expression" "_structure_item" "let_class_expression" "structure"))
   ("value_name" ("array_pattern" "local_open_pattern" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "external" "lazy_pattern" "value_specification" "alias_pattern" "or_pattern" "value_path" "typed_pattern" "let_binding" "_binding_pattern"))
   ("value_path" ("prefix_expression" "application_expression" "toplevel_directive" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("value_pattern" ("parameter" "alias_pattern" "effect_pattern" "for_expression" "_simple_pattern" "inheritance_definition"))
   ("value_specification" ("attribute_payload" "_signature_item" "signature"))
   ("variant_declaration" ("type_binding"))
   ("while_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
  )
)
;; END Inverse production rules for ocaml
;; START All node types in ocaml
(defconst combobulate-rules-ocaml-types
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type" "abstract_type" "add_operator" "alias_pattern" "aliased_type" "and_operator" "application_expression" "array_binding_pattern" "array_expression" "array_get_expression" "array_pattern" "assert_expression" "assign_operator" "attribute" "attribute_id" "attribute_payload" "bigarray_get_expression" "boolean" "character" "character_content" "class_application" "class_binding" "class_body_type" "class_definition" "class_function" "class_function_type" "class_initializer" "class_name" "class_path" "class_type_binding" "class_type_definition" "class_type_name" "class_type_path" "coercion_expression" "comment" "compilation_unit" "concat_operator" "cons_expression" "cons_pattern" "constrain_module" "constrain_module_type" "constrain_type" "constructed_type" "constructor_declaration" "constructor_name" "constructor_path" "constructor_pattern" "conversion_specification" "directive" "do_clause" "effect_pattern" "else_clause" "escape_sequence" "exception_definition" "exception_pattern" "expression_item" "extended_module_path" "extension" "external" "field_declaration" "field_expression" "field_get_expression" "field_name" "field_path" "field_pattern" "floating_attribute" "for_expression" "fun_expression" "function_expression" "function_type" "functor" "functor_type" "guard" "hash_expression" "hash_operator" "hash_type" "if_expression" "include_module" "include_module_type" "indexing_operator" "indexing_operator_path" "infix_expression" "inheritance_definition" "inheritance_specification" "instance_variable_definition" "instance_variable_expression" "instance_variable_name" "instance_variable_specification" "instantiated_class" "instantiated_class_type" "item_attribute" "item_extension" "label_name" "labeled_argument" "lazy_expression" "lazy_pattern" "let_and_operator" "let_binding" "let_class_expression" "let_exception_expression" "let_expression" "let_module_expression" "let_open_class_expression" "let_open_class_type" "let_open_expression" "let_operator" "line_number_directive" "list_binding_pattern" "list_expression" "list_pattern" "local_open_expression" "local_open_pattern" "local_open_type" "match_case" "match_expression" "match_operator" "method_definition" "method_invocation" "method_name" "method_specification" "method_type" "module_application" "module_binding" "module_definition" "module_name" "module_parameter" "module_path" "module_type_constraint" "module_type_definition" "module_type_name" "module_type_of" "module_type_path" "mult_operator" "new_expression" "number" "object_copy_expression" "object_expression" "object_type" "ocamlyacc_value" "open_module" "or_operator" "or_pattern" "package_expression" "package_pattern" "package_type" "packed_module" "parameter" "parenthesized_class_expression" "parenthesized_expression" "parenthesized_module_expression" "parenthesized_module_type" "parenthesized_operator" "parenthesized_pattern" "parenthesized_type" "polymorphic_type" "polymorphic_variant_pattern" "polymorphic_variant_type" "pow_operator" "prefix_expression" "prefix_operator" "pretty_printing_indication" "product_expression" "quoted_extension" "quoted_item_extension" "quoted_string" "quoted_string_content" "range_pattern" "record_binding_pattern" "record_declaration" "record_expression" "record_pattern" "refutation_case" "rel_operator" "sequence_expression" "set_expression" "shebang" "sign_expression" "sign_operator" "signature" "signed_number" "string" "string_content" "string_get_expression" "structure" "tag" "tag_pattern" "tag_specification" "then_clause" "toplevel_directive" "try_expression" "tuple_pattern" "tuple_type" "type_binding" "type_constraint" "type_constructor" "type_constructor_path" "type_definition" "type_parameter_constraint" "type_variable" "typed_class_expression" "typed_expression" "typed_label" "typed_module_expression" "typed_pattern" "unit" "value_definition" "value_name" "value_path" "value_pattern" "value_specification" "variant_declaration" "while_expression")
)
;; END All node types in ocaml
;; START All supertypes in ocaml
(defconst combobulate-rules-ocaml-supertypes
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type")
)
;; END All supertypes in ocaml

;; START Production rules for ocamli
(defconst combobulate-rules-ocamli
 '(("_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("_class_expression" (:*unnamed* ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("_class_field" (:*unnamed* ("class_initializer" "quoted_item_extension" "instance_variable_definition" "item_extension" "method_definition" "inheritance_definition" "type_parameter_constraint")))
 ("_class_field_specification" (:*unnamed* ("method_specification" "quoted_item_extension" "inheritance_specification" "item_extension" "instance_variable_specification" "type_parameter_constraint")))
 ("_class_type" (:*unnamed* ("class_function_type")))
 ("_constant" (:*unnamed* ("unit" "boolean" "string" "quoted_string" "number" "character")))
 ("_effect_pattern" (:*unnamed* ("constructor_pattern" "lazy_pattern" "tag_pattern")))
 ("_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("_infix_operator" (:*unnamed* ("mult_operator" "or_operator" "assign_operator" "and_operator" "concat_operator" "add_operator" "pow_operator" "rel_operator")))
 ("_module_expression" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("_parameter" (:*unnamed* ("parameter" "abstract_type")))
 ("_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "effect_pattern" "lazy_pattern")))
 ("_polymorphic_type" (:*unnamed* ("polymorphic_type")))
 ("_sequence_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("_signature_item" (:*unnamed* ("class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "include_module_type" "item_extension" "class_definition" "value_specification" "exception_definition")))
 ("_signed_constant" (:*unnamed* ("signed_number" "unit" "boolean" "string" "quoted_string" "number" "character")))
 ("_simple_class_expression" (:*unnamed* ("typed_class_expression" "extension" "quoted_extension" "class_path" "object_expression" "parenthesized_class_expression" "instantiated_class")))
 ("_simple_class_type" (:*unnamed* ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("_simple_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("_simple_module_expression" (:*unnamed* ("packed_module" "typed_module_expression" "extension" "parenthesized_module_expression" "quoted_extension")))
 ("_simple_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "boolean" "quoted_string" "constructor_path" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "extension" "number" "quoted_extension" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern")))
 ("_simple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("_structure_item" (:*unnamed* ("include_module" "class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "value_definition" "item_extension" "class_definition" "exception_definition")))
 ("_tuple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("abstract_type" (:*unnamed* ("type_constructor")))
 ("add_operator" (:*unnamed* nil))
 ("alias_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "value_pattern" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("aliased_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("and_operator" (:*unnamed* nil))
 ("application_expression" (:*unnamed* nil :argument ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "labeled_argument" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :function ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("array_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("array_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("array_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("array_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("assert_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "attribute_id" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("assign_operator" (:*unnamed* nil))
 ("attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("attribute_id" (:*unnamed* nil))
 ("attribute_payload" (:*unnamed* ("class_type_definition" "type_constructor_path" "expression_item" "cons_pattern" "open_module" "tag_pattern" "polymorphic_variant_type" "type_variable" "guard" "exception_pattern" "exception_definition" "local_open_type" "tuple_pattern" "module_definition" "object_type" "quoted_extension" "quoted_item_extension" "aliased_type" "include_module_type" "module_type_definition" "include_module" "parenthesized_type" "constructor_pattern" "range_pattern" "package_type" "effect_pattern" "external" "function_type" "value_definition" "item_extension" "lazy_pattern" "value_specification" "extension" "toplevel_directive" "alias_pattern" "constructed_type" "tuple_type" "or_pattern" "floating_attribute" "type_definition" "class_definition" "hash_type")))
 ("bigarray_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("boolean" (:*unnamed* nil))
 ("character" (:*unnamed* ("character_content")))
 ("character_content" (:*unnamed* ("escape_sequence")))
 ("class_application" (:*unnamed* nil :argument ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "labeled_argument" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :class ("typed_class_expression" "extension" "quoted_extension" "class_path" "object_expression" "parenthesized_class_expression" "instantiated_class")))
 ("class_binding" (:*unnamed* ("item_attribute" "class_function_type" "parameter" "type_variable" "abstract_type") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression") :name ("class_name")))
 ("class_body_type" (:*unnamed* ("method_specification" "type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "item_extension" "local_open_type" "extension" "object_type" "constructed_type" "inheritance_specification" "tuple_type" "quoted_extension" "floating_attribute" "quoted_item_extension" "aliased_type" "instance_variable_specification" "hash_type" "type_parameter_constraint")))
 ("class_definition" (:*unnamed* ("attribute_id" "class_binding")))
 ("class_function" (:*unnamed* ("parameter" "abstract_type") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("class_function_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "label_name" "polymorphic_variant_type" "package_type" "type_variable" "class_function_type" "hash_type" "local_open_type")))
 ("class_initializer" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "item_attribute" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("class_name" (:*unnamed* nil))
 ("class_path" (:*unnamed* ("module_path" "class_name")))
 ("class_type_binding" (:*unnamed* ("item_attribute" "type_variable") :body ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type") :name ("class_type_name")))
 ("class_type_definition" (:*unnamed* ("attribute_id" "class_type_binding")))
 ("class_type_name" (:*unnamed* nil))
 ("class_type_path" (:*unnamed* ("extended_module_path" "class_type_name")))
 ("coercion_expression" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type")))
 ("comment" (:*unnamed* nil))
 ("compilation_unit" (:*unnamed* ("class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "include_module_type" "item_extension" "class_definition" "value_specification" "exception_definition")))
 ("concat_operator" (:*unnamed* nil))
 ("cons_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("cons_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("constrain_module" (:*unnamed* ("extended_module_path" "module_path")))
 ("constrain_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("constrain_type" (:*unnamed* ("type_constraint" "type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("constructed_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("constructor_declaration" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "constructor_path" "constructor_name" "record_declaration" "type_variable" "hash_type" "local_open_type")))
 ("constructor_name" (:*unnamed* nil))
 ("constructor_path" (:*unnamed* ("constructor_name" "module_path")))
 ("constructor_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "constructor_path" "effect_pattern" "abstract_type" "lazy_pattern") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("conversion_specification" (:*unnamed* nil))
 ("directive" (:*unnamed* nil))
 ("do_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("effect_pattern" (:*unnamed* nil :continuation ("array_pattern" "local_open_pattern" "boolean" "quoted_string" "constructor_path" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "extension" "number" "quoted_extension" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern") :effect ("constructor_pattern" "lazy_pattern" "tag_pattern")))
 ("else_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("escape_sequence" (:*unnamed* nil))
 ("exception_definition" (:*unnamed* ("attribute_id" "item_attribute" "constructor_declaration")))
 ("exception_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "attribute_id" "effect_pattern" "lazy_pattern")))
 ("expression_item" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "item_attribute" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("extended_module_path" (:*unnamed* ("extended_module_path" "module_name")))
 ("extension" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("external" (:*unnamed* ("polymorphic_type" "attribute_id" "item_attribute" "string" "parenthesized_operator" "value_name")))
 ("field_declaration" (:*unnamed* ("polymorphic_type" "field_name")))
 ("field_expression" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("field_path")))
 ("field_get_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "field_path" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("field_name" (:*unnamed* nil))
 ("field_path" (:*unnamed* ("module_path" "field_name")))
 ("field_pattern" (:*unnamed* ("type_constructor_path" "field_path" "parenthesized_type" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "polymorphic_variant_type" "package_type" "effect_pattern" "type_variable" "function_type" "exception_pattern" "lazy_pattern" "local_open_type" "tuple_pattern" "extension" "alias_pattern" "object_type" "constructed_type" "tuple_type" "quoted_extension" "or_pattern" "aliased_type" "hash_type") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("floating_attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("for_expression" (:*unnamed* ("do_clause" "attribute_id") :from ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("parenthesized_operator" "value_pattern") :to ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("fun_expression" (:*unnamed* ("type_constructor_path" "parameter" "extension" "parenthesized_type" "object_type" "constructed_type" "quoted_extension" "polymorphic_variant_type" "package_type" "attribute_id" "type_variable" "abstract_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("function_expression" (:*unnamed* ("attribute_id" "match_case")))
 ("function_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "typed_label" "hash_type" "local_open_type")))
 ("functor" (:*unnamed* ("module_parameter") :body ("module_path" "functor" "module_application" "structure")))
 ("functor_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_parameter" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("guard" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("hash_expression" (:*unnamed* nil :left ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression") :operator ("hash_operator") :right ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("hash_operator" (:*unnamed* nil))
 ("hash_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_type_path" "hash_type" "local_open_type")))
 ("if_expression" (:*unnamed* ("else_clause" "attribute_id" "then_clause") :condition ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("include_module" (:*unnamed* ("attribute_id" "item_attribute" "module_application" "module_path" "functor" "structure")))
 ("include_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "attribute_id" "item_attribute" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("indexing_operator" (:*unnamed* nil))
 ("indexing_operator_path" (:*unnamed* ("indexing_operator" "module_path")))
 ("infix_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :operator ("mult_operator" "or_operator" "assign_operator" "and_operator" "concat_operator" "add_operator" "pow_operator" "rel_operator") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("inheritance_definition" (:*unnamed* ("item_attribute" "let_open_class_expression" "parenthesized_operator" "class_application" "class_function" "let_class_expression" "value_pattern")))
 ("inheritance_specification" (:*unnamed* ("item_attribute" "extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("instance_variable_definition" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("instance_variable_name")))
 ("instance_variable_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "instance_variable_name" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("instance_variable_name" (:*unnamed* nil))
 ("instance_variable_specification" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "local_open_type" "instance_variable_name" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "aliased_type" "hash_type")))
 ("instantiated_class" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_path" "hash_type" "local_open_type")))
 ("instantiated_class_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "class_type_path" "hash_type" "local_open_type")))
 ("item_attribute" (:*unnamed* ("attribute_id" "attribute_payload")))
 ("item_extension" (:*unnamed* ("attribute_id" "item_attribute" "attribute_payload")))
 ("label_name" (:*unnamed* nil))
 ("labeled_argument" (:*unnamed* ("prefix_expression" "type_constructor_path" "boolean" "local_open_expression" "parenthesized_expression" "polymorphic_variant_type" "constructor_path" "type_variable" "array_get_expression" "local_open_type" "record_expression" "object_type" "number" "quoted_extension" "label_name" "tag" "field_get_expression" "aliased_type" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "package_expression" "parenthesized_type" "quoted_string" "new_expression" "bigarray_get_expression" "package_type" "hash_expression" "function_type" "string" "object_expression" "extension" "constructed_type" "tuple_type" "value_path" "character" "method_invocation" "unit" "list_expression" "ocamlyacc_value" "hash_type" "array_expression")))
 ("lazy_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "attribute_id" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("lazy_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "attribute_id" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("let_and_operator" (:*unnamed* nil))
 ("let_binding" (:*unnamed* ("polymorphic_type" "item_attribute" "parameter" "abstract_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("let_class_expression" (:*unnamed* ("value_definition") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("let_exception_expression" (:*unnamed* ("exception_definition") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "value_definition" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_module_expression" (:*unnamed* ("module_definition") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_open_class_expression" (:*unnamed* ("open_module") :body ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("let_open_class_type" (:*unnamed* ("open_module") :body ("extension" "let_open_class_type" "instantiated_class_type" "quoted_extension" "class_type_path" "class_body_type")))
 ("let_open_expression" (:*unnamed* ("open_module") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("let_operator" (:*unnamed* nil))
 ("line_number_directive" (:*unnamed* nil))
 ("list_binding_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("list_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("list_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("local_open_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "package_expression" "lazy_expression" "while_expression" "object_copy_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "module_path" "assert_expression" "function_expression" "sequence_expression" "record_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "list_expression" "fun_expression" "match_expression" "array_expression")))
 ("local_open_pattern" (:*unnamed* ("array_binding_pattern" "array_pattern" "local_open_pattern" "list_binding_pattern" "cons_pattern" "record_binding_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "module_path" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("local_open_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "extended_module_path" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("match_case" (:*unnamed* ("guard") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "refutation_case" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :pattern ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "effect_pattern" "lazy_pattern")))
 ("match_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "match_case" "product_expression" "for_expression" "let_exception_expression" "match_operator" "fun_expression" "match_expression")))
 ("match_operator" (:*unnamed* nil))
 ("method_definition" (:*unnamed* ("polymorphic_type" "item_attribute" "parameter" "abstract_type") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :name ("method_name")))
 ("method_invocation" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "method_name" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("method_name" (:*unnamed* nil))
 ("method_specification" (:*unnamed* ("polymorphic_type" "item_attribute" "method_name")))
 ("method_type" (:*unnamed* ("polymorphic_type" "method_name")))
 ("module_application" (:*unnamed* nil :argument ("packed_module" "typed_module_expression" "extension" "parenthesized_module_expression" "quoted_extension") :functor ("module_path" "functor" "module_application" "structure")))
 ("module_binding" (:*unnamed* ("extension" "quoted_extension" "signature" "module_parameter" "item_attribute" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :body ("module_path" "functor" "module_application" "structure") :name ("module_name")))
 ("module_definition" (:*unnamed* ("attribute_id" "module_binding")))
 ("module_name" (:*unnamed* nil))
 ("module_parameter" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :name ("module_name")))
 ("module_path" (:*unnamed* ("module_name" "module_path")))
 ("module_type_constraint" (:*unnamed* ("constrain_module" "extension" "constrain_type" "quoted_extension" "constrain_module_type" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("module_type_definition" (:*unnamed* ("attribute_id" "item_attribute") :body ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type") :name ("module_type_name")))
 ("module_type_name" (:*unnamed* nil))
 ("module_type_of" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("module_type_path" (:*unnamed* ("extended_module_path" "module_type_name")))
 ("mult_operator" (:*unnamed* nil))
 ("new_expression" (:*unnamed* ("class_path" "attribute_id")))
 ("number" (:*unnamed* nil))
 ("object_copy_expression" (:*unnamed* ("instance_variable_expression")))
 ("object_expression" (:*unnamed* ("type_constructor_path" "cons_pattern" "tag_pattern" "polymorphic_variant_type" "instance_variable_definition" "type_variable" "method_definition" "exception_pattern" "local_open_type" "tuple_pattern" "object_type" "quoted_extension" "quoted_item_extension" "aliased_type" "type_parameter_constraint" "parenthesized_type" "constructor_pattern" "range_pattern" "package_type" "attribute_id" "effect_pattern" "inheritance_definition" "function_type" "item_extension" "lazy_pattern" "extension" "alias_pattern" "constructed_type" "tuple_type" "or_pattern" "floating_attribute" "class_initializer" "hash_type")))
 ("object_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "method_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("ocamlyacc_value" (:*unnamed* nil))
 ("open_module" (:*unnamed* ("attribute_id" "item_attribute" "module_application" "module_path" "functor" "structure")))
 ("or_operator" (:*unnamed* nil))
 ("or_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("package_expression" (:*unnamed* ("module_application" "extension" "quoted_extension" "functor" "signature" "module_type_path" "attribute_id" "module_type_constraint" "module_path" "module_type_of" "functor_type" "parenthesized_module_type" "structure")))
 ("package_pattern" (:*unnamed* ("extension" "module_name" "quoted_extension" "signature" "attribute_id" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("package_type" (:*unnamed* ("extension" "quoted_extension" "signature" "attribute_id" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("packed_module" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "signature" "let_expression" "try_expression" "module_type_constraint" "let_module_expression" "cons_expression" "module_type_of" "assert_expression" "module_type_path" "function_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "quoted_extension" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression" "functor_type" "parenthesized_module_type")))
 ("parameter" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "label_name" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type") :pattern ("array_pattern" "local_open_pattern" "boolean" "cons_pattern" "quoted_string" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "string" "package_pattern" "parenthesized_pattern" "record_pattern" "exception_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "number" "quoted_extension" "or_pattern" "character" "tag" "value_pattern" "list_pattern" "unit" "signed_number" "parenthesized_operator" "typed_pattern")))
 ("parenthesized_class_expression" (:*unnamed* ("class_application" "class_function" "let_open_class_expression" "let_class_expression")))
 ("parenthesized_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("parenthesized_module_expression" (:*unnamed* ("module_path" "functor" "module_application" "structure")))
 ("parenthesized_module_type" (:*unnamed* ("extension" "quoted_extension" "signature" "module_type_constraint" "functor_type" "module_type_of" "module_type_path" "parenthesized_module_type")))
 ("parenthesized_operator" (:*unnamed* ("indexing_operator" "mult_operator" "or_operator" "assign_operator" "hash_operator" "let_operator" "and_operator" "concat_operator" "prefix_operator" "let_and_operator" "match_operator" "add_operator" "pow_operator" "rel_operator")))
 ("parenthesized_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("parenthesized_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("polymorphic_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "abstract_type" "hash_type" "local_open_type")))
 ("polymorphic_variant_pattern" (:*unnamed* ("type_constructor_path")))
 ("polymorphic_variant_type" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "local_open_type" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "tag" "aliased_type" "tag_specification" "hash_type")))
 ("pow_operator" (:*unnamed* nil))
 ("prefix_expression" (:*unnamed* nil :operator ("prefix_operator") :right ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("prefix_operator" (:*unnamed* nil))
 ("pretty_printing_indication" (:*unnamed* nil))
 ("product_expression" (:*unnamed* nil :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("quoted_extension" (:*unnamed* ("attribute_id" "quoted_string_content")))
 ("quoted_item_extension" (:*unnamed* ("attribute_id" "item_attribute" "quoted_string_content")))
 ("quoted_string" (:*unnamed* ("quoted_string_content")))
 ("quoted_string_content" (:*unnamed* ("conversion_specification" "pretty_printing_indication")))
 ("range_pattern" (:*unnamed* ("signed_number" "unit" "boolean" "string" "quoted_string" "number" "character")))
 ("record_binding_pattern" (:*unnamed* ("field_pattern")))
 ("record_declaration" (:*unnamed* ("field_declaration")))
 ("record_expression" (:*unnamed* ("prefix_expression" "ocamlyacc_value" "boolean" "package_expression" "quoted_string" "new_expression" "local_open_expression" "parenthesized_expression" "bigarray_get_expression" "constructor_path" "object_copy_expression" "field_expression" "hash_expression" "string" "array_get_expression" "object_expression" "extension" "record_expression" "number" "quoted_extension" "value_path" "character" "method_invocation" "tag" "unit" "field_get_expression" "list_expression" "coercion_expression" "string_get_expression" "typed_expression" "array_expression")))
 ("record_pattern" (:*unnamed* ("field_pattern")))
 ("refutation_case" (:*unnamed* nil))
 ("rel_operator" (:*unnamed* nil))
 ("sequence_expression" (:*unnamed* ("attribute_id") :left ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("set_expression" (:*unnamed* ("instance_variable_name" "string_get_expression" "field_get_expression" "array_get_expression" "bigarray_get_expression") :body ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("sign_expression" (:*unnamed* nil :operator ("sign_operator") :right ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("sign_operator" (:*unnamed* nil))
 ("signature" (:*unnamed* ("class_type_definition" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "include_module_type" "item_extension" "class_definition" "value_specification" "exception_definition")))
 ("signed_number" (:*unnamed* nil))
 ("string" (:*unnamed* ("string_content")))
 ("string_content" (:*unnamed* ("conversion_specification" "escape_sequence" "pretty_printing_indication")))
 ("string_get_expression" (:*unnamed* ("prefix_expression" "set_expression" "boolean" "local_open_expression" "parenthesized_expression" "constructor_path" "try_expression" "let_module_expression" "array_get_expression" "record_expression" "number" "quoted_extension" "tag" "product_expression" "let_exception_expression" "field_get_expression" "fun_expression" "match_expression" "object_copy_expression" "coercion_expression" "string_get_expression" "typed_expression" "if_expression" "application_expression" "package_expression" "quoted_string" "new_expression" "lazy_expression" "while_expression" "bigarray_get_expression" "let_expression" "hash_expression" "cons_expression" "indexing_operator_path" "string" "object_expression" "assert_expression" "function_expression" "sequence_expression" "extension" "infix_expression" "sign_expression" "let_open_expression" "value_path" "character" "method_invocation" "for_expression" "unit" "list_expression" "ocamlyacc_value" "array_expression")))
 ("structure" (:*unnamed* ("include_module" "class_type_definition" "expression_item" "toplevel_directive" "module_definition" "open_module" "floating_attribute" "module_type_definition" "quoted_item_extension" "external" "type_definition" "value_definition" "item_extension" "class_definition" "exception_definition")))
 ("tag" (:*unnamed* nil))
 ("tag_pattern" (:*unnamed* ("tuple_pattern" "alias_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "exception_pattern" "or_pattern" "range_pattern" "tag" "effect_pattern" "lazy_pattern") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("tag_specification" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "tag" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("then_clause" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("toplevel_directive" (:*unnamed* ("boolean" "quoted_string" "number" "value_path" "character" "directive" "unit" "module_path" "string")))
 ("try_expression" (:*unnamed* ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "attribute_id" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "match_case" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
 ("tuple_pattern" (:*unnamed* ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "effect_pattern" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "exception_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("tuple_type" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "hash_type" "local_open_type")))
 ("type_binding" (:*unnamed* ("type_constructor_path" "parenthesized_type" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "type_constraint" "local_open_type" "extension" "object_type" "constructed_type" "tuple_type" "quoted_extension" "aliased_type" "hash_type") :body ("variant_declaration" "record_declaration") :name ("type_constructor_path" "type_constructor")))
 ("type_constraint" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("type_constructor" (:*unnamed* nil))
 ("type_constructor_path" (:*unnamed* ("extended_module_path" "type_constructor")))
 ("type_definition" (:*unnamed* ("attribute_id" "type_binding")))
 ("type_parameter_constraint" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "polymorphic_variant_type" "package_type" "item_attribute" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("type_variable" (:*unnamed* nil))
 ("typed_class_expression" (:*unnamed* ("let_open_class_expression" "class_function_type" "class_application" "class_function" "let_class_expression")))
 ("typed_expression" (:*unnamed* ("type_constructor_path" "set_expression" "polymorphic_variant_type" "try_expression" "let_module_expression" "type_variable" "local_open_type" "object_type" "quoted_extension" "product_expression" "let_exception_expression" "aliased_type" "fun_expression" "match_expression" "if_expression" "application_expression" "parenthesized_type" "lazy_expression" "while_expression" "package_type" "let_expression" "cons_expression" "function_type" "assert_expression" "function_expression" "sequence_expression" "extension" "constructed_type" "tuple_type" "infix_expression" "sign_expression" "let_open_expression" "for_expression" "hash_type")))
 ("typed_label" (:*unnamed* ("type_constructor_path" "extension" "parenthesized_type" "object_type" "constructed_type" "tuple_type" "quoted_extension" "label_name" "polymorphic_variant_type" "package_type" "type_variable" "function_type" "aliased_type" "hash_type" "local_open_type")))
 ("typed_module_expression" (:*unnamed* ("module_application" "extension" "quoted_extension" "functor" "signature" "module_type_path" "module_type_constraint" "module_path" "module_type_of" "functor_type" "parenthesized_module_type" "structure")))
 ("typed_pattern" (:*unnamed* ("type_constructor_path" "parenthesized_type" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "polymorphic_variant_type" "package_type" "effect_pattern" "type_variable" "function_type" "exception_pattern" "lazy_pattern" "local_open_type" "tuple_pattern" "extension" "alias_pattern" "object_type" "constructed_type" "tuple_type" "quoted_extension" "or_pattern" "aliased_type" "hash_type") :pattern ("array_pattern" "local_open_pattern" "cons_pattern" "constructor_pattern" "tag_pattern" "range_pattern" "constructor_path" "polymorphic_variant_pattern" "parenthesized_pattern" "package_pattern" "record_pattern" "lazy_pattern" "tuple_pattern" "extension" "alias_pattern" "quoted_extension" "value_name" "or_pattern" "tag" "list_pattern" "parenthesized_operator" "typed_pattern")))
 ("unit" (:*unnamed* nil))
 ("value_definition" (:*unnamed* ("attribute_id" "let_operator" "let_binding" "let_and_operator")))
 ("value_name" (:*unnamed* nil))
 ("value_path" (:*unnamed* ("parenthesized_operator" "value_name" "module_path")))
 ("value_pattern" (:*unnamed* nil))
 ("value_specification" (:*unnamed* ("polymorphic_type" "attribute_id" "item_attribute" "parenthesized_operator" "value_name")))
 ("variant_declaration" (:*unnamed* ("constructor_declaration")))
 ("while_expression" (:*unnamed* ("do_clause" "attribute_id") :condition ("if_expression" "application_expression" "set_expression" "lazy_expression" "while_expression" "let_expression" "try_expression" "let_module_expression" "cons_expression" "assert_expression" "function_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "product_expression" "for_expression" "let_exception_expression" "fun_expression" "match_expression")))
))
;; END Production rules for ocamli
;; START Inverse production rules for ocamli
(defconst combobulate-rules-ocamli-inverse
 '(("abstract_type" ("polymorphic_type" "class_binding" "constructor_pattern" "method_definition" "_parameter" "fun_expression" "let_binding" "class_function"))
   ("add_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("alias_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("aliased_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("and_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("application_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("array_binding_pattern" ("local_open_pattern"))
   ("array_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("array_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("array_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("assert_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("assign_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("attribute_id" ("class_type_definition" "open_module" "parenthesized_expression" "try_expression" "package_pattern" "exception_pattern" "exception_definition" "module_definition" "quoted_extension" "quoted_item_extension" "include_module_type" "fun_expression" "match_expression" "module_type_definition" "attribute" "include_module" "if_expression" "package_expression" "new_expression" "lazy_expression" "while_expression" "package_type" "item_attribute" "external" "value_definition" "object_expression" "item_extension" "assert_expression" "lazy_pattern" "value_specification" "function_expression" "sequence_expression" "extension" "floating_attribute" "for_expression" "type_definition" "class_definition"))
   ("attribute_payload" ("extension" "floating_attribute" "item_attribute" "item_extension" "attribute"))
   ("bigarray_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("boolean" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("character" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("character_content" ("character"))
   ("class_application" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("class_binding" ("class_definition"))
   ("class_body_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("class_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("class_function" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("class_function_type" ("_class_type" "typed_class_expression" "class_binding" "class_function_type"))
   ("class_initializer" ("_class_field" "object_expression"))
   ("class_name" ("class_path" "class_binding"))
   ("class_path" ("new_expression" "class_application" "_simple_class_expression" "instantiated_class"))
   ("class_type_binding" ("class_type_definition"))
   ("class_type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("class_type_name" ("class_type_path" "class_type_binding"))
   ("class_type_path" ("instantiated_class_type" "_simple_class_type" "inheritance_specification" "let_open_class_type" "hash_type" "class_type_binding"))
   ("coercion_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("concat_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("cons_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("cons_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("constrain_module" ("module_type_constraint"))
   ("constrain_module_type" ("module_type_constraint"))
   ("constrain_type" ("module_type_constraint"))
   ("constructed_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("constructor_declaration" ("variant_declaration" "exception_definition"))
   ("constructor_name" ("constructor_path" "constructor_declaration"))
   ("constructor_path" ("prefix_expression" "array_pattern" "local_open_pattern" "parameter" "cons_pattern" "class_application" "tag_pattern" "parenthesized_pattern" "array_get_expression" "tuple_pattern" "record_expression" "list_pattern" "field_pattern" "field_get_expression" "labeled_argument" "_simple_pattern" "string_get_expression" "array_binding_pattern" "application_expression" "list_binding_pattern" "constructor_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "lazy_pattern" "constructor_declaration" "alias_pattern" "_simple_expression" "or_pattern" "method_invocation" "typed_pattern" "let_binding" "_binding_pattern"))
   ("constructor_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("conversion_specification" ("string_content" "quoted_string_content"))
   ("directive" ("toplevel_directive"))
   ("do_clause" ("for_expression" "while_expression"))
   ("effect_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "attribute_payload" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern"))
   ("else_clause" ("if_expression"))
   ("escape_sequence" ("character_content" "string_content"))
   ("exception_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "let_exception_expression" "structure"))
   ("exception_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "attribute_payload" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern"))
   ("expression_item" ("attribute_payload" "structure"))
   ("extended_module_path" ("constrain_module" "type_constructor_path" "extended_module_path" "class_type_path" "module_type_path" "local_open_type"))
   ("extension" ("parameter" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "module_application" "list_pattern" "let_open_class_type" "fun_expression" "string_get_expression" "application_expression" "package_expression" "bigarray_get_expression" "lazy_expression" "_type" "effect_pattern" "assert_expression" "tuple_type" "tag_specification" "let_binding" "prefix_expression" "array_pattern" "_simple_class_type" "instance_variable_definition" "type_constraint" "record_expression" "module_binding" "constrain_module_type" "_tuple_type" "labeled_argument" "aliased_type" "include_module_type" "_simple_pattern" "array_binding_pattern" "attribute_payload" "instantiated_class_type" "package_type" "module_type_constraint" "hash_expression" "constructed_type" "inheritance_specification" "_simple_module_expression" "functor_type" "local_open_pattern" "class_application" "field_expression" "package_pattern" "array_get_expression" "local_open_type" "object_type" "_module_type" "class_type_binding" "module_type_definition" "parenthesized_type" "instantiated_class" "_simple_class_expression" "object_expression" "lazy_pattern" "constructor_declaration" "typed_module_expression" "method_invocation" "module_parameter" "instance_variable_specification" "hash_type" "constrain_type" "cons_pattern" "typed_label" "tuple_pattern" "field_pattern" "field_get_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "type_binding" "list_binding_pattern" "constructor_pattern" "packed_module" "function_type" "_simple_type" "class_body_type" "polymorphic_type" "alias_pattern" "_simple_expression" "or_pattern" "class_function_type" "typed_pattern" "parenthesized_module_type" "_binding_pattern"))
   ("external" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("field_declaration" ("record_declaration"))
   ("field_expression" ("record_expression"))
   ("field_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("field_name" ("field_path" "field_declaration"))
   ("field_path" ("field_pattern" "field_expression" "field_get_expression"))
   ("field_pattern" ("record_binding_pattern" "record_pattern"))
   ("floating_attribute" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "object_expression" "class_body_type" "structure"))
   ("for_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("fun_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("function_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("function_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("functor" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("functor_type" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("guard" ("attribute_payload" "match_case"))
   ("hash_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("hash_operator" ("parenthesized_operator" "hash_expression"))
   ("hash_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("if_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("include_module" ("attribute_payload" "_structure_item" "structure"))
   ("include_module_type" ("attribute_payload" "_signature_item" "compilation_unit" "signature"))
   ("indexing_operator" ("parenthesized_operator" "indexing_operator_path"))
   ("indexing_operator_path" ("array_get_expression" "string_get_expression" "bigarray_get_expression"))
   ("infix_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("inheritance_definition" ("_class_field" "object_expression"))
   ("inheritance_specification" ("class_body_type" "_class_field_specification"))
   ("instance_variable_definition" ("_class_field" "object_expression"))
   ("instance_variable_expression" ("object_copy_expression"))
   ("instance_variable_name" ("instance_variable_specification" "set_expression" "instance_variable_expression" "instance_variable_definition"))
   ("instance_variable_specification" ("class_body_type" "_class_field_specification"))
   ("instantiated_class" ("class_application" "_simple_class_expression"))
   ("instantiated_class_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("item_attribute" ("method_specification" "expression_item" "open_module" "class_binding" "instance_variable_definition" "method_definition" "exception_definition" "module_binding" "quoted_item_extension" "include_module_type" "class_type_binding" "module_type_definition" "include_module" "type_parameter_constraint" "type_binding" "external" "item_extension" "value_specification" "inheritance_specification" "class_initializer" "let_binding" "instance_variable_specification" "inheritance_definition"))
   ("item_extension" ("_class_field" "attribute_payload" "compilation_unit" "_signature_item" "signature" "structure" "_structure_item" "object_expression" "class_body_type" "_class_field_specification"))
   ("label_name" ("typed_label" "parameter" "labeled_argument" "class_function_type"))
   ("labeled_argument" ("class_application" "application_expression"))
   ("lazy_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("lazy_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("let_and_operator" ("parenthesized_operator" "value_definition"))
   ("let_binding" ("value_definition"))
   ("let_class_expression" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("let_exception_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_module_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_open_class_expression" ("typed_class_expression" "let_open_class_expression" "class_binding" "parenthesized_class_expression" "_class_expression" "class_function" "inheritance_definition" "let_class_expression"))
   ("let_open_class_type" ("_simple_class_type" "inheritance_specification" "class_type_binding" "let_open_class_type"))
   ("let_open_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("let_operator" ("parenthesized_operator" "value_definition"))
   ("list_binding_pattern" ("local_open_pattern"))
   ("list_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("list_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("local_open_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("local_open_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("local_open_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("match_case" ("function_expression" "try_expression" "match_expression"))
   ("match_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("match_operator" ("parenthesized_operator" "match_expression"))
   ("method_definition" ("_class_field" "object_expression"))
   ("method_invocation" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("method_name" ("method_specification" "method_type" "method_definition" "method_invocation"))
   ("method_specification" ("class_body_type" "_class_field_specification"))
   ("method_type" ("object_type"))
   ("module_application" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("module_binding" ("module_definition"))
   ("module_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "let_module_expression" "structure"))
   ("module_name" ("module_binding" "module_parameter" "extended_module_path" "module_path" "package_pattern"))
   ("module_parameter" ("module_binding" "functor" "functor_type"))
   ("module_path" ("local_open_pattern" "field_path" "open_module" "local_open_expression" "constructor_path" "module_type_of" "module_application" "module_binding" "include_module" "constrain_module" "package_expression" "functor" "_module_expression" "indexing_operator_path" "module_path" "class_path" "toplevel_directive" "typed_module_expression" "value_path" "parenthesized_module_expression"))
   ("module_type_constraint" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("module_type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("module_type_name" ("module_type_path" "module_type_definition"))
   ("module_type_of" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("module_type_path" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("mult_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("new_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("number" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("object_copy_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("object_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "_simple_class_expression" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("object_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("ocamlyacc_value" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("open_module" ("attribute_payload" "let_open_class_expression" "compilation_unit" "_signature_item" "let_open_expression" "signature" "_structure_item" "let_open_class_type" "structure"))
   ("or_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("or_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("package_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("package_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("package_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("packed_module" ("_simple_module_expression" "module_application"))
   ("parameter" ("class_binding" "method_definition" "_parameter" "fun_expression" "let_binding" "class_function"))
   ("parenthesized_class_expression" ("class_application" "_simple_class_expression"))
   ("parenthesized_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("parenthesized_module_expression" ("_simple_module_expression" "module_application"))
   ("parenthesized_module_type" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("parenthesized_operator" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "external" "lazy_pattern" "value_specification" "alias_pattern" "or_pattern" "value_path" "for_expression" "typed_pattern" "let_binding" "inheritance_definition" "_binding_pattern"))
   ("parenthesized_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("parenthesized_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("polymorphic_type" ("method_specification" "field_declaration" "method_type" "_polymorphic_type" "external" "value_specification" "let_binding" "method_definition"))
   ("polymorphic_variant_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("polymorphic_variant_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("pow_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("prefix_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("prefix_operator" ("parenthesized_operator" "prefix_expression"))
   ("pretty_printing_indication" ("string_content" "quoted_string_content"))
   ("product_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("quoted_extension" ("parameter" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "module_application" "list_pattern" "let_open_class_type" "fun_expression" "string_get_expression" "application_expression" "package_expression" "bigarray_get_expression" "lazy_expression" "_type" "effect_pattern" "assert_expression" "tuple_type" "tag_specification" "let_binding" "prefix_expression" "array_pattern" "_simple_class_type" "instance_variable_definition" "type_constraint" "record_expression" "module_binding" "constrain_module_type" "_tuple_type" "labeled_argument" "aliased_type" "include_module_type" "_simple_pattern" "array_binding_pattern" "attribute_payload" "instantiated_class_type" "package_type" "module_type_constraint" "hash_expression" "constructed_type" "inheritance_specification" "_simple_module_expression" "functor_type" "local_open_pattern" "class_application" "field_expression" "package_pattern" "array_get_expression" "local_open_type" "object_type" "_module_type" "class_type_binding" "module_type_definition" "parenthesized_type" "instantiated_class" "_simple_class_expression" "object_expression" "lazy_pattern" "constructor_declaration" "typed_module_expression" "method_invocation" "module_parameter" "instance_variable_specification" "hash_type" "constrain_type" "cons_pattern" "typed_label" "tuple_pattern" "field_pattern" "field_get_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "type_binding" "list_binding_pattern" "constructor_pattern" "packed_module" "function_type" "_simple_type" "class_body_type" "polymorphic_type" "alias_pattern" "_simple_expression" "or_pattern" "class_function_type" "typed_pattern" "parenthesized_module_type" "_binding_pattern"))
   ("quoted_item_extension" ("_class_field" "attribute_payload" "compilation_unit" "_signature_item" "signature" "structure" "_structure_item" "object_expression" "class_body_type" "_class_field_specification"))
   ("quoted_string" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("quoted_string_content" ("quoted_string" "quoted_item_extension" "quoted_extension"))
   ("range_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("record_binding_pattern" ("local_open_pattern"))
   ("record_declaration" ("type_binding" "constructor_declaration"))
   ("record_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "local_open_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("record_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("refutation_case" ("match_case"))
   ("rel_operator" ("parenthesized_operator" "infix_expression" "_infix_operator"))
   ("sequence_expression" ("expression_item" "parameter" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "match_case" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "let_expression" "do_clause" "sequence_expression" "let_open_expression" "class_initializer" "for_expression" "let_binding"))
   ("set_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("sign_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("sign_operator" ("sign_expression"))
   ("signature" ("typed_module_expression" "package_expression" "module_binding" "constrain_module_type" "module_parameter" "package_type" "_module_type" "module_type_constraint" "packed_module" "package_pattern" "include_module_type" "functor_type" "parenthesized_module_type" "module_type_definition"))
   ("signed_number" ("parameter" "range_pattern" "effect_pattern" "_simple_pattern" "_signed_constant"))
   ("string" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "external" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("string_content" ("string"))
   ("string_get_expression" ("prefix_expression" "application_expression" "set_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("structure" ("include_module" "module_application" "typed_module_expression" "package_expression" "module_binding" "open_module" "functor" "_module_expression" "module_type_of" "parenthesized_module_expression"))
   ("tag" ("prefix_expression" "array_pattern" "local_open_pattern" "parameter" "cons_pattern" "class_application" "tag_pattern" "polymorphic_variant_type" "parenthesized_pattern" "array_get_expression" "tuple_pattern" "record_expression" "list_pattern" "field_pattern" "field_get_expression" "labeled_argument" "_simple_pattern" "string_get_expression" "array_binding_pattern" "application_expression" "list_binding_pattern" "constructor_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "lazy_pattern" "alias_pattern" "_simple_expression" "or_pattern" "method_invocation" "tag_specification" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tag_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "effect_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "_effect_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tag_specification" ("polymorphic_variant_type"))
   ("then_clause" ("if_expression"))
   ("toplevel_directive" ("attribute_payload" "structure"))
   ("try_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
   ("tuple_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "_pattern" "exception_pattern" "tuple_pattern" "match_case" "list_pattern" "field_pattern" "array_binding_pattern" "attribute_payload" "list_binding_pattern" "constructor_pattern" "object_expression" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("tuple_type" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "class_body_type" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("type_binding" ("type_definition"))
   ("type_constraint" ("type_binding" "constrain_type"))
   ("type_constructor" ("type_constructor_path" "type_binding" "abstract_type"))
   ("type_constructor_path" ("parameter" "constrain_type" "polymorphic_variant_type" "field_expression" "polymorphic_variant_pattern" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("type_definition" ("attribute_payload" "compilation_unit" "_signature_item" "signature" "_structure_item" "structure"))
   ("type_parameter_constraint" ("_class_field" "object_expression" "class_body_type" "_class_field_specification"))
   ("type_variable" ("parameter" "constrain_type" "class_binding" "polymorphic_variant_type" "field_expression" "instance_variable_definition" "typed_label" "local_open_type" "type_constraint" "object_type" "_tuple_type" "field_pattern" "labeled_argument" "aliased_type" "fun_expression" "coercion_expression" "class_type_binding" "type_parameter_constraint" "typed_expression" "attribute_payload" "type_binding" "parenthesized_type" "instantiated_class_type" "instantiated_class" "_type" "function_type" "object_expression" "_simple_type" "class_body_type" "constructor_declaration" "polymorphic_type" "constructed_type" "tuple_type" "class_function_type" "tag_specification" "typed_pattern" "instance_variable_specification" "hash_type"))
   ("typed_class_expression" ("class_application" "_simple_class_expression"))
   ("typed_expression" ("prefix_expression" "application_expression" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("typed_label" ("function_type"))
   ("typed_module_expression" ("_simple_module_expression" "module_application"))
   ("typed_pattern" ("array_pattern" "local_open_pattern" "parameter" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "_simple_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "effect_pattern" "lazy_pattern" "alias_pattern" "or_pattern" "typed_pattern" "let_binding" "_binding_pattern"))
   ("unit" ("prefix_expression" "parameter" "_constant" "class_application" "array_get_expression" "record_expression" "field_get_expression" "labeled_argument" "_simple_pattern" "_signed_constant" "string_get_expression" "application_expression" "range_pattern" "bigarray_get_expression" "lazy_expression" "effect_pattern" "hash_expression" "assert_expression" "toplevel_directive" "_simple_expression" "method_invocation"))
   ("value_definition" ("attribute_payload" "let_expression" "_structure_item" "let_class_expression" "structure"))
   ("value_name" ("array_pattern" "local_open_pattern" "cons_pattern" "tag_pattern" "parenthesized_pattern" "tuple_pattern" "list_pattern" "field_pattern" "array_binding_pattern" "list_binding_pattern" "constructor_pattern" "external" "lazy_pattern" "value_specification" "alias_pattern" "or_pattern" "value_path" "typed_pattern" "let_binding" "_binding_pattern"))
   ("value_path" ("prefix_expression" "application_expression" "toplevel_directive" "record_expression" "class_application" "_simple_expression" "bigarray_get_expression" "lazy_expression" "method_invocation" "hash_expression" "field_get_expression" "labeled_argument" "array_get_expression" "assert_expression" "string_get_expression"))
   ("value_pattern" ("parameter" "alias_pattern" "effect_pattern" "for_expression" "_simple_pattern" "inheritance_definition"))
   ("value_specification" ("attribute_payload" "_signature_item" "compilation_unit" "signature"))
   ("variant_declaration" ("type_binding"))
   ("while_expression" ("expression_item" "set_expression" "parameter" "then_clause" "local_open_expression" "parenthesized_expression" "try_expression" "instance_variable_definition" "let_module_expression" "array_get_expression" "guard" "method_definition" "instance_variable_expression" "match_case" "product_expression" "let_exception_expression" "fun_expression" "coercion_expression" "match_expression" "string_get_expression" "typed_expression" "if_expression" "_sequence_expression" "bigarray_get_expression" "while_expression" "packed_module" "let_expression" "cons_expression" "do_clause" "_expression" "sequence_expression" "infix_expression" "sign_expression" "let_open_expression" "class_initializer" "for_expression" "list_expression" "else_clause" "let_binding" "field_expression" "array_expression"))
  )
)
;; END Inverse production rules for ocamli
;; START All node types in ocamli
(defconst combobulate-rules-ocamli-types
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type" "abstract_type" "add_operator" "alias_pattern" "aliased_type" "and_operator" "application_expression" "array_binding_pattern" "array_expression" "array_get_expression" "array_pattern" "assert_expression" "assign_operator" "attribute" "attribute_id" "attribute_payload" "bigarray_get_expression" "boolean" "character" "character_content" "class_application" "class_binding" "class_body_type" "class_definition" "class_function" "class_function_type" "class_initializer" "class_name" "class_path" "class_type_binding" "class_type_definition" "class_type_name" "class_type_path" "coercion_expression" "comment" "compilation_unit" "concat_operator" "cons_expression" "cons_pattern" "constrain_module" "constrain_module_type" "constrain_type" "constructed_type" "constructor_declaration" "constructor_name" "constructor_path" "constructor_pattern" "conversion_specification" "directive" "do_clause" "effect_pattern" "else_clause" "escape_sequence" "exception_definition" "exception_pattern" "expression_item" "extended_module_path" "extension" "external" "field_declaration" "field_expression" "field_get_expression" "field_name" "field_path" "field_pattern" "floating_attribute" "for_expression" "fun_expression" "function_expression" "function_type" "functor" "functor_type" "guard" "hash_expression" "hash_operator" "hash_type" "if_expression" "include_module" "include_module_type" "indexing_operator" "indexing_operator_path" "infix_expression" "inheritance_definition" "inheritance_specification" "instance_variable_definition" "instance_variable_expression" "instance_variable_name" "instance_variable_specification" "instantiated_class" "instantiated_class_type" "item_attribute" "item_extension" "label_name" "labeled_argument" "lazy_expression" "lazy_pattern" "let_and_operator" "let_binding" "let_class_expression" "let_exception_expression" "let_expression" "let_module_expression" "let_open_class_expression" "let_open_class_type" "let_open_expression" "let_operator" "line_number_directive" "list_binding_pattern" "list_expression" "list_pattern" "local_open_expression" "local_open_pattern" "local_open_type" "match_case" "match_expression" "match_operator" "method_definition" "method_invocation" "method_name" "method_specification" "method_type" "module_application" "module_binding" "module_definition" "module_name" "module_parameter" "module_path" "module_type_constraint" "module_type_definition" "module_type_name" "module_type_of" "module_type_path" "mult_operator" "new_expression" "number" "object_copy_expression" "object_expression" "object_type" "ocamlyacc_value" "open_module" "or_operator" "or_pattern" "package_expression" "package_pattern" "package_type" "packed_module" "parameter" "parenthesized_class_expression" "parenthesized_expression" "parenthesized_module_expression" "parenthesized_module_type" "parenthesized_operator" "parenthesized_pattern" "parenthesized_type" "polymorphic_type" "polymorphic_variant_pattern" "polymorphic_variant_type" "pow_operator" "prefix_expression" "prefix_operator" "pretty_printing_indication" "product_expression" "quoted_extension" "quoted_item_extension" "quoted_string" "quoted_string_content" "range_pattern" "record_binding_pattern" "record_declaration" "record_expression" "record_pattern" "refutation_case" "rel_operator" "sequence_expression" "set_expression" "sign_expression" "sign_operator" "signature" "signed_number" "string" "string_content" "string_get_expression" "structure" "tag" "tag_pattern" "tag_specification" "then_clause" "toplevel_directive" "try_expression" "tuple_pattern" "tuple_type" "type_binding" "type_constraint" "type_constructor" "type_constructor_path" "type_definition" "type_parameter_constraint" "type_variable" "typed_class_expression" "typed_expression" "typed_label" "typed_module_expression" "typed_pattern" "unit" "value_definition" "value_name" "value_path" "value_pattern" "value_specification" "variant_declaration" "while_expression")
)
;; END All node types in ocamli
;; START All supertypes in ocamli
(defconst combobulate-rules-ocamli-supertypes
 '("_binding_pattern" "_class_expression" "_class_field" "_class_field_specification" "_class_type" "_constant" "_effect_pattern" "_expression" "_infix_operator" "_module_expression" "_module_type" "_parameter" "_pattern" "_polymorphic_type" "_sequence_expression" "_signature_item" "_signed_constant" "_simple_class_expression" "_simple_class_type" "_simple_expression" "_simple_module_expression" "_simple_pattern" "_simple_type" "_structure_item" "_tuple_type" "_type")
)
;; END All supertypes in ocamli

;; START Auto-generated list of all languages
(defconst combobulate-rules-languages
 '(c css go html javascript json ocaml ocamli python toml tsx typescript yaml)
 "A list of all the languages that have production rules.")
;; END Auto-generated list of all languages
(defconst combobulate-rules-alist
 `((c ,combobulate-rules-c)
 (css ,combobulate-rules-css)
 (go ,combobulate-rules-go)
 (html ,combobulate-rules-html)
 (javascript ,combobulate-rules-javascript)
 (json ,combobulate-rules-json)
 (ocaml ,combobulate-rules-ocaml)
 (ocamli ,combobulate-rules-ocamli)
 (python ,combobulate-rules-python)
 (toml ,combobulate-rules-toml)
 (tsx ,combobulate-rules-tsx)
 (typescript ,combobulate-rules-typescript)
 (yaml ,combobulate-rules-yaml)
))

(defconst combobulate-rules-inverse-alist
 `((c ,combobulate-rules-c-inverse)
 (css ,combobulate-rules-css-inverse)
 (go ,combobulate-rules-go-inverse)
 (html ,combobulate-rules-html-inverse)
 (javascript ,combobulate-rules-javascript-inverse)
 (json ,combobulate-rules-json-inverse)
 (ocaml ,combobulate-rules-ocaml-inverse)
 (ocamli ,combobulate-rules-ocamli-inverse)
 (python ,combobulate-rules-python-inverse)
 (toml ,combobulate-rules-toml-inverse)
 (tsx ,combobulate-rules-tsx-inverse)
 (typescript ,combobulate-rules-typescript-inverse)
 (yaml ,combobulate-rules-yaml-inverse)
))

(defconst combobulate-rules-types-alist
 `((c ,combobulate-rules-c-types)
 (css ,combobulate-rules-css-types)
 (go ,combobulate-rules-go-types)
 (html ,combobulate-rules-html-types)
 (javascript ,combobulate-rules-javascript-types)
 (json ,combobulate-rules-json-types)
 (ocaml ,combobulate-rules-ocaml-types)
 (ocamli ,combobulate-rules-ocamli-types)
 (python ,combobulate-rules-python-types)
 (toml ,combobulate-rules-toml-types)
 (tsx ,combobulate-rules-tsx-types)
 (typescript ,combobulate-rules-typescript-types)
 (yaml ,combobulate-rules-yaml-types)
))

(defconst combobulate-rules-supertypes-alist
 `((c ,combobulate-rules-c-supertypes)
 (css ,combobulate-rules-css-supertypes)
 (go ,combobulate-rules-go-supertypes)
 (html ,combobulate-rules-html-supertypes)
 (javascript ,combobulate-rules-javascript-supertypes)
 (json ,combobulate-rules-json-supertypes)
 (ocaml ,combobulate-rules-ocaml-supertypes)
 (ocamli ,combobulate-rules-ocamli-supertypes)
 (python ,combobulate-rules-python-supertypes)
 (toml ,combobulate-rules-toml-supertypes)
 (tsx ,combobulate-rules-tsx-supertypes)
 (typescript ,combobulate-rules-typescript-supertypes)
 (yaml ,combobulate-rules-yaml-supertypes)
))

(provide 'combobulate-rules)
